static Agnode_s lastn;	/* last node argument */
static polygon_t poly;
static int last, outp, sides;
static final __struct__<pointf> O = __struct__.from(pointf.class); /* point (0,0) */
static pointf vertex;
static double xsize, ysize, scalex, scaley, box_URx, box_URy;
public static boolean poly_inside(inside_t inside_context, final __struct__<pointf> p) {
    int i, i1, j, s;
    final __struct__<pointf> P = __struct__.from(pointf.class), Q = __struct__.from(pointf.class), R = __struct__.from(pointf.class);
    __ptr__ bp = inside_context.getPtr("s.bp");
    __ptr__ n = inside_context.getPtr("s.n");
    P.____(ccwrotatepf(p, 90 * GD_rankdir(agraphof(n))));
    /* Quick test if port rectangle is target */
    if (bp!=null) {
	final __struct__<boxf> bbox = __struct__.from(boxf.class);
	bbox.____(bp.getStruct());
	return (BETWEEN(bbox.getStruct("LL").getDouble("x"),P.getDouble("x"),bbox.getStruct("UR").getDouble("x"))
	&& BETWEEN(bbox.getStruct("LL").getDouble("y"),P.getDouble("y"),bbox.getStruct("UR").getDouble("y")));
    }
    if (NEQ(n, lastn)) {
	double n_width = 0, n_height = 0;
	poly = (polygon_t) ND_shape_info(n);
	vertex = (pointf) poly.getPtr("vertices");
	sides = poly.getInt("sides");
	if ((poly.getInt("option") & (1 << 11))!=0) {
UNSUPPORTED("18yw1scg4sol8bhyf1vedj9kn"); // 	   boxf bb = polyBB(poly); 
UNSUPPORTED("7rz7vxyxao0efec2nvd6g19m1"); // 	    n_width = bb.UR.x - bb.LL.x;
UNSUPPORTED("4h0k2wroz3xqx1ljokdbaqaad"); // 	    n_height = bb.UR.y - bb.LL.y;
UNSUPPORTED("dgykcjw02yoka8uz5b7jdc2ct"); // 	    /* get point and node size adjusted for rankdir=LR */
UNSUPPORTED("75jifr4aucrxp2hvnsrcfunej"); // 	    if (GD_flip(agraphof(n))) {
UNSUPPORTED("e53876tm7q1oasuu013njtgx"); // 		ysize = n_width;
UNSUPPORTED("7wnmmcv8dfzi1bdwml4vcxf0w"); // 		xsize = n_height;
UNSUPPORTED("175pyfe8j8mbhdwvrbx3gmew9"); // 	    } else {
UNSUPPORTED("10ux82vu0kynxilmf6ak7x70q"); // 		xsize = n_width;
UNSUPPORTED("5xao1mdiugxzaq03na34mbl5w"); // 		ysize = n_height;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
	} else {
	    /* get point and node size adjusted for rankdir=LR */
	    if (GD_flip(agraphof(n))!=0) {
UNSUPPORTED("dapvd4c0ggliaqcj08jvao221"); // 		ysize = ND_lw(n) + ND_rw(n);
UNSUPPORTED("8t3g4d9acruono62leh5a8hxh"); // 		xsize = ND_ht(n);
	    } else {
		xsize = ND_lw(n) + ND_rw(n);
		ysize = ND_ht(n);
	    }
	    n_width = (ROUND((ND_width(n))*72));
	    n_height = (ROUND((ND_height(n))*72));
	}
	/* scale */
	if (xsize == 0.0)
	    xsize = 1.0;
	if (ysize == 0.0)
	    ysize = 1.0;
	scalex = n_width / xsize;
	scaley = n_height / ysize;
	box_URx = n_width / 2.0;
	box_URy = n_height / 2.0;
	/* index to outer-periphery */
	outp = (poly.getInt("peripheries") - 1) * sides;
	if (outp < 0)
	    outp = 0;
	lastn = (Agnode_s) n;
    }
    /* scale */
    P.setDouble("x", P.getDouble("x") * scalex);
    P.setDouble("y", P.getDouble("y") * scaley);
    /* inside bounding box? */
    if ((fabs(P.getDouble("x")) > box_URx) || (fabs(P.getDouble("y")) > box_URy))
	return false;
    /* ellipses */
    if (sides <= 2)
	return (hypot(P.getDouble("x") / box_URx, P.getDouble("y") / box_URy) < 1.);
    /* use fast test in case we are converging on a segment */
UNSUPPORTED("9vyejop78c0t0qmj1yyc7497d"); //     i = last % sides;		/* in case last left over from larger polygon */
UNSUPPORTED("bdk6ggxp8hhbnivw73p6i83eh"); //     i1 = (i + 1) % sides;
UNSUPPORTED("b0f22dju8lllo7zc8w9v2vgws"); //     Q = vertex[i + outp];
UNSUPPORTED("5tiwwju761p1wilew2ktrvkej"); //     R = vertex[i1 + outp];
UNSUPPORTED("4t0jzbf6z1aqkt135oyy0w73j"); //     if (!(same_side(P, O, Q, R)))   /* false if outside the segment's face */
UNSUPPORTED("c9ckhc8veujmwcw0ar3u3zld4"); // 	return 0;
UNSUPPORTED("60rppiipl7nb0dsq90beenmlq"); //     /* else inside the segment face... */
UNSUPPORTED("8s06u2xgvxgwppg90vlqf01ir"); //     if ((s = same_side(P, Q, R, O)) && (same_side(P, R, O, Q))) /* true if between the segment's sides */
UNSUPPORTED("bp2y18pqq5n09006utwifdyxo"); // 	return NOT(0);
UNSUPPORTED("84dp024qc2l0cttpdyxe86g0"); //     /* else maybe in another segment */
UNSUPPORTED("3215tp5ea4x9bed5bdt2ifhlx"); //     for (j = 1; j < sides; j++) { /* iterate over remaining segments */
UNSUPPORTED("3qi4t2ykibzavxp3h22x2xsmf"); // 	if (s) { /* clockwise */
UNSUPPORTED("3ytapbo1pvh6d5wpui9eh29ay"); // 	    i = i1;
UNSUPPORTED("8k1yc1bulb27n08entp8vn9q"); // 	    i1 = (i + 1) % sides;
UNSUPPORTED("1k1h7f5ek7jmj2eb95mb1vhvb"); // 	} else { /* counter clockwise */
UNSUPPORTED("4cftbc2bwhq0mlmfrhlqi7rqk"); // 	    i1 = i;
UNSUPPORTED("1x8vf0epg2i81vfls2gp4sgo4"); // 	    i = (i + sides - 1) % sides;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("lovo58p935103c3cwm4l309q"); // 	if (!(same_side(P, O, vertex[i + outp], vertex[i1 + outp]))) { /* false if outside any other segment's face */
UNSUPPORTED("av4wg22ry8tvjtf8ok5vennmr"); // 	    last = i;
UNSUPPORTED("6f1138i13x0xz1bf1thxgjgka"); // 	    return 0;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("7q8xhd46plvy58d65wwzhsm55"); //     /* inside all segments' faces */
UNSUPPORTED("6atysvsu0cm9ytxwf9j5bmc96"); //     last = i;			/* in case next edge is to same side */
UNSUPPORTED("8fwlqtemsmckleh6946lyd8mw"); //     return NOT(0);
UNSUPPORTED("c24nfmv9i7o5eoqaymbibp7m7"); // }

throw new UnsupportedOperationException();
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static boolean poly_inside(inside_t * inside_context, pointf p)
{
    static node_t *lastn;	/* last node argument */
    static polygon_t *poly;
    static int last, outp, sides;
    static pointf O;		/* point (0,0) */
    static pointf *vertex;
    static double xsize, ysize, scalex, scaley, box_URx, box_URy;
    int i, i1, j, s;
    pointf P, Q, R;
    boxf *bp = inside_context->s.bp;
    node_t *n = inside_context->s.n;
    P = ccwrotatepf(p, 90 * GD_rankdir(agraphof(n)));
    /* Quick test if port rectangle is target */
    if (bp) {
	boxf bbox = *bp;
	return (BETWEEN((bbox).LL.x,(P).x,(bbox).UR.x) && BETWEEN((bbox).LL.y,(P).y,(bbox).UR.y));
    }
    if (n != lastn) {
	double n_width, n_height;
	poly = (polygon_t *) ND_shape_info(n);
	vertex = poly->vertices;
	sides = poly->sides;
	if (poly->option & (1 << 11)) {
	   boxf bb = polyBB(poly); 
	    n_width = bb.UR.x - bb.LL.x;
	    n_height = bb.UR.y - bb.LL.y;
	    /* get point and node size adjusted for rankdir=LR */
	    if (GD_flip(agraphof(n))) {
		ysize = n_width;
		xsize = n_height;
	    } else {
		xsize = n_width;
		ysize = n_height;
	    }
	} else {
	    /* get point and node size adjusted for rankdir=LR */
	    if (GD_flip(agraphof(n))) {
		ysize = ND_lw(n) + ND_rw(n);
		xsize = ND_ht(n);
	    } else {
		xsize = ND_lw(n) + ND_rw(n);
		ysize = ND_ht(n);
	    }
	    n_width = (ROUND((ND_width(n))*72));
	    n_height = (ROUND((ND_height(n))*72));
	}
	/* scale */
	if (xsize == 0.0)
	    xsize = 1.0;
	if (ysize == 0.0)
	    ysize = 1.0;
	scalex = n_width / xsize;
	scaley = n_height / ysize;
	box_URx = n_width / 2.0;
	box_URy = n_height / 2.0;
	/* index to outer-periphery */
	outp = (poly->peripheries - 1) * sides;
	if (outp < 0)
	    outp = 0;
	lastn = n;
    }
    /* scale */
    P.x *= scalex;
    P.y *= scaley;
    /* inside bounding box? */
    if ((fabs(P.x) > box_URx) || (fabs(P.y) > box_URy))
	return 0;
    /* ellipses */
    if (sides <= 2)
	return (hypot(P.x / box_URx, P.y / box_URy) < 1.);
    /* use fast test in case we are converging on a segment */
    i = last % sides;		/* in case last left over from larger polygon */
    i1 = (i + 1) % sides;
    Q = vertex[i + outp];
    R = vertex[i1 + outp];
    if (!(same_side(P, O, Q, R)))   /* false if outside the segment's face */
	return 0;
    /* else inside the segment face... */
    if ((s = same_side(P, Q, R, O)) && (same_side(P, R, O, Q))) /* true if between the segment's sides */
	return NOT(0);
    /* else maybe in another segment */
    for (j = 1; j < sides; j++) { /* iterate over remaining segments */
	if (s) { /* clockwise */
	    i = i1;
	    i1 = (i + 1) % sides;
	} else { /* counter clockwise */
	    i1 = i;
	    i = (i + sides - 1) % sides;
	}
	if (!(same_side(P, O, vertex[i + outp], vertex[i1 + outp]))) { /* false if outside any other segment's face */
	    last = i;
	    return 0;
	}
    }
    /* inside all segments' faces */
    last = i;			/* in case next edge is to same side */
    return NOT(0);
}

