public static void poly_init(Agnode_s n) {
    final __struct__<pointf> dimen = __struct__.from(pointf.class), min_bb = __struct__.from(pointf.class), bb = __struct__.from(pointf.class);
    final __struct__<point> imagesize = __struct__.from(point.class);
    final __struct__<pointf> P = __struct__.from(pointf.class), Q = __struct__.from(pointf.class), R = __struct__.from(pointf.class);
    __ptr__ vertices = null;
    CString p, sfile, fxd;
    double temp, alpha, beta, gamma;
    double orientation, distortion, skew;
    double sectorangle, sidelength, skewdist, gdistortion, gskew;
    double angle, sinx, cosx, xmax=0, ymax=0, scalex, scaley;
    double width=0, height=0, marginx, marginy, spacex;
    boolean regular; int peripheries, sides;
    boolean isBox; int i, j, outp;
    polygon_t poly = (polygon_t) Memory.malloc(polygon_t.class);
    regular = ND_shape(n).getPtr("polygon").getBoolean("regular");
    peripheries = ND_shape(n).getPtr("polygon").getInt("peripheries");
    sides = ND_shape(n).getPtr("polygon").getInt("sides");
    orientation = ND_shape(n).getPtr("polygon").getDouble("orientation");
    skew = ND_shape(n).getPtr("polygon").getDouble("skew");
    distortion = ND_shape(n).getPtr("polygon").getDouble("distortion");
    regular |= mapbool(agget(n, new CString("regular")));
    /* all calculations in floating point POINTS */
    /* make x and y dimensions equal if node is regular
     *   If the user has specified either width or height, use the max.
     *   Else use minimum default value.
     * If node is not regular, use the current width and height.
     */
    if (regular) {
UNSUPPORTED("637wuscax8bj094m73fwq3n00"); // 	double sz = userSize(n);
UNSUPPORTED("6wtpde1bxbwd70jz3vuemuvqe"); // 	if (sz > 0.0)
UNSUPPORTED("c4cn28kuy1f86y4d8rbxy1a4g"); // 	    width = height = sz;
UNSUPPORTED("8k75h069sv2k9b6tgz77dscwd"); // 	else {
UNSUPPORTED("mafr2nmpj8xgeranqldzxhtb"); // 	    width = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width);
UNSUPPORTED("l2a1m5p66005ftc6gdbosugj"); // 	    height = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height);
UNSUPPORTED("61qxt5l8ums7d9os9ungn3rao"); // 	    width = height = ((((((width)<(height)?(width):(height)))*72>=0)?(int)((((width)<(height)?(width):(height)))*72 + .5):(int)((((width)<(height)?(width):(height)))*72 - .5)));
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
    } else {
	width = (ROUND((ND_width(n))*72));
	height = (ROUND((ND_height(n))*72));
    }
    peripheries = late_int(n, N_peripheries, peripheries, 0);
    orientation += late_double(n, N_orientation, 0.0, -360.0);
    if (sides == 0) {		/* not for builtins */
UNSUPPORTED("dd178b113cb8130tl6q70lcp3"); // 	skew = late_double(n, N_skew, 0.0, -100.0);
UNSUPPORTED("cp83hdn3dp0a7rp9bauc3bgki"); // 	sides = late_int(n, N_sides, 4, 0);
UNSUPPORTED("abmuc3vqirf3i48480fj0k14g"); // 	distortion = late_double(n, N_distortion, 0.0, -100.0);
    }
    /* get label dimensions */
    dimen.____(ND_label(n).getStruct("dimen"));
    /* minimal whitespace around label */
    if (ROUND(abs(dimen.getDouble("x")))!=0 || ROUND(abs(dimen.getDouble("y")))!=0) {
    	/* padding */
	if ((p = agget(n, new CString("margin")))!=null) {
UNSUPPORTED("4dlqwm3pklzgz2e777dm56n03"); // 	    marginx = marginy = 0;
UNSUPPORTED("r186dwelv54pq63p2yo4czig"); // 	    i = sscanf(p, "%lf,%lf", &marginx, &marginy);
UNSUPPORTED("bjp5a2wbzhormf75ov5fumqto"); // 	    if (marginx < 0)
UNSUPPORTED("3tsws28ifjzq7ju8xs3ye4x18"); // 		marginx = 0;
UNSUPPORTED("7gfecwqgqof787z8u1mgh7qoj"); // 	    if (marginy < 0)
UNSUPPORTED("1xpqznf0i4ljd2b5j81ipsvtg"); // 		marginy = 0;
UNSUPPORTED("1lcx62wzgnn34tk5li0sgoqwm"); // 	    if (i > 0) {
UNSUPPORTED("dau1s6m0w92gp7bvqz3f63wnp"); // 		dimen.x += 2 * ((((marginx)*72>=0)?(int)((marginx)*72 + .5):(int)((marginx)*72 - .5)));
UNSUPPORTED("79iqlz01of88ftxysvivw2hgw"); // 		if (i > 1)
UNSUPPORTED("6opppos2hcjet4cn76130ykba"); // 		    dimen.y += 2 * ((((marginy)*72>=0)?(int)((marginy)*72 + .5):(int)((marginy)*72 - .5)));
UNSUPPORTED("7e1uy5mzei37p66t8jp01r3mk"); // 		else
UNSUPPORTED("8bwwxn4jop0urcsfnygjofg9s"); // 		    dimen.y += 2 * ((((marginx)*72>=0)?(int)((marginx)*72 + .5):(int)((marginx)*72 - .5)));
UNSUPPORTED("afk9bpom7x393euamnvwwkx6b"); // 	    } else
UNSUPPORTED("87bdwkkwbzyswxnepdd9bj8mb"); // 		{((dimen).x += 4*4); ((dimen).y += 2*4);};
	} else
	    {
	    dimen.setDouble("x", dimen.getDouble("x") + 4*4);
	    dimen.setDouble("y", dimen.getDouble("y") + 2*4);
	    };
    }
    spacex = dimen.getDouble("x") - ND_label(n).getStruct("dimen").getDouble("x");
    /* quantization */
    if ((temp = agraphof(n).castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").getDouble("quantum")) > 0.0) {
UNSUPPORTED("3nqb0s5rkwj3igt71vooj8asd"); // 	temp = ((((temp)*72>=0)?(int)((temp)*72 + .5):(int)((temp)*72 - .5)));
UNSUPPORTED("5fxtqwy8liyvnx1yvsou5hb4o"); // 	dimen.x = quant(dimen.x, temp);
UNSUPPORTED("et885f1jcqpske6ip856arouv"); // 	dimen.y = quant(dimen.y, temp);
    }
    imagesize.setInt("x", 0);
    imagesize.setInt("y", 0);
    if (ND_shape(n).getBoolean("usershape")) {
	/* custom requires a shapefile
	 * not custom is an adaptable user shape such as a postscript
	 * function.
	 */
UNSUPPORTED("7jbvoylyb27di8f54ufxj4mbk"); // 	if ((*((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->name)==*("custom")&&!strcmp((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->name,"custom"))) {
UNSUPPORTED("cnfv2ayyl46ohdl5p4pc75swz"); // 	    sfile = agget(n, "shapefile");
UNSUPPORTED("6llro6gigojo2r8oo6c4k320o"); // 	    imagesize = gvusershape_size(agraphof(n), sfile);
UNSUPPORTED("3ngt3ika8ppq3m9vbgf2q5lu1"); // 	    if ((imagesize.x == -1) && (imagesize.y == -1)) {
UNSUPPORTED("5l8jenkv77ax02t47zzxyv1k0"); // 		agerr(AGWARN,
UNSUPPORTED("7hgyav5bbs1v4kts1oocozork"); // 		      "No or improper shapefile=\"%s\" for node \"%s\"\n",
UNSUPPORTED("34s5a4xy12nydt3idmis4np67"); // 		      (sfile ? sfile : "<nil>"), agnameof(n));
UNSUPPORTED("apwtbaz0akr5pg5p6uwcroaan"); // 		imagesize.x = imagesize.y = 0;
UNSUPPORTED("175pyfe8j8mbhdwvrbx3gmew9"); // 	    } else {
UNSUPPORTED("4xiqgw4br039sl4r32gg5jv6k"); // 		(((Agraphinfo_t*)(((Agobj_t*)(agraphof(n)))->data))->has_images) = (!(0));
UNSUPPORTED("3nl4wsbxuqlad4tcg8vmg99rx"); // 		imagesize.x += 2;	/* some fixed padding */
UNSUPPORTED("da00oaavfp6fwqwgshhrodz2r"); // 		imagesize.y += 2;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
    } else if ((sfile = agget(n, new CString("image")))!=null && (sfile.charAt(0) != '\0')) {
UNSUPPORTED("76t38i30025xohbzg8w9z4pn9"); // 	imagesize = gvusershape_size(agraphof(n), sfile);
UNSUPPORTED("b8spvmvtuxcciaejq8j1xhu5s"); // 	if ((imagesize.x == -1) && (imagesize.y == -1)) {
UNSUPPORTED("cw5grwj6gbj94jcztvnp2ooyj"); // 	    agerr(AGWARN,
UNSUPPORTED("68jdsrao22ymfpb8e1rdezyez"); // 		  "No or improper image=\"%s\" for node \"%s\"\n",
UNSUPPORTED("5lmxoq1rboqrxrchjf5ubg6w5"); // 		  (sfile ? sfile : "<nil>"), agnameof(n));
UNSUPPORTED("7wmzbnczyvj4oocepujtghrka"); // 	    imagesize.x = imagesize.y = 0;
UNSUPPORTED("7yhr8hn3r6wohafwxrt85b2j2"); // 	} else {
UNSUPPORTED("71mfu0uflnm85dbt8g2oxs9rd"); // 	    (((Agraphinfo_t*)(((Agobj_t*)(agraphof(n)))->data))->has_images) = (!(0));
UNSUPPORTED("286u48muwmjkomlzqufoqm5cw"); // 	    imagesize.x += 2;	/* some fixed padding */
UNSUPPORTED("1x57knvrmlciu7odfroo3paso"); // 	    imagesize.y += 2;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
    }
    /* initialize node bb to labelsize */
    bb.setDouble("x", ((dimen.getDouble("x"))>(imagesize.getInt("x"))?(dimen.getDouble("x")):(imagesize.getInt("x"))));
    bb.setDouble("y", ((dimen.getDouble("y"))>(imagesize.getInt("y"))?(dimen.getDouble("y")):(imagesize.getInt("y"))));
    /* I don't know how to distort or skew ellipses in postscript */
    /* Convert request to a polygon with a large number of sides */
    if ((sides <= 2) && ((distortion != 0.) || (skew != 0.))) {
	sides = 120;
    }
    /* extra sizing depends on if label is centered vertically */
    p = agget(n, new CString("labelloc"));
    if (p!=null && (p.charAt(0) == 't' || p.charAt(0) == 'b'))
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").setInt("valign", p.charAt(0));
    else
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").setInt("valign", 'c');
    isBox = (sides == 4 && (((orientation>=0)?(int)(orientation + .5):(int)(orientation - .5)) % 90) == 0
	     && distortion == 0. && skew == 0.);
    if (isBox) {
	/* for regular boxes the fit should be exact */
    } else if (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getPtr("polygon").getPtr("vertices")!=null) {
UNSUPPORTED("4adqsyjwqwzs50ggjp57ok6u7"); // 	poly_desc_t* pd = (poly_desc_t*)(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices;
UNSUPPORTED("1fjwgzo5xkijo98ycmzhal8yv"); // 	bb = pd->size_gen(bb);
    } else {
	/* for all other shapes, compute a smallest ellipse
	 * containing bb centered on the origin, and then pad for that.
	 * We assume the ellipse is defined by a scaling up of bb.
	 */
	temp = bb.getDouble("y") * 1.41421356237309504880;
	if (height > temp && (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getInt("valign") == 'c')) {
	    /* if there is height to spare
	     * and the label is centered vertically
	     * then just pad x in proportion to the spare height */
	    bb.setDouble("x", bb.getDouble("x") * sqrt(1. / (1. - ((bb.getDouble("y") / height) * (bb.getDouble("y") / height)))));
	} else {
	    bb.setDouble("x", bb.getDouble("x") * 1.41421356237309504880);
	    bb.setDouble("y", temp);
	}
	if (sides > 2) {
	    temp = cos(3.14159265358979323846 / sides);
	    bb.setDouble("x", bb.getDouble("x") / temp);
	    bb.setDouble("y", bb.getDouble("y") / temp);
	    /* FIXME - for odd-sided polygons, e.g. triangles, there
	       would be a better fit with some vertical adjustment of the shape */
	}
    }
    /* at this point, bb is the minimum size of node that can hold the label */
    min_bb.____(bb);
    /* increase node size to width/height if needed */
    fxd = late_string(n, N_fixed, new CString("false"));
    if ((fxd.charAt(0) == 's') && (N(strcmp(fxd,new CString("shape"))))) {
	bb.setDouble("x", width);
	bb.setDouble("y", height);
	poly.setInt("option", poly.getInt("option") | (1 << 11));
    } else if (mapbool(fxd)) {
	/* check only label, as images we can scale to fit */
	if ((width < (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getDouble("dimen.x")) 
		|| (height < (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getDouble("dimen.y")))))
	    System.err.println(
		  "node '%s', graph '%s' size too small for label\n");
		  //agnameof(n), agnameof(agraphof(n)));
	bb.setDouble("x",  width);
	bb.setDouble("y", height);
    } else {
	width = MAX(width, bb.getDouble("x"));
	bb.setDouble("x", width);
	height = MAX(height, bb.getDouble("y"));
	bb.setDouble("y", height);
    }
    /* If regular, make dimensions the same.
     * Need this to guarantee final node size is regular.
     */
    if (regular) {
    width = MAX(bb.getDouble("x"), bb.getDouble("y"));
    height = width;
    bb.setDouble("x", width);
    bb.setDouble("y", width);
    }
    /* Compute space available for label.  Provides the justification borders */
    if (N(mapbool(late_string(n, N_nojustify, new CString("false"))))) {
	if (isBox) {
	    ND_label(n).getStruct("space").setDouble("x", MAX(dimen.getDouble("x"),bb.getDouble("x")) - spacex);
	}
	else if (dimen.getDouble("y") < bb.getDouble("y")) {
	    temp = bb.getDouble("x") * sqrt(1.0 - SQR(dimen.getDouble("y")) / SQR(bb.getDouble("y")));
	    ND_label(n).getStruct("space").setDouble("x", MAX(dimen.getDouble("x"),temp) - spacex);
        }
	else
	    ND_label(n).getStruct("space").setDouble("x", dimen.getDouble("x") - spacex);
    } else {
	    ND_label(n).getStruct("space").setDouble("x", dimen.getDouble("x") - spacex);
    }
    if ((poly.getInt("option") & (1 << 11)) == 0) {
	temp = bb.getDouble("y") - min_bb.getDouble("y");
	if (dimen.getDouble("y") < imagesize.getInt("y"))
	    temp += imagesize.getInt("y") - dimen.getDouble("y");
	ND_label(n).getStruct("space").setDouble("y", dimen.getDouble("y") + temp);
    }
    outp = peripheries;
    if (peripheries < 1)
	outp = 1;
    if (sides < 3) {		/* ellipses */
	sides = 2;
	vertices = zmalloc(sizeof(pointf.class, outp * sides));
	P.setDouble("x", bb.getDouble("x") / 2.);
	P.setDouble("y", bb.getDouble("y") / 2.);
	vertices.setDouble("x", -P.getDouble("x"));
	vertices.setDouble("y", -P.getDouble("y"));
	vertices.plus(1).setDouble("x", P.getDouble("x"));
	vertices.plus(1).setDouble("y", P.getDouble("y"));
	if (peripheries > 1) {
UNSUPPORTED("4ofenmfgj7cgyf624qmugcx77"); // 	    for (j = 1, i = 2; j < peripheries; j++) {
UNSUPPORTED("458w3r6n3nidn2j2b154phpzt"); // 		P.x += 4;
UNSUPPORTED("24bcrwtjsfswpmtwxnadf0cn1"); // 		P.y += 4;
UNSUPPORTED("byrwdiqkace7e10l3pibk54wg"); // 		vertices[i].x = -P.x;
UNSUPPORTED("bicdgzzy9pdopb03hn9l48yns"); // 		vertices[i].y = -P.y;
UNSUPPORTED("en9fjm2thtauyxn9t7v4j2xgl"); // 		i++;
UNSUPPORTED("2pejlnamuvmi1m7339vzctpnb"); // 		vertices[i].x = P.x;
UNSUPPORTED("dy64x78vvm5nufbuxsn0bi8ng"); // 		vertices[i].y = P.y;
UNSUPPORTED("en9fjm2thtauyxn9t7v4j2xgl"); // 		i++;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("6g6b8zsanvqyc953c4jh1j7iy"); // 	    bb.x = 2. * P.x;
UNSUPPORTED("b5z0hw4dacenv33xsaex70g8d"); // 	    bb.y = 2. * P.y;
	}
    } else {
/*
 * FIXME - this code is wrong - it doesn't work for concave boundaries.
 *          (e.g. "folder"  or "promoter")
 *   I don't think it even needs sectorangle, or knowledge of skewed shapes.
 *   (Concepts that only work for convex regular (modulo skew/distort) polygons.)
 *
 *   I think it only needs to know inside v. outside (by always drawing
 *   boundaries clockwise, say),  and the two adjacent segments.
 *
 *   It needs to find the point where the two lines, parallel to
 *   the current segments, and outside by GAP distance, intersect.   
 */
	vertices = zmalloc(sizeof(pointf.class, outp * sides));
	if (ND_shape(n).getPtr("polygon").getPtr("vertices")!=null) {
UNSUPPORTED("3ghle84ieryaenfnlbzrfv7bw"); // 	    poly_desc_t* pd = (poly_desc_t*)(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices;
UNSUPPORTED("227lpcg9dt83m2bm8yshb4djf"); // 	    pd->vertex_gen (vertices, &bb);
UNSUPPORTED("cc3jvnwvbhjhro4adeet363yd"); // 	    xmax = bb.x/2;
UNSUPPORTED("39rdmp8vl9muqtv7xs1xwtrwk"); // 	    ymax = bb.y/2;
	} else {
	    sectorangle = 2. * M_PI / sides;
	    sidelength = sin(sectorangle / 2.);
	    skewdist = hypot(fabs(distortion) + fabs(skew), 1.);
	    gdistortion = distortion * SQRT2 / cos(sectorangle / 2.);
	    gskew = skew / 2.;
	    angle = (sectorangle - M_PI) / 2.;
	    sinx = sin(angle); cosx = cos(angle);
	    R.setDouble("x", .5 * cosx);
	    R.setDouble("y", .5 * sinx);
	    xmax = ymax = 0.;
	    angle += (M_PI - sectorangle) / 2.;
	    for (i = 0; i < sides; i++) {
	    /*next regular vertex */
		angle += sectorangle;
	    sinx = sin(angle); cosx = cos(angle);
		R.setDouble("x", R.getDouble("x") + sidelength * cosx);
		R.setDouble("y", R.getDouble("y") + sidelength * sinx);
	    /*distort and skew */
		P.setDouble("x", R.getDouble("x") * (skewdist + R.getDouble("y") * gdistortion) + R.getDouble("y") * gskew);
		P.setDouble("y", R.getDouble("y"));
	    /*orient P.x,P.y */
		alpha = RADIANS(orientation) + atan2(P.getDouble("y"), P.getDouble("x"));
	    sinx = sin(alpha); cosx = cos(alpha);
		P.setDouble("y", hypot(P.getDouble("x"), P.getDouble("y")));
		P.setDouble("x", P.getDouble("y"));
		P.setDouble("x", P.getDouble("x") * cosx);
		P.setDouble("y", P.getDouble("y") * sinx);
	    /*scale for label */
		P.setDouble("x", P.getDouble("x") * bb.getDouble("x"));
		P.setDouble("y", P.getDouble("y") * bb.getDouble("y"));
	    /*find max for bounding box */
		xmax = MAX(fabs(P.getDouble("x")), xmax);
		ymax = MAX(fabs(P.getDouble("y")), ymax);
	    /* store result in array of points */
		vertices.plus(i).setStruct(P);
		if (isBox) { /* enforce exact symmetry of box */
		    vertices.plus(1).setDouble("x", -P.getDouble("x"));
		    vertices.plus(1).setDouble("y", P.getDouble("y"));
		    vertices.plus(2).setDouble("x", -P.getDouble("x"));
		    vertices.plus(2).setDouble("y", -P.getDouble("y"));
		    vertices.plus(3).setDouble("x", P.getDouble("x"));
		    vertices.plus(3).setDouble("y", -P.getDouble("y"));
		    break;
		}
	    }
	}
	/* apply minimum dimensions */
	xmax *= 2.;
	ymax *= 2.;
	bb.setDouble("x", MAX(width, xmax));
	bb.setDouble("y", MAX(height, ymax));
	scalex = bb.getDouble("x") / xmax;
	scaley = bb.getDouble("y") / ymax;
	for (i = 0; i < sides; i++) {
	    P.____(vertices.plus(i));
	    P.setDouble("x", P.getDouble("x") * scalex);
	    P.setDouble("y", P.getDouble("y") * scaley);
	    vertices.plus(i).setStruct(P);
	}
	if (peripheries > 1) {
UNSUPPORTED("3x6t3unoi91ezbh3iz168cm2t"); // 	    Q = vertices[(sides - 1)];
UNSUPPORTED("8cm8js7jdmpakzujw3wo4h6jk"); // 	    R = vertices[0];
UNSUPPORTED("5zpv8twf25wr8n71ql3lh8ku2"); // 	    beta = atan2(R.y - Q.y, R.x - Q.x);
UNSUPPORTED("9mlrumbikcvketd18jx1ox7k7"); // 	    for (i = 0; i < sides; i++) {
UNSUPPORTED("gkm8nb6f6ispdzj0ausiv1fe"); // 		/*for each vertex find the bisector */
UNSUPPORTED("8tp61rvblb9bmqfwgyknlk906"); // 		P = Q;
UNSUPPORTED("1ls3xc8rwvn3763c32mx1wzsd"); // 		Q = R;
UNSUPPORTED("1zrelve2mvbnzah086dkomf6k"); // 		R = vertices[(i + 1) % sides];
UNSUPPORTED("bgx8ee996r89memnp0ea0b80m"); // 		alpha = beta;
UNSUPPORTED("5p9jzpcd51evtwqyugnwk50vf"); // 		beta = atan2(R.y - Q.y, R.x - Q.x);
UNSUPPORTED("dwskcoivmu9pc5kth75x0ersl"); // 		gamma = (alpha + 3.14159265358979323846 - beta) / 2.;
UNSUPPORTED("cmm5tvlcafe2aso9bkk3kl7of"); // 		/*find distance along bisector to */
UNSUPPORTED("bebwurfm1a1h1bywf9kf5ueug"); // 		/*intersection of next periphery */
UNSUPPORTED("1mtgr15b978d0tdunbpj2pkdp"); // 		temp = 4 / sin(gamma);
UNSUPPORTED("28mxt6c4230xruf63s6u415y9"); // 		/*convert this distance to x and y */
UNSUPPORTED("1fxw0fz2b6iq6p6qy58mx9mwu"); // 		*&sinx = sin((alpha - gamma)); *&cosx = cos((alpha - gamma));
UNSUPPORTED("8j7vx250v0icumolzos2p5qa8"); // 		sinx *= temp;
UNSUPPORTED("35ed1mrpnziq164g6cg4stt5w"); // 		cosx *= temp;
UNSUPPORTED("eu3ptwi3s2200v4253yk1x69t"); // 		/*save the vertices of all the */
UNSUPPORTED("7lc5jxgzj6z4lq7sd9y2b6vex"); // 		/*peripheries at this base vertex */
UNSUPPORTED("86nzalouete6viryy967d5g9u"); // 		for (j = 1; j < peripheries; j++) {
UNSUPPORTED("dautpj9jyj2qwa8jpujdh3436"); // 		    Q.x += cosx;
UNSUPPORTED("7p6tl6s20kdual1ysfoxl8wku"); // 		    Q.y += sinx;
UNSUPPORTED("1yw9xq85ss81cogn9jrg24ojc"); // 		    vertices[i + j * sides] = Q;
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("9mlrumbikcvketd18jx1ox7k7"); // 	    for (i = 0; i < sides; i++) {
UNSUPPORTED("aa5s79go4kwos2as72rcsdrxf"); // 		P = vertices[i + (peripheries - 1) * sides];
UNSUPPORTED("7ee9ageu4efyramsg9jn6klpb"); // 		bb.x = ((2. * fabs(P.x))>(bb.x)?(2. * fabs(P.x)):(bb.x));
UNSUPPORTED("lklvdmn7xiqbxhpgdeufcvjj"); // 		bb.y = ((2. * fabs(P.y))>(bb.y)?(2. * fabs(P.y)):(bb.y));
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
	}
    }
    poly.setInt("regular", regular?1:0);
    poly.setInt("peripheries", peripheries);
    poly.setInt("sides", sides);
    poly.setDouble("orientation", orientation);
    poly.setDouble("skew", skew);
    poly.setDouble("distortion", distortion);
    poly.setPtr("vertices", vertices);
    if ((poly.getInt("option") & (1 << 11))!=0) {
	/* set width and height to reflect label and shape */
UNSUPPORTED("7kk8oru3b3copylmq3gssx6qx"); // 	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width) = ((((dimen.x)>(bb.x)?(dimen.x):(bb.x)))/(double)72);
UNSUPPORTED("8oouzms2x039fhfcfxm7yc4su"); // 	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height) = ((((dimen.y)>(bb.y)?(dimen.y):(bb.y)))/(double)72);
    } else {
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setDouble("width", ((bb.getDouble("x"))/(double)72));
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setDouble("height", ((bb.getDouble("y"))/(double)72));
    }
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setPtr("shape_info", poly);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void poly_init(node_t * n)
{
    pointf dimen, min_bb, bb;
    point imagesize;
    pointf P, Q, R;
    pointf *vertices;
    char *p, *sfile, *fxd;
    double temp, alpha, beta, gamma;
    double orientation, distortion, skew;
    double sectorangle, sidelength, skewdist, gdistortion, gskew;
    double angle, sinx, cosx, xmax, ymax, scalex, scaley;
    double width, height, marginx, marginy, spacex;
    int regular, peripheries, sides;
    int i, j, isBox, outp;
    polygon_t *poly = (polygon_t*)zmalloc(sizeof(polygon_t));
    regular = ND_shape(n)->polygon->regular;
    peripheries = ND_shape(n)->polygon->peripheries;
    sides = ND_shape(n)->polygon->sides;
    orientation = ND_shape(n)->polygon->orientation;
    skew = ND_shape(n)->polygon->skew;
    distortion = ND_shape(n)->polygon->distortion;
    regular |= mapbool(agget(n, "regular"));
    /* all calculations in floating point POINTS */
    /* make x and y dimensions equal if node is regular
     *   If the user has specified either width or height, use the max.
     *   Else use minimum default value.
     * If node is not regular, use the current width and height.
     */
    if (regular) {
	double sz = userSize(n);
	if (sz > 0.0)
	    width = height = sz;
	else {
	    width = ND_width(n);
	    height = ND_height(n);
	    width = height = (ROUND((MIN(width, height))*72));
	}
    } else {
	width = (ROUND((ND_width(n))*72));
	height = (ROUND((ND_height(n))*72));
    }
    peripheries = late_int(n, N_peripheries, peripheries, 0);
    orientation += late_double(n, N_orientation, 0.0, -360.0);
    if (sides == 0) {		/* not for builtins */
	skew = late_double(n, N_skew, 0.0, -100.0);
	sides = late_int(n, N_sides, 4, 0);
	distortion = late_double(n, N_distortion, 0.0, -100.0);
    }
    /* get label dimensions */
    dimen = ND_label(n)->dimen;
    /* minimal whitespace around label */
    if (ROUND(abs(dimen.x)) || ROUND(abs(dimen.y))) {
	/* padding */
	if ((p = agget(n, "margin"))) {
	    marginx = marginy = 0;
	    i = sscanf(p, "%lf,%lf", &marginx, &marginy);
	    if (marginx < 0)
		marginx = 0;
	    if (marginy < 0)
		marginy = 0;
	    if (i > 0) {
		dimen.x += 2 * (ROUND((marginx)*72));
		if (i > 1)
		    dimen.y += 2 * (ROUND((marginy)*72));
		else
		    dimen.y += 2 * (ROUND((marginx)*72));
	    } else
		{((dimen).x += 4*4); ((dimen).y += 2*4);};
	} else
	    {((dimen).x += 4*4); ((dimen).y += 2*4);};
    }
    spacex = dimen.x - ND_label(n)->dimen.x;
    /* quantization */
    if ((temp = GD_drawing(agraphof(n))->quantum) > 0.0) {
	temp = (ROUND((temp)*72));
	dimen.x = quant(dimen.x, temp);
	dimen.y = quant(dimen.y, temp);
    }
    imagesize.x = imagesize.y = 0;
    if (ND_shape(n)->usershape) {
	/* custom requires a shapefile
	 * not custom is an adaptable user shape such as a postscript
	 * function.
	 */
	if ((*(ND_shape(n)->name)==*("custom")&&!strcmp(ND_shape(n)->name,"custom"))) {
	    sfile = agget(n, "shapefile");
	    imagesize = gvusershape_size(agraphof(n), sfile);
	    if ((imagesize.x == -1) && (imagesize.y == -1)) {
		agerr(AGWARN,
		      "No or improper shapefile=\"%s\" for node \"%s\"\n",
		      (sfile ? sfile : "<nil>"), agnameof(n));
		imagesize.x = imagesize.y = 0;
	    } else {
		GD_has_images(agraphof(n)) = NOT(0);
		imagesize.x += 2;	/* some fixed padding */
		imagesize.y += 2;
	    }
	}
    } else if ((sfile = agget(n, "image")) && (*sfile != '\0')) {
	imagesize = gvusershape_size(agraphof(n), sfile);
	if ((imagesize.x == -1) && (imagesize.y == -1)) {
	    agerr(AGWARN,
		  "No or improper image=\"%s\" for node \"%s\"\n",
		  (sfile ? sfile : "<nil>"), agnameof(n));
	    imagesize.x = imagesize.y = 0;
	} else {
	    GD_has_images(agraphof(n)) = NOT(0);
	    imagesize.x += 2;	/* some fixed padding */
	    imagesize.y += 2;
	}
    }
    /* initialize node bb to labelsize */
    bb.x = MAX(dimen.x, imagesize.x);
    bb.y = MAX(dimen.y, imagesize.y);
    /* I don't know how to distort or skew ellipses in postscript */
    /* Convert request to a polygon with a large number of sides */
    if ((sides <= 2) && ((distortion != 0.) || (skew != 0.))) {
	sides = 120;
    }
    /* extra sizing depends on if label is centered vertically */
    p = agget(n, "labelloc");
    if (p && (p[0] == 't' || p[0] == 'b'))
	ND_label(n)->valign = p[0];
    else
	ND_label(n)->valign = 'c';
    isBox = (sides == 4 && (ROUND(orientation) % 90) == 0
	     && distortion == 0. && skew == 0.);
    if (isBox) {
	/* for regular boxes the fit should be exact */
    } else if (ND_shape(n)->polygon->vertices) {
	poly_desc_t* pd = (poly_desc_t*)ND_shape(n)->polygon->vertices;
	bb = pd->size_gen(bb);
    } else {
	/* for all other shapes, compute a smallest ellipse
	 * containing bb centered on the origin, and then pad for that.
	 * We assume the ellipse is defined by a scaling up of bb.
	 */
	temp = bb.y * SQRT2;
	if (height > temp && ND_label(n)->valign == 'c') {
	    /* if there is height to spare
	     * and the label is centered vertically
	     * then just pad x in proportion to the spare height */
	    bb.x *= sqrt(1. / (1. - SQR(bb.y / height)));
	} else {
	    bb.x *= SQRT2;
	    bb.y = temp;
	}
	if (sides > 2) {
	    temp = cos(M_PI / sides);
	    bb.x /= temp;
	    bb.y /= temp;
	    /* FIXME - for odd-sided polygons, e.g. triangles, there
	       would be a better fit with some vertical adjustment of the shape */
	}
    }
    /* at this point, bb is the minimum size of node that can hold the label */
    min_bb = bb;
    /* increase node size to width/height if needed */
    fxd = late_string(n, N_fixed, "false");
    if ((*fxd == 's') && (*(fxd)==*("shape")&&!strcmp(fxd,"shape"))) {
	bb.x = width;
	bb.y = height;
	poly->option |= (1 << 11);
    } else if (mapbool(fxd)) {
	/* check only label, as images we can scale to fit */
	if ((width < ND_label(n)->dimen.x) || (height < ND_label(n)->dimen.y))
	    agerr(AGWARN,
		  "node '%s', graph '%s' size too small for label\n",
		  agnameof(n), agnameof(agraphof(n)));
	bb.x = width;
	bb.y = height;
    } else {
	bb.x = width = MAX(width, bb.x);
	bb.y = height = MAX(height, bb.y);
    }
    /* If regular, make dimensions the same.
     * Need this to guarantee final node size is regular.
     */
    if (regular) {
	width = height = bb.x = bb.y = MAX(bb.x, bb.y);
    }
    /* Compute space available for label.  Provides the justification borders */
    if (!mapbool(late_string(n, N_nojustify, "false"))) {
	if (isBox) {
	    ND_label(n)->space.x = MAX(dimen.x,bb.x) - spacex;
	}
	else if (dimen.y < bb.y) {
	    temp = bb.x * sqrt(1.0 - SQR(dimen.y) / SQR(bb.y));
	    ND_label(n)->space.x = MAX(dimen.x,temp) - spacex;
        }
	else
	    ND_label(n)->space.x = dimen.x - spacex;
    } else {
	ND_label(n)->space.x = dimen.x - spacex;
    }
    if ((poly->option & (1 << 11)) == 0) {
	temp = bb.y - min_bb.y;
	if (dimen.y < imagesize.y)
	    temp += imagesize.y - dimen.y;
	ND_label(n)->space.y = dimen.y + temp;
    }
    outp = peripheries;
    if (peripheries < 1)
	outp = 1;
    if (sides < 3) {		/* ellipses */
	sides = 2;
	vertices = (pointf*)zmalloc((outp * sides)*sizeof(pointf));
	P.x = bb.x / 2.;
	P.y = bb.y / 2.;
	vertices[0].x = -P.x;
	vertices[0].y = -P.y;
	vertices[1] = P;
	if (peripheries > 1) {
	    for (j = 1, i = 2; j < peripheries; j++) {
		P.x += 4;
		P.y += 4;
		vertices[i].x = -P.x;
		vertices[i].y = -P.y;
		i++;
		vertices[i].x = P.x;
		vertices[i].y = P.y;
		i++;
	    }
	    bb.x = 2. * P.x;
	    bb.y = 2. * P.y;
	}
    } else {
/*
 * FIXME - this code is wrong - it doesn't work for concave boundaries.
 *          (e.g. "folder"  or "promoter")
 *   I don't think it even needs sectorangle, or knowledge of skewed shapes.
 *   (Concepts that only work for convex regular (modulo skew/distort) polygons.)
 *
 *   I think it only needs to know inside v. outside (by always drawing
 *   boundaries clockwise, say),  and the two adjacent segments.
 *
 *   It needs to find the point where the two lines, parallel to
 *   the current segments, and outside by GAP distance, intersect.   
 */
	vertices = (pointf*)zmalloc((outp * sides)*sizeof(pointf));
	if (ND_shape(n)->polygon->vertices) {
	    poly_desc_t* pd = (poly_desc_t*)ND_shape(n)->polygon->vertices;
	    pd->vertex_gen (vertices, &bb);
	    xmax = bb.x/2;
	    ymax = bb.y/2;
	} else {
	    sectorangle = 2. * M_PI / sides;
	    sidelength = sin(sectorangle / 2.);
	    skewdist = hypot(fabs(distortion) + fabs(skew), 1.);
	    gdistortion = distortion * SQRT2 / cos(sectorangle / 2.);
	    gskew = skew / 2.;
	    angle = (sectorangle - M_PI) / 2.;
	    sincos(angle, &sinx, &cosx);
	    R.x = .5 * cosx;
	    R.y = .5 * sinx;
	    xmax = ymax = 0.;
	    angle += (M_PI - sectorangle) / 2.;
	    for (i = 0; i < sides; i++) {
	    /*next regular vertex */
		angle += sectorangle;
		sincos(angle, &sinx, &cosx);
		R.x += sidelength * cosx;
		R.y += sidelength * sinx;
	    /*distort and skew */
		P.x = R.x * (skewdist + R.y * gdistortion) + R.y * gskew;
		P.y = R.y;
	    /*orient P.x,P.y */
		alpha = RADIANS(orientation) + atan2(P.y, P.x);
		sincos(alpha, &sinx, &cosx);
		P.x = P.y = hypot(P.x, P.y);
		P.x *= cosx;
		P.y *= sinx;
	    /*scale for label */
		P.x *= bb.x;
		P.y *= bb.y;
	    /*find max for bounding box */
		xmax = MAX(fabs(P.x), xmax);
		ymax = MAX(fabs(P.y), ymax);
	    /* store result in array of points */
		vertices[i] = P;
		if (isBox) { /* enforce exact symmetry of box */
		    vertices[1].x = -P.x;
		    vertices[1].y = P.y;
		    vertices[2].x = -P.x;
		    vertices[2].y = -P.y;
		    vertices[3].x = P.x;
		    vertices[3].y = -P.y;
		    break;
		}
	    }
	}
	/* apply minimum dimensions */
	xmax *= 2.;
	ymax *= 2.;
	bb.x = MAX(width, xmax);
	bb.y = MAX(height, ymax);
	scalex = bb.x / xmax;
	scaley = bb.y / ymax;
	for (i = 0; i < sides; i++) {
	    P = vertices[i];
	    P.x *= scalex;
	    P.y *= scaley;
	    vertices[i] = P;
	}
	if (peripheries > 1) {
	    Q = vertices[(sides - 1)];
	    R = vertices[0];
	    beta = atan2(R.y - Q.y, R.x - Q.x);
	    for (i = 0; i < sides; i++) {
		/*for each vertex find the bisector */
		P = Q;
		Q = R;
		R = vertices[(i + 1) % sides];
		alpha = beta;
		beta = atan2(R.y - Q.y, R.x - Q.x);
		gamma = (alpha + M_PI - beta) / 2.;
		/*find distance along bisector to */
		/*intersection of next periphery */
		temp = 4 / sin(gamma);
		/*convert this distance to x and y */
		sincos((alpha - gamma), &sinx, &cosx);
		sinx *= temp;
		cosx *= temp;
		/*save the vertices of all the */
		/*peripheries at this base vertex */
		for (j = 1; j < peripheries; j++) {
		    Q.x += cosx;
		    Q.y += sinx;
		    vertices[i + j * sides] = Q;
		}
	    }
	    for (i = 0; i < sides; i++) {
		P = vertices[i + (peripheries - 1) * sides];
		bb.x = MAX(2. * fabs(P.x), bb.x);
		bb.y = MAX(2. * fabs(P.y), bb.y);
	    }
	}
    }
    poly->regular = regular;
    poly->peripheries = peripheries;
    poly->sides = sides;
    poly->orientation = orientation;
    poly->skew = skew;
    poly->distortion = distortion;
    poly->vertices = vertices;
    if (poly->option & (1 << 11)) {
	/* set width and height to reflect label and shape */
	ND_width(n) = ((MAX(dimen.x,bb.x))/(double)72);
	ND_height(n) = ((MAX(dimen.y,bb.y))/(double)72);
    } else {
	ND_width(n) = ((bb.x)/(double)72);
	ND_height(n) = ((bb.y)/(double)72);
    }
    ND_shape_info(n) = (void *) poly;
}

