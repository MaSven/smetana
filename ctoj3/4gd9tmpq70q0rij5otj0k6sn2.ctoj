public static Agedge_s new_virtual_edge(Agnode_s u, Agnode_s v, Agedge_s orig) {
    Agedge_s e;
    Agedgepair_s e2 = (Agedgepair_s)zmalloc(sizeof(Agedgepair_s.class));
    AGTYPE(e2.getStruct("in").amp(), AGINEDGE);
    AGTYPE(e2.getStruct("out").amp(), AGOUTEDGE);
    e2.getStruct("out").getStruct("base").setPtr("data", zmalloc(sizeof(Agedgeinfo_t.class)).castTo(Agedgeinfo_t.class).castTo(Agrec_s.class));
    e = (Agedge_s) e2.getStruct("out").amp();
    agtail(e, u);
    aghead(e, v);
    ED_edge_type(e, 1);
    if (orig!=null) {
	AGSEQ(e, AGSEQ(orig));
	AGSEQ(e2.getStruct("in").amp(), AGSEQ(orig));
	ED_count(e, ED_count(orig));
	ED_xpenalty(e, ED_xpenalty(orig));
	ED_weight(e, ED_weight(orig));
	ED_minlen(e, ED_minlen(orig));
	if (EQ(agtail(e), agtail(orig)))
	    ED_tail_port(e, ED_tail_port(orig));
	else if (EQ(agtail(e), aghead(orig)))
	    ED_tail_port(e, ED_head_port(orig));
	if (EQ(aghead(e), aghead(orig)))
	    ED_head_port(e, ED_head_port(orig));
	else if (EQ(aghead(e), agtail(orig)))
	    ED_head_port(e, ED_tail_port(orig));
	if (ED_to_virt(orig) == null)
	    ED_to_virt(orig, e);
	ED_to_orig(e, orig);
    } else {
	ED_minlen(e, 1);
	ED_count(e, 1);
	ED_xpenalty(e, 1);
	ED_weight(e, 1);
	}
    return e;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
edge_t *new_virtual_edge(node_t * u, node_t * v, edge_t * orig)
{
    edge_t *e;
    Agedgepair_t* e2 = (Agedgepair_t*)zmalloc(sizeof(Agedgepair_t));
    AGTYPE(&(e2->in)) = AGINEDGE;
    AGTYPE(&(e2->out)) = AGOUTEDGE;
    e2->out.base.data = (Agrec_t*)(Agedgeinfo_t*)zmalloc(sizeof(Agedgeinfo_t));
    e = &(e2->out);
    agtail(e) = u;
    aghead(e) = v;
    ED_edge_type(e) = 1;
    if (orig) {
	AGSEQ(e) = AGSEQ(orig);
	AGSEQ(&(e2->in)) = AGSEQ(orig);
	ED_count(e) = ED_count(orig);
	ED_xpenalty(e) = ED_xpenalty(orig);
	ED_weight(e) = ED_weight(orig);
	ED_minlen(e) = ED_minlen(orig);
	if (agtail(e) == agtail(orig))
	    ED_tail_port(e) = ED_tail_port(orig);
	else if (agtail(e) == aghead(orig))
	    ED_tail_port(e) = ED_head_port(orig);
	if (aghead(e) == aghead(orig))
	    ED_head_port(e) = ED_head_port(orig);
	else if (aghead(e) == agtail(orig))
	    ED_head_port(e) = ED_tail_port(orig);
	if (ED_to_virt(orig) == NULL)
	    ED_to_virt(orig) = e;
	ED_to_orig(e) = orig;
    } else
	ED_minlen(e) = ED_count(e) = ED_xpenalty(e) = ED_weight(e) = 1;
    return e;
}

