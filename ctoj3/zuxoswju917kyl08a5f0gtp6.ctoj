public static void flat_reorder(Agraph_s g) {
    int i, j, r, pos, n_search, local_in_cnt, local_out_cnt, base_order;
    Agnode_s v, t;
    __ptr__ left, right;
    __ptr__ temprank = null;
    Agedge_s flat_e, e;
    if (GD_has_flat_edges(g) == 0)
	return;
    for (r = GD_minrank(g); r <= GD_maxrank(g); r++) {
	if (GD_rank(g).plus(r).getInt("n") == 0) continue;
	base_order = ND_order(GD_rank(g).plus(r).getArrayOfPtr("v").plus(0).getPtr());
	for (i = 0; i < GD_rank(g).plus(r).getInt("n"); i++)
	    ND_mark(GD_rank(g).plus(r).getArrayOfPtr("v").plus(i).getPtr(), 0);
	temprank = ALLOC(i + 1, temprank, Agnode_s.class);
	pos = 0;
	/* construct reverse topological sort order in temprank */
	for (i = 0; i < GD_rank(g).plus(r).getInt("n"); i++) {
	    if (GD_flip(g)!=0) v = (Agnode_s) GD_rank(g).plus(r).getArrayOfPtr("v").plus(i).getPtr();
	    else v = (Agnode_s) GD_rank(g).plus(r).getArrayOfPtr("v").plus(GD_rank(g).plus(r).getInt("n") - i - 1).getPtr();
	    local_in_cnt = local_out_cnt = 0;
	    for (j = 0; j < ND_flat_in(v).getInt("size"); j++) {
		flat_e = (Agedge_s) ND_flat_in(v).getArrayOfPtr("list").plus(j).getPtr();
		if (constraining_flat_edge(g,v,flat_e)) local_in_cnt++;
	    }
	    for (j = 0; j < ND_flat_out(v).getInt("size"); j++) {
		flat_e = (Agedge_s) ND_flat_out(v).getArrayOfPtr("list").plus(j).getPtr();
		if (constraining_flat_edge(g,v,flat_e)) local_out_cnt++;
	    }
	    if ((local_in_cnt == 0) && (local_out_cnt == 0))
		temprank.plus(pos++).setPtr(v);
	    else {
		if (((ND_mark(v)) == 0) && (local_in_cnt == 0)) {
		    left = temprank.plus(pos);
		    n_search = postorder(g, v, left, r);
		    pos += n_search;
		}
	    }
	}
	if (pos!=0) {
	    if (GD_flip(g) == 0) {
		left = temprank;
		right = temprank.plus(pos - 1);
		while (left.comparePointer(right) < 0) {
		    t = (Agnode_s) left.getPtr();
		    left.setPtr(right.getPtr());
		    right.setPtr(t);
		    left = left.plus(1);
		    right = right.plus(-1);
		}
	    }
	    for (i = 0; i < GD_rank(g).plus(r).getInt("n"); i++) {
		v = (Agnode_s) temprank.plus(i).getPtr();
		GD_rank(g).plus(r).getArrayOfPtr("v").plus(i).setPtr(v);
		ND_order(v, i + base_order);
	    }
	    /* nonconstraint flat edges must be made LR */
	    for (i = 0; i < GD_rank(g).plus(r).getInt("n"); i++) {
		v = (Agnode_s) GD_rank(g).plus(r).getArrayOfPtr("v").plus(i).getPtr();
		if (ND_flat_out(v).getArrayOfPtr("list")!=null) {
		    for (j = 0; (e = (Agedge_s) ND_flat_out(v).getArrayOfPtr("list").plus(j).getPtr())!=null; j++) {
			if ( ((GD_flip(g) == 0) && (ND_order(aghead(e)) < ND_order(agtail(e)))) ||
				 ( (GD_flip(g)!=0) && (ND_order(aghead(e)) > ND_order(agtail(e)) ))) {
UNSUPPORTED("3omkik04m6s1wn9lkk45pivko"); // 			    assert(constraining_flat_edge(g,v,e) == 0);
UNSUPPORTED("7ebw4lyjfgu8v0is6gfktqm7x"); // 			    delete_flat_edge(e);
UNSUPPORTED("39xps1d6e8rc55xmsxaunuia8"); // 			    j--;
UNSUPPORTED("1w583swkkvuwckydgv3bcn71d"); // 			    flat_rev(g, e);
			}
		    }
		}
	    }
	    /* postprocess to restore intended order */
	}
	/* else do no harm! */
	GD_rank(Z._().Root).plus(r).setInt("valid", 0);
    }
    if (temprank!=null)
	Memory.free(temprank);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void flat_reorder(graph_t * g)
{
    int i, j, r, pos, n_search, local_in_cnt, local_out_cnt, base_order;
    node_t *v, **left, **right, *t;
    node_t **temprank = NULL;
    edge_t *flat_e, *e;
    if (GD_has_flat_edges(g) == 0)
	return;
    for (r = GD_minrank(g); r <= GD_maxrank(g); r++) {
	if (GD_rank(g)[r].n == 0) continue;
	base_order = ND_order(GD_rank(g)[r].v[0]);
	for (i = 0; i < GD_rank(g)[r].n; i++)
	    (ND_mark(GD_rank(g)[r].v[i])) = 0;
	temprank = ALLOC(i + 1, temprank, node_t *);
	pos = 0;
	/* construct reverse topological sort order in temprank */
	for (i = 0; i < GD_rank(g)[r].n; i++) {
	    if (GD_flip(g)) v = GD_rank(g)[r].v[i];
	    else v = GD_rank(g)[r].v[GD_rank(g)[r].n - i - 1];
	    local_in_cnt = local_out_cnt = 0;
	    for (j = 0; j < ND_flat_in(v).size; j++) {
		flat_e = ND_flat_in(v).list[j];
		if (constraining_flat_edge(g,v,flat_e)) local_in_cnt++;
	    }
	    for (j = 0; j < ND_flat_out(v).size; j++) {
		flat_e = ND_flat_out(v).list[j];
		if (constraining_flat_edge(g,v,flat_e)) local_out_cnt++;
	    }
	    if ((local_in_cnt == 0) && (local_out_cnt == 0))
		temprank[pos++] = v;
	    else {
		if (((ND_mark(v)) == 0) && (local_in_cnt == 0)) {
		    left = temprank + pos;
		    n_search = postorder(g, v, left, r);
		    pos += n_search;
		}
	    }
	}
	if (pos) {
	    if (GD_flip(g) == 0) {
		left = temprank;
		right = temprank + pos - 1;
		while (left < right) {
		    t = *left;
		    *left = *right;
		    *right = t;
		    left++;
		    right--;
		}
	    }
	    for (i = 0; i < GD_rank(g)[r].n; i++) {
		v = GD_rank(g)[r].v[i] = temprank[i];
		ND_order(v) = i + base_order;
	    }
	    /* nonconstraint flat edges must be made LR */
	    for (i = 0; i < GD_rank(g)[r].n; i++) {
		v = GD_rank(g)[r].v[i];
		if (ND_flat_out(v).list) {
		    for (j = 0; (e = ND_flat_out(v).list[j]); j++) {
			if ( ((GD_flip(g) == 0) && (ND_order(aghead(e)) < ND_order(agtail(e)))) ||
				 ( (GD_flip(g)) && (ND_order(aghead(e)) > ND_order(agtail(e)) ))) {
			    assert(constraining_flat_edge(g,v,e) == 0);
			    delete_flat_edge(e);
			    j--;
			    flat_rev(g, e);
			}
		    }
		}
	    }
	    /* postprocess to restore intended order */
	}
	/* else do no harm! */
	GD_rank(Root)[r].valid = 0;
    }
    if (temprank)
	free(temprank);
}

