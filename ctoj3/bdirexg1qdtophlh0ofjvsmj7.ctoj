public static bezier new_spline(Agedge_s e, int sz) {
    bezier rv;
    while (ED_edge_type(e) != 0)
	e = ED_to_orig(e);
    if (ED_spl(e) == null)
	ED_spl(e, zmalloc(sizeof(splines.class)));
    ED_spl(e).setPtr("list", ALLOC(ED_spl(e).getInt("size") + 1, ED_spl(e).getPtr("list"), bezier.class));
    rv = (bezier) ED_spl(e).getPtr("list").plus(ED_spl(e).getInt("size"));
    ED_spl(e).setInt("size", ED_spl(e).getInt("size")+1);
    rv.setPtr("list", zmalloc(sizeof(pointf.class, sz)));
    rv.setInt("size", sz);
    rv.setInt("sflag", 0);
    rv.setInt("eflag", 0);
    rv.getStruct("sp").setDouble("x", 0);
    rv.getStruct("sp").setDouble("y", 0);
    rv.getStruct("ep").setDouble("x", 0);
    rv.getStruct("ep").setDouble("y", 0);
    return rv;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
bezier *new_spline(edge_t * e, int sz)
{
    bezier *rv;
    while (ED_edge_type(e) != 0)
	e = ED_to_orig(e);
    if (ED_spl(e) == NULL)
	ED_spl(e) = (splines*)zmalloc(sizeof(splines));
    ED_spl(e)->list = ALLOC(ED_spl(e)->size + 1, ED_spl(e)->list, bezier);
    rv = &(ED_spl(e)->list[ED_spl(e)->size++]);
    rv->list = (pointf*)zmalloc((sz)*sizeof(pointf));
    rv->size = sz;
    rv->sflag = rv->eflag = 0;
    rv->sp.x = rv->sp.y = rv->ep.x = rv->ep.y = 0;
    return rv;
}

