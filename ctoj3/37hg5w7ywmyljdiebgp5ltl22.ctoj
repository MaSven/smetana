public static int init_graph(Agraph_s g) {
    int i, feasible;
    Agnode_s n;
    Agedge_s e;
    G = g;
    N_nodes = N_edges = S_i = 0;
    for (n = GD_nlist(g); n!=null; n = ND_next(n)) {
	ND_mark(n, 0);
	N_nodes++;
	for (i = 0; (e = (Agedge_s) ND_out(n).getArrayOfPtr("list").plus(i).getPtr())!=null; i++)
	    N_edges++;
    }
    Tree_node.setPtr("list", ALLOC_empty(N_nodes, Tree_node.getPtr("list"), Agnode_s.class));
    Tree_node.setInt("size", 0);
    Tree_edge.setPtr("list", ALLOC_empty(N_nodes, Tree_edge.getPtr("list"), Agedge_s.class));
    Tree_edge.setInt("size", 0);
    feasible = 1;
    for (n = GD_nlist(g); n!=null; n = ND_next(n)) {
	ND_priority(n, 0);
	for (i = 0; (e = (Agedge_s) ND_in(n).getArrayOfPtr("list").plus(i).getPtr())!=null; i++) {
	    ND_priority(n, 1+ND_priority(n));
	    ED_cutvalue(e, 0);
	    ED_tree_index(e, -1);
	    if (feasible!=0
		&& (ND_rank(aghead(e)) - ND_rank(agtail(e)) < ED_minlen(e)))
		feasible = 0;
	}
	ND_tree_in(n).setPtr("list", zmalloc(sizeof(Agedge_s.class, i+1)));;
	ND_tree_in(n).setInt("size", 0);
	for (i = 0; (e = (Agedge_s) ND_out(n).getArrayOfPtr("list").plus(i).getPtr())!=null; i++);
	ND_tree_out(n).setPtr("list", zmalloc(sizeof(Agedge_s.class, i+1)));
	ND_tree_out(n).setInt("size", 0);
    }
    return feasible;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int init_graph(graph_t * g)
{
    int i, feasible;
    node_t *n;
    edge_t *e;
    G = g;
    N_nodes = N_edges = S_i = 0;
    for (n = GD_nlist(g); n; n = ND_next(n)) {
	ND_mark(n) = 0;
	N_nodes++;
	for (i = 0; (e = ND_out(n).list[i]); i++)
	    N_edges++;
    }
    Tree_node.list = ALLOC(N_nodes, Tree_node.list, node_t *);
    Tree_node.size = 0;
    Tree_edge.list = ALLOC(N_nodes, Tree_edge.list, edge_t *);
    Tree_edge.size = 0;
    feasible = NOT(0);
    for (n = GD_nlist(g); n; n = ND_next(n)) {
	ND_priority(n) = 0;
	for (i = 0; (e = ND_in(n).list[i]); i++) {
	    ND_priority(n)++;
	    ED_cutvalue(e) = 0;
	    ED_tree_index(e) = -1;
	    if (feasible
		&& (ND_rank(aghead(e)) - ND_rank(agtail(e)) < ED_minlen(e)))
		feasible = 0;
	}
	ND_tree_in(n).list = (edge_t **)zmalloc((i + 1)*sizeof(edge_t *));
	ND_tree_in(n).size = 0;
	for (i = 0; (e = ND_out(n).list[i]); i++);
	ND_tree_out(n).list = (edge_t **)zmalloc((i + 1)*sizeof(edge_t *));
	ND_tree_out(n).size = 0;
    }
    return feasible;
}

