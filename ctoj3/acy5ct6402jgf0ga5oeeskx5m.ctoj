public static void class1_(Agraph_s g) {
    Agnode_s n, t, h;
    Agedge_s e, rep;
    mark_clusters(g);
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n)) {
	for (e = agfstout(g, n); e!=null; e = agnxtout(g, e)) {
	    /* skip edges already processed */
	    if (ED_to_virt(e)!=null)
		continue;
	    /* skip edges that we want to ignore in this phase */
	    if (nonconstraint_edge(e))
		continue;
	    t = UF_find(agtail(e));
	    h = UF_find(aghead(e));
	    /* skip self, flat, and intra-cluster edges */
	    if (EQ(t, h))
		continue;
	    /* inter-cluster edges require special treatment */
	    if (ND_clust(t)!=null || ND_clust(h)!=null) {
		interclust1(g, agtail(e), aghead(e), e);
		continue;
	    }
	    if ((rep = find_fast_edge(t, h))!=null)
		merge_oneway(e, rep);
	    else
		virtual_edge(t, h, e);
	}
    }
}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void class1(graph_t * g)
{
    node_t *n, *t, *h;
    edge_t *e, *rep;
    mark_clusters(g);
    for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
	    /* skip edges already processed */
	    if (ED_to_virt(e))
		continue;
	    /* skip edges that we want to ignore in this phase */
	    if (nonconstraint_edge(e))
		continue;
	    t = UF_find(agtail(e));
	    h = UF_find(aghead(e));
	    /* skip self, flat, and intra-cluster edges */
	    if (t == h)
		continue;
	    /* inter-cluster edges require special treatment */
	    if (ND_clust(t) || ND_clust(h)) {
		interclust1(g, agtail(e), aghead(e), e);
		continue;
	    }
	    if ((rep = find_fast_edge(t, h)))
		merge_oneway(e, rep);
	    else
		virtual_edge(t, h, e);
	}
    }
}

