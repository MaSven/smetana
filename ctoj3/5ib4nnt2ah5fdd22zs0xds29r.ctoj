public static void make_slots(Agraph_s root, int r, int pos, int d) {
    int i;
    Agnode_s v;
    __ptr__ vlist;
    vlist = GD_rank(root).plus(r).getPtr().getArrayOfPtr("v").asPtr();
    if (d <= 0) {
UNSUPPORTED("4j1uy4i8jmj8ky4pnhqdp3hu"); // 	for (i = pos - d + 1; i < GD_rank(root)[r].n; i++) {
UNSUPPORTED("c2bblbvuyzu278hg73e0v9ias"); // 	    v = vlist[i];
UNSUPPORTED("8z4668r4wjhdszu5exo9uv4bx"); // 	    ND_order(v) = i + d - 1;
UNSUPPORTED("68gyj82gqshz5j6cagzfm6qow"); // 	    vlist[ND_order(v)] = v;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("1w3sxuwhqr49qyynhkxqh9m68"); // 	for (i = GD_rank(root)[r].n + d - 1; i < GD_rank(root)[r].n; i++)
UNSUPPORTED("9vbx5od7t2kzw09v2mfyihu61"); // 	    vlist[i] = NULL;
    } else {
/*assert(ND_rank(root)[r].n + d - 1 <= ND_rank(root)[r].an);*/
	for (i = GD_rank(root).plus(r).getPtr().getInt("n") - 1; i > pos; i--) {
	    v = (Agnode_s) vlist.plus(i).getPtr();
	    ND_order(v, i + d - 1);
	    vlist.plus(ND_order(v)).setPtr(v);
	}
	for (i = pos + 1; i < pos + d; i++)
	    vlist.plus(i).setPtr(null);
    }
    GD_rank(root).plus(r).getPtr().setInt("n", GD_rank(root).plus(r).getPtr().getInt("n") + d - 1);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void 
make_slots(graph_t * root, int r, int pos, int d)
{
    int i;
    node_t *v, **vlist;
    vlist = GD_rank(root)[r].v;
    if (d <= 0) {
	for (i = pos - d + 1; i < GD_rank(root)[r].n; i++) {
	    v = vlist[i];
	    ND_order(v) = i + d - 1;
	    vlist[ND_order(v)] = v;
	}
	for (i = GD_rank(root)[r].n + d - 1; i < GD_rank(root)[r].n; i++)
	    vlist[i] = NULL;
    } else {
/*assert(ND_rank(root)[r].n + d - 1 <= ND_rank(root)[r].an);*/
	for (i = GD_rank(root)[r].n - 1; i > pos; i--) {
	    v = vlist[i];
	    ND_order(v) = i + d - 1;
	    vlist[ND_order(v)] = v;
	}
	for (i = pos + 1; i < pos + d; i++)
	    vlist[i] = NULL;
    }
    GD_rank(root)[r].n += d - 1;
}

