public static void completeregularpath(path P, Agedge_s first, Agedge_s last, pathend_t tendp, pathend_t hendp, __array_of_struct__ boxes, int boxn, int flag) {
    Agedge_s uleft, uright, lleft, lright;
    int i, fb, lb;
    splines spl;
    pointf pp;
    int pn;
    fb = lb = -1;
    uleft = uright = null;
    uleft = top_bound(first, -1);
    uright = top_bound(first, 1);
    if (uleft!=null) {
	if (N(spl = getsplinepoints(uleft))) return;
	pp = (pointf) spl.getArrayOfPtr("list").plus(0).getPtr().getPtr("list");
       	pn = spl.getArrayOfPtr("list").plus(0).getPtr().getInt("size");
    }
    if (uright!=null) {
	if (N(spl = getsplinepoints(uright))) return;
	pp = (pointf) spl.getArrayOfPtr("list").plus(0).getPtr().getPtr("list");
       	pn = spl.getArrayOfPtr("list").plus(0).getPtr().getInt("size");
    }
    lleft = lright = null;
    lleft = bot_bound(last, -1);
    lright = bot_bound(last, 1);
    if (lleft!=null) {
	if (N(spl = getsplinepoints(lleft))) return;
	pp = (pointf) spl.getArrayOfPtr("list").plus(spl.getInt("size") - 1).getPtr().getPtr("list");
       	pn = spl.getArrayOfPtr("list").plus(spl.getInt("size") - 1).getPtr().getInt("size");
    }
    if (lright!=null) {
	if (N(spl = getsplinepoints(lright))) return;
	pp = (pointf) spl.getArrayOfPtr("list").plus(spl.getInt("size") - 1).getPtr().getPtr("list");
       	pn = spl.getArrayOfPtr("list").plus(spl.getInt("size") - 1).getPtr().getInt("size");
    }
    for (i = 0; i < tendp.getInt("boxn"); i++)
	add_box(P, tendp.getArrayOfStruct("boxes").plus(i).getStruct());
    fb = P.getInt("nbox") + 1;
    lb = fb + boxn - 3;
    for (i = 0; i < boxn; i++)
	add_box(P, boxes.plus(i).getStruct());
    for (i = hendp.getInt("boxn") - 1; i >= 0; i--)
	add_box(P, hendp.getArrayOfStruct("boxes").plus(i).getStruct());
    adjustregularpath(P, fb, lb);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void
completeregularpath(path * P, edge_t * first, edge_t * last,
		    pathend_t * tendp, pathend_t * hendp, boxf * boxes,
		    int boxn, int flag)
{
    edge_t *uleft, *uright, *lleft, *lright;
    int i, fb, lb;
    splines *spl;
    pointf *pp;
    int pn;
    fb = lb = -1;
    uleft = uright = NULL;
    uleft = top_bound(first, -1), uright = top_bound(first, 1);
    if (uleft) {
	if (!(spl = getsplinepoints(uleft))) return;
	pp = spl->list[0].list;
       	pn = spl->list[0].size;
    }
    if (uright) {
	if (!(spl = getsplinepoints(uright))) return;
	pp = spl->list[0].list;
       	pn = spl->list[0].size;
    }
    lleft = lright = NULL;
    lleft = bot_bound(last, -1), lright = bot_bound(last, 1);
    if (lleft) {
	if (!(spl = getsplinepoints(lleft))) return;
	pp = spl->list[spl->size - 1].list;
       	pn = spl->list[spl->size - 1].size;
    }
    if (lright) {
	if (!(spl = getsplinepoints(lright))) return;
	pp = spl->list[spl->size - 1].list;
       	pn = spl->list[spl->size - 1].size;
    }
    for (i = 0; i < tendp->boxn; i++)
	add_box(P, tendp->boxes[i]);
    fb = P->nbox + 1;
    lb = fb + boxn - 3;
    for (i = 0; i < boxn; i++)
	add_box(P, boxes[i]);
    for (i = hendp->boxn - 1; i >= 0; i--)
	add_box(P, hendp->boxes[i]);
    adjustregularpath(P, fb, lb);
}

