public static double arrow_length(Agedge_s e, int flag) {
    __ptr__ arrowtype;
    double lenfact = 0.0;
    int f, i;
    for (i = 0; i < 4; i++) {
        /* we don't simply index with flag because arrowtypes are not necessarily sorted */
        f = (flag >> (i * 8)) & ((1 << 4) - 1);
        for (arrowtype = Z._().Arrowtypes.asPtr(); arrowtype.getPtr("gen")!=null; arrowtype=arrowtype.plus(1)) {
	    if (f == arrowtype.getInt("type")) {
	        lenfact += arrowtype.getDouble("lenfact");
	        break;
	    }
        }
    }
    /* The original was missing the factor E_arrowsz, but I believe it
       should be here for correct arrow clipping */
    return 10. * lenfact * late_double(e, Z._().E_arrowsz, 1.0, 0.0);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
double arrow_length(edge_t * e, int flag)
{
    arrowtype_t *arrowtype;
    double lenfact = 0.0;
    int f, i;
    for (i = 0; i < 4; i++) {
        /* we don't simply index with flag because arrowtypes are not necessarily sorted */
        f = (flag >> (i * 8)) & ((1 << 4) - 1);
        for (arrowtype = Arrowtypes; arrowtype->gen; arrowtype++) {
	    if (f == arrowtype->type) {
	        lenfact += arrowtype->lenfact;
	        break;
	    }
        }
    }
    /* The original was missing the factor E_arrowsz, but I believe it
       should be here for correct arrow clipping */
    return 10. * lenfact * late_double(e, E_arrowsz, 1.0, 0.0);
}

