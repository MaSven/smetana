public static int flat_limits(Agraph_s g, Agedge_s e) {
    int lnode, rnode, r, pos;
    int[] lpos = new int[1], rpos = new int[1];
    int bounds[] = new int[4];
    __ptr__ rank;
    r = ND_rank(agtail(e)) - 1;
    rank = GD_rank(g).plus(r).getPtr("v");
    lnode = 0;
    rnode = GD_rank(g).plus(r).getInt("n") - 1;
    bounds[0] = bounds[2] = lnode - 1;
    bounds[1] = bounds[3] = rnode + 1;
    findlr(agtail(e), aghead(e), lpos, rpos);
    while (lnode <= rnode) {
	setbounds((Agnode_s)rank.plus(lnode).getPtr(), bounds, lpos, rpos);
	if (lnode != rnode)
	    setbounds((Agnode_s)rank.plus(rnode).getPtr(), bounds, lpos, rpos);
	lnode++;
	rnode--;
	if (bounds[1] - bounds[0] <= 1)
	    break;
    }
    if (bounds[0] <= bounds[1])
	pos = (bounds[0] + bounds[1] + 1) / 2;
    else
	pos = (bounds[2] + bounds[3] + 1) / 2;
    return pos;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int flat_limits(graph_t * g, edge_t * e)
{
    int lnode, rnode, r, bounds[4], lpos, rpos, pos;
    node_t **rank;
    r = ND_rank(agtail(e)) - 1;
    rank = GD_rank(g)[r].v;
    lnode = 0;
    rnode = GD_rank(g)[r].n - 1;
    bounds[0] = bounds[2] = lnode - 1;
    bounds[1] = bounds[3] = rnode + 1;
    findlr(agtail(e), aghead(e), &lpos, &rpos);
    while (lnode <= rnode) {
	setbounds(rank[lnode], bounds, lpos, rpos);
	if (lnode != rnode)
	    setbounds(rank[rnode], bounds, lpos, rpos);
	lnode++;
	rnode--;
	if (bounds[1] - bounds[0] <= 1)
	    break;
    }
    if (bounds[0] <= bounds[1])
	pos = (bounds[0] + bounds[1] + 1) / 2;
    else
	pos = (bounds[2] + bounds[3] + 1) / 2;
    return pos;
}

