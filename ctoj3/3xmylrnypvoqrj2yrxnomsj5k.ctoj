public static void makeSimpleFlatLabels(Agnode_s tn, Agnode_s hn, __ptr__ edges, int ind, int cnt, int et, int n_lbls) {
    pointf ps;
    final __struct__<Ppoly_t> poly = __struct__.from(Ppoly_t.class);
    int pn[] = new int[1];
	Agedge_s e = (Agedge_s) edges.plus(ind).getPtr();
    final __array_of_struct__ points = __array_of_struct__.malloc(pointf.class, 10);
    final __struct__<pointf> tp = __struct__.from(pointf.class), hp = __struct__.from(pointf.class);
    int i, pointn;
    double leftend, rightend, ctrx=0, ctry=0, miny, maxy;
    double uminx=0, umaxx=0;
    double lminx=0, lmaxx=0;
    __ptr__ earray = zmalloc(sizeof_starstar_empty(Agedge_s.class, cnt));
    for (i = 0; i < cnt; i++) {
	earray.plus(i).setPtr(edges.plus(ind + i).getPtr());
    }
    qsort(earray,
    cnt,
    sizeof(earray.plus(0)),
    function(dotsplines__c.class, "edgelblcmpfn"));
    tp.____(add_pointf(ND_coord(tn), ED_tail_port(e).getStruct("p")));
    hp.____(add_pointf(ND_coord(hn), ED_head_port(e).getStruct("p")));
    leftend = tp.getDouble("x")+ND_rw(tn);
    rightend = hp.getDouble("x")-ND_lw(hn);
    ctrx = (leftend + rightend)/2.0;
    /* do first edge */
    e = (Agedge_s) earray.plus(0).getPtr();
    pointn = 0;
    points.plus(pointn++).setStruct(tp);
    points.plus(pointn++).setStruct(tp);
    points.plus(pointn++).setStruct(hp);
    points.plus(pointn++).setStruct(hp);
    clip_and_install(e, aghead(e), points.asPtr(), pointn, Z._().sinfo.amp());
    ED_label(e).getStruct("pos").setDouble("x", ctrx);
    ED_label(e).getStruct("pos").setDouble("y", tp.getDouble("y") + (ED_label(e).getStruct("dimen").getDouble("y")+6)/2.0);
    ED_label(e).setBoolean("set", NOT(false));
    miny = tp.getDouble("y") + 6/2.0;
    maxy = miny + ED_label(e).getStruct("dimen").getDouble("y");
    uminx = ctrx - (ED_label(e).getStruct("dimen").getDouble("x"))/2.0;
    umaxx = ctrx + (ED_label(e).getStruct("dimen").getDouble("x"))/2.0;
    for (i = 1; i < n_lbls; i++) {
	e = (Agedge_s) earray.plus(i).getPtr();
	if (i%2!=0) {  /* down */
	    if (i == 1) {
		lminx = ctrx - (ED_label(e).getStruct("dimen").getDouble("x"))/2.0;
		lmaxx = ctrx + (ED_label(e).getStruct("dimen").getDouble("x"))/2.0;
		}
	    miny -= 6 + ED_label(e).getStruct("dimen").getDouble("y");
	    points.plus(0).setStruct(tp);
	    points.plus(1).setDouble("x", tp.getDouble("x"));
	    points.plus(1).setDouble("y", miny - 6);
	    points.plus(2).setDouble("x", hp.getDouble("x"));
	    points.plus(2).setDouble("y", points.plus(1).getDouble("y"));
	    points.plus(3).setStruct(hp);
	    points.plus(4).setDouble("x", lmaxx);
	    points.plus(4).setDouble("y", hp.getDouble("y"));
	    points.plus(5).setDouble("x", lmaxx);
	    points.plus(5).setDouble("y", miny);
	    points.plus(6).setDouble("x", lminx);
	    points.plus(6).setDouble("y", miny);
	    points.plus(7).setDouble("x", lminx);
	    points.plus(7).setDouble("y", tp.getDouble("y"));
	    ctry = miny + (ED_label(e).getStruct("dimen").getDouble("y"))/2.0;
	}
	else {   /* up */
UNSUPPORTED("7owdudualx55z2cnm9x3iio0w"); // 	    points[0] = tp;
UNSUPPORTED("43w0zont6q3y1axlcy96rzm5x"); // 	    points[1].x = uminx;
UNSUPPORTED("285u4l65puy5nr3pgq6acl4i2"); // 	    points[1].y = tp.y;
UNSUPPORTED("uctdrwzmec4w6vmirs9on197"); // 	    points[2].x = uminx;
UNSUPPORTED("d9b8e2upja8koam9memys7nj1"); // 	    points[2].y = maxy;
UNSUPPORTED("e8a8ucdpq7sgmbi3qyldleb1s"); // 	    points[3].x = umaxx;
UNSUPPORTED("d7xd9vzbdbezltrxsp9a3byuc"); // 	    points[3].y = maxy;
UNSUPPORTED("59abeyxxk9ow1g6m45t4ahih7"); // 	    points[4].x = umaxx;
UNSUPPORTED("2lzgl5468xguophz9d5wyer2x"); // 	    points[4].y = hp.y;
UNSUPPORTED("41u0uroraw4xanvpgg6l74kyh"); // 	    points[5].x = hp.x;
UNSUPPORTED("cwkk5bnko3e1udrx4cb720zss"); // 	    points[5].y = hp.y;
UNSUPPORTED("eev7hf3617k74bnq18uiedyb0"); // 	    points[6].x = hp.x;
UNSUPPORTED("aqxt1dvgfq5zcptjwgx1b3mmq"); // 	    points[6].y = maxy + 6;
UNSUPPORTED("5s3o04yf5lzca6ruuygfxngj2"); // 	    points[7].x = tp.x;
UNSUPPORTED("56zheeat0b8mo4uvlcbvgbu80"); // 	    points[7].y = maxy + 6;
UNSUPPORTED("ehcig8trxc4ble6pcochubv7z"); // 	    ctry =  maxy + (ED_label(e)->dimen.y)/2.0 + 6;
UNSUPPORTED("e2zgxycgqefryde9nbv6cqz1u"); // 	    maxy += ED_label(e)->dimen.y + 6;
	}
	poly.setInt("pn", 8);
	poly.setPtr("ps", points.asPtr());
	ps = simpleSplineRoute (tp, hp, poly, pn, et == (3 << 1));
	if (pn[0] == 0) return;
	ED_label(e).getStruct("pos").setDouble("x", ctrx);
	ED_label(e).getStruct("pos").setDouble("y", ctry);
	ED_label(e).setBoolean("set", NOT(false));
	clip_and_install(e, aghead(e), ps, pn[0], Z._().sinfo.amp());
    }
    /* edges with no labels */
    for (; i < cnt; i++) {
	e = (Agedge_s) earray.plus(i).getPtr();
	if (i%2!=0) {  /* down */
	    if (i == 1) {
		lminx = (2*leftend + rightend)/3.0;
		lmaxx = (leftend + 2*rightend)/3.0;
	    }
	    miny -= 6;
	    points.plus(0).setStruct(tp);
	    points.plus(1).setDouble("x", tp.getDouble("x"));
	    points.plus(1).setDouble("y", miny - 6);
	    points.plus(2).setDouble("x", hp.getDouble("x"));
	    points.plus(2).setDouble("y", points.plus(1).getDouble("y"));
	    points.plus(3).setStruct(hp);
	    points.plus(4).setDouble("x", lmaxx);
	    points.plus(4).setDouble("y", hp.getDouble("y"));
	    points.plus(5).setDouble("x", lmaxx);
	    points.plus(5).setDouble("y", miny);
	    points.plus(6).setDouble("x", lminx);
	    points.plus(6).setDouble("y", miny);
	    points.plus(7).setDouble("x", lminx);
	    points.plus(7).setDouble("y", tp.getDouble("y"));
	}
	else {   /* up */
UNSUPPORTED("7owdudualx55z2cnm9x3iio0w"); // 	    points[0] = tp;
UNSUPPORTED("43w0zont6q3y1axlcy96rzm5x"); // 	    points[1].x = uminx;
UNSUPPORTED("285u4l65puy5nr3pgq6acl4i2"); // 	    points[1].y = tp.y;
UNSUPPORTED("uctdrwzmec4w6vmirs9on197"); // 	    points[2].x = uminx;
UNSUPPORTED("d9b8e2upja8koam9memys7nj1"); // 	    points[2].y = maxy;
UNSUPPORTED("e8a8ucdpq7sgmbi3qyldleb1s"); // 	    points[3].x = umaxx;
UNSUPPORTED("d7xd9vzbdbezltrxsp9a3byuc"); // 	    points[3].y = maxy;
UNSUPPORTED("59abeyxxk9ow1g6m45t4ahih7"); // 	    points[4].x = umaxx;
UNSUPPORTED("2lzgl5468xguophz9d5wyer2x"); // 	    points[4].y = hp.y;
UNSUPPORTED("41u0uroraw4xanvpgg6l74kyh"); // 	    points[5].x = hp.x;
UNSUPPORTED("cwkk5bnko3e1udrx4cb720zss"); // 	    points[5].y = hp.y;
UNSUPPORTED("eev7hf3617k74bnq18uiedyb0"); // 	    points[6].x = hp.x;
UNSUPPORTED("aqxt1dvgfq5zcptjwgx1b3mmq"); // 	    points[6].y = maxy + 6;
UNSUPPORTED("5s3o04yf5lzca6ruuygfxngj2"); // 	    points[7].x = tp.x;
UNSUPPORTED("56zheeat0b8mo4uvlcbvgbu80"); // 	    points[7].y = maxy + 6;
UNSUPPORTED("7un2qk34mmmhqi296vl50bacs"); // 	    maxy += + 6;
	}
	poly.setInt("pn", 8);
	poly.setPtr("ps", points.asPtr());
	ps = simpleSplineRoute (tp, hp, poly, pn, et == (3 << 1));
	if (pn[0] == 0) return;
	clip_and_install(e, aghead(e), ps, pn[0], Z._().sinfo.amp());
    }
    Memory.free (earray);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void
makeSimpleFlatLabels (node_t* tn, node_t* hn, edge_t** edges, int ind, int cnt, int et, int n_lbls)
{
    pointf *ps;
    Ppoly_t poly;
    int pn;
    edge_t* e = edges[ind];
    pointf points[10], tp, hp;
    int i, pointn;
    double leftend, rightend, ctrx, ctry, miny, maxy;
    double uminx, umaxx;
    double lminx, lmaxx;
    edge_t** earray = (edge_t**)zmalloc((cnt)*sizeof(edge_t*));
    for (i = 0; i < cnt; i++) {
	earray[i] = edges[ind + i];
    }
    qsort (earray, cnt, sizeof(edge_t*), (qsort_cmpf) edgelblcmpfn);
    tp = add_pointf(ND_coord(tn), ED_tail_port(e).p);
    hp = add_pointf(ND_coord(hn), ED_head_port(e).p);
    leftend = tp.x+ND_rw(tn);
    rightend = hp.x-ND_lw(hn);
    ctrx = (leftend + rightend)/2.0;
    /* do first edge */
    e = earray[0];
    pointn = 0;
    points[pointn++] = tp;
    points[pointn++] = tp;
    points[pointn++] = hp;
    points[pointn++] = hp;
    clip_and_install(e, aghead(e), points, pointn, &sinfo);
    ED_label(e)->pos.x = ctrx;
    ED_label(e)->pos.y = tp.y + (ED_label(e)->dimen.y+6)/2.0;
    ED_label(e)->set = NOT(0);
    miny = tp.y + 6/2.0;
    maxy = miny + ED_label(e)->dimen.y;
    uminx = ctrx - (ED_label(e)->dimen.x)/2.0;
    umaxx = ctrx + (ED_label(e)->dimen.x)/2.0;
    for (i = 1; i < n_lbls; i++) {
	e = earray[i];
	if (i%2) {  /* down */
	    if (i == 1) {
		lminx = ctrx - (ED_label(e)->dimen.x)/2.0;
		lmaxx = ctrx + (ED_label(e)->dimen.x)/2.0;
	    }
	    miny -= 6 + ED_label(e)->dimen.y;
	    points[0] = tp;
	    points[1].x = tp.x;
	    points[1].y = miny - 6;
	    points[2].x = hp.x;
	    points[2].y = points[1].y;
	    points[3] = hp;
	    points[4].x = lmaxx;
	    points[4].y = hp.y;
	    points[5].x = lmaxx;
	    points[5].y = miny;
	    points[6].x = lminx;
	    points[6].y = miny;
	    points[7].x = lminx;
	    points[7].y = tp.y;
	    ctry = miny + (ED_label(e)->dimen.y)/2.0;
	}
	else {   /* up */
	    points[0] = tp;
	    points[1].x = uminx;
	    points[1].y = tp.y;
	    points[2].x = uminx;
	    points[2].y = maxy;
	    points[3].x = umaxx;
	    points[3].y = maxy;
	    points[4].x = umaxx;
	    points[4].y = hp.y;
	    points[5].x = hp.x;
	    points[5].y = hp.y;
	    points[6].x = hp.x;
	    points[6].y = maxy + 6;
	    points[7].x = tp.x;
	    points[7].y = maxy + 6;
	    ctry =  maxy + (ED_label(e)->dimen.y)/2.0 + 6;
	    maxy += ED_label(e)->dimen.y + 6;
	}
	poly.pn = 8;
	poly.ps = (Ppoint_t*)points;
	ps = simpleSplineRoute (tp, hp, poly, &pn, et == (3 << 1));
	if (pn == 0) return;
	ED_label(e)->pos.x = ctrx;
	ED_label(e)->pos.y = ctry;
	ED_label(e)->set = NOT(0);
	clip_and_install(e, aghead(e), ps, pn, &sinfo);
    }
    /* edges with no labels */
    for (; i < cnt; i++) {
	e = earray[i];
	if (i%2) {  /* down */
	    if (i == 1) {
		lminx = (2*leftend + rightend)/3.0;
		lmaxx = (leftend + 2*rightend)/3.0;
	    }
	    miny -= 6;
	    points[0] = tp;
	    points[1].x = tp.x;
	    points[1].y = miny - 6;
	    points[2].x = hp.x;
	    points[2].y = points[1].y;
	    points[3] = hp;
	    points[4].x = lmaxx;
	    points[4].y = hp.y;
	    points[5].x = lmaxx;
	    points[5].y = miny;
	    points[6].x = lminx;
	    points[6].y = miny;
	    points[7].x = lminx;
	    points[7].y = tp.y;
	}
	else {   /* up */
	    points[0] = tp;
	    points[1].x = uminx;
	    points[1].y = tp.y;
	    points[2].x = uminx;
	    points[2].y = maxy;
	    points[3].x = umaxx;
	    points[3].y = maxy;
	    points[4].x = umaxx;
	    points[4].y = hp.y;
	    points[5].x = hp.x;
	    points[5].y = hp.y;
	    points[6].x = hp.x;
	    points[6].y = maxy + 6;
	    points[7].x = tp.x;
	    points[7].y = maxy + 6;
	    maxy += + 6;
	}
	poly.pn = 8;
	poly.ps = (Ppoint_t*)points;
	ps = simpleSplineRoute (tp, hp, poly, &pn, et == (3 << 1));
	if (pn == 0) return;
	clip_and_install(e, aghead(e), ps, pn, &sinfo);
    }
    free (earray);
}

