public static void TB_balance() {
    Agnode_s n;
    Agedge_s e;
    int i, low, high, choice;
    __ptr__ nrank;
    int inweight, outweight;
    scan_and_normalize();
    /* find nodes that are not tight and move to less populated ranks */
    nrank = zmalloc(size_t_array_of_integer(Maxrank + 1));
    for (i = 0; i <= Maxrank; i++)
	nrank.setBracketAsInt(i, 0);
    for (n = (Agnode_s) G.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
	; n!=null;
	n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next"))
	if (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("node_type") == 0)
		nrank.setBracketAsInt(
		  n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank"),
		  1+nrank.getBracketAsInt(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")));
    for (n = (Agnode_s) G.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
	; n!=null;
	n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next")) {
	if (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("node_type") != 0)
	    continue;
	inweight = outweight = 0;
	low = 0;
	high = Maxrank;
	for (i = 0;
	(e = (Agedge_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("in").getArrayOfPtr("list", i))!=null
	; i++) {
	    inweight += e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getInt("weight");
	    low = 
		low>
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node").castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
		+ e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getInt("minlen")
		?
		low
		:
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node").castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
		+ e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getInt("minlen")
		;
	}
	for (i = 0;
	(e = (Agedge_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("out").getArrayOfPtr("list", i))!=null
	; i++) {
	    outweight += e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getInt("weight");
	    high = 
		high<
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node").castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
		- e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getInt("minlen")
		?
		low
		:
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node").castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
		- e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getInt("minlen")
		;
	}
	if (low < 0)
	    low = 0;		/* vnodes can have ranks < 0 */
	if (inweight == outweight) {
UNSUPPORTED("4hirw9ql1hxnp6jtk3408tlf4"); // 	    choice = low;
UNSUPPORTED("4fmk1766aj4p34irbtmnaqhwz"); // 	    for (i = low + 1; i <= high; i++)
UNSUPPORTED("4rwlbkm8u19aqvof2crj6t71e"); // 		if (nrank[i] < nrank[choice])
UNSUPPORTED("cy21ybi6srr5dfmc2cx29ik3a"); // 		    choice = i;
UNSUPPORTED("9d5gwoxx4ylqfcrcif8qve8dw"); // 	    nrank[(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->rank)]--;
UNSUPPORTED("9a9fwpw43xm4p8u5fq7nje4kr"); // 	    nrank[choice]++;
UNSUPPORTED("67w1szm0y3qom9x3uk9sm4y5q"); // 	    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->rank) = choice;
	}
	do {
	if (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_in").getPtr("list")!=null)
	  Memory.free(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_in").getPtr("list"));
	} while (false);
	do {
	if (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_out").getPtr("list")!=null)
	  Memory.free(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_out").getPtr("list"));
	} while (false);
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("mark", 0);
    }
    Memory.free(nrank);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void TB_balance(void)
{
    node_t *n;
    edge_t *e;
    int i, low, high, choice, *nrank;
    int inweight, outweight;
    scan_and_normalize();
    /* find nodes that are not tight and move to less populated ranks */
    nrank = (int*)zmalloc((Maxrank + 1)*sizeof(int));
    for (i = 0; i <= Maxrank; i++)
	nrank[i] = 0;
    for (n = (((Agraphinfo_t*)(((Agobj_t*)(G))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next))
	if ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->node_type) == 0)
	    nrank[(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->rank)]++;
    for (n = (((Agraphinfo_t*)(((Agobj_t*)(G))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next)) {
	if ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->node_type) != 0)
	    continue;
	inweight = outweight = 0;
	low = 0;
	high = Maxrank;
	for (i = 0; (e = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->in).list[i]); i++) {
	    inweight += (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight);
	    low = ((low)>((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank) + (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen))?(low):((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank) + (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen)));
	}
	for (i = 0; (e = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->out).list[i]); i++) {
	    outweight += (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight);
	    high = ((high)<((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank) - (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen))?(high):((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank) - (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen)));
	}
	if (low < 0)
	    low = 0;		/* vnodes can have ranks < 0 */
	if (inweight == outweight) {
	    choice = low;
	    for (i = low + 1; i <= high; i++)
		if (nrank[i] < nrank[choice])
		    choice = i;
	    nrank[(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->rank)]--;
	    nrank[choice]++;
	    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->rank) = choice;
	}
	do {if ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_in).list) free((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_in).list);} while (0);
	do {if ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_out).list) free((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_out).list);} while (0);
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->mark) = 0;
    }
    free(nrank);
}

