public static Agedge_s newedge(Agraph_s g, Agnode_s t, Agnode_s h, int id) {
    Agedgepair_s e2;
    Agedge_s in, out;
    int seq;
    agsubnode(g,t,(N(0)));
    agsubnode(g,h,(N(0)));
    e2 = (Agedgepair_s) agalloc(g, sizeof(Agedgepair_s.class));
    in = (Agedge_s) e2.getPtr("in");
    out = (Agedge_s) e2.getPtr("out");
    seq = agnextseq(g, 2);
    in.castTo(Agobj_s.class).getPtr("tag").setInt("objtype", 3);
    out.castTo(Agobj_s.class).getPtr("tag").setInt("objtype", 2);
    out.castTo(Agobj_s.class).getPtr("tag").setInt("id", id);
    in.castTo(Agobj_s.class).getPtr("tag").setInt("id", id);
    out.castTo(Agobj_s.class).getPtr("tag").setInt("seq", seq);
    in.castTo(Agobj_s.class).getPtr("tag").setInt("seq", seq);
    in.setPtr("node", t);
    out.setPtr("node", h);
    installedge(g, out);
    if (g.getPtr("desc").getBoolean("has_attrs")) {
	  agbindrec(out, AgDataRecName, sizeof(Agattr_s.class), false);
	  agedgeattr_init(g, out);
    }
    agmethod_init(g, out);
    return out;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static Agedge_t *newedge(Agraph_t * g, Agnode_t * t, Agnode_t * h,
			 unsigned long id)
{
    Agedgepair_t *e2;
    Agedge_t *in, *out;
    int seq;
    (void)agsubnode(g,t,(!(0)));
    (void)agsubnode(g,h,(!(0)));
    e2 = (Agedgepair_t *) agalloc(g, sizeof(Agedgepair_t));
    in = &(e2->in);
    out = &(e2->out);
    seq = agnextseq(g, 2);
    ((((Agobj_t*)(in))->tag).objtype) = 3;
    ((((Agobj_t*)(out))->tag).objtype) = 2;
    ((((Agobj_t*)(in))->tag).id) = ((((Agobj_t*)(out))->tag).id) = id;
    ((((Agobj_t*)(in))->tag).seq) = ((((Agobj_t*)(out))->tag).seq) = seq;
    in->node = t;
    out->node = h;
    installedge(g, out);
    if (g->desc.has_attrs) {
	(void) agbindrec(out, AgDataRecName, sizeof(Agattr_t), (0));
	agedgeattr_init(g, out);
    }
    agmethod_init(g, out);
    return out;
}

