public static Agedge_s agedge(Agraph_s g, Agnode_s t, Agnode_s h, CString name, boolean cflag) {
    Agedge_s e;
    int id[] = new int[1];
    int have_id;
    have_id = agmapnametoid(g, AGEDGE, name, id, false);
    if (have_id!=0 || ((name == null) && ((NOT(cflag)) || agisstrict(g)))) {
	/* probe for pre-existing edge */
	final __struct__<Agtag_s> key = __struct__.from(Agtag_s.class);
	key.____(Z._().Tag);
	if (have_id!=0) {
	    key.setInt("id", id[0]);
	    key.setInt("objtype", AGEDGE);
	} else {
	    key.setInt("id", 0);
	    key.setInt("objtype", 0);
	}
	/* might already exist locally */
	e = agfindedge_by_key(g, t, h, key);
	if ((e == null && agisundirected(g)))
	    e = agfindedge_by_key(g, h, t, key);
	if (e!=null)
	    return e;
	if (cflag) {
	    e = agfindedge_by_key(agroot(g), t, h, key);
	    if ((e == null) && agisundirected(g))
		e = agfindedge_by_key(agroot(g), h, t, key);
	    if (e!=null) {
		subedge(g,e);
		return e;
	    }
 	}
    }
    if (cflag && ok_to_make_edge(g, t, h)
	&& (agmapnametoid(g, AGEDGE, name, id, (N(0))))!=0) { /* reserve id */
	e = newedge(g, t, h, id[0]);
	agregister(g, AGEDGE, e); /* register new object in external namespace */
    }
    else
	e = null;
    return e;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Agedge_t *agedge(Agraph_t * g, Agnode_t * t, Agnode_t * h, char *name,
		 int cflag)
{
    Agedge_t *e;
    unsigned long id;
    int have_id;
    have_id = agmapnametoid(g, AGEDGE, name, &id, (0));
    if (have_id || ((name == ((char*)0)) && (NOT(cflag) || agisstrict(g)))) {
	/* probe for pre-existing edge */
	Agtag_t key;
	key = Tag;
	if (have_id) {
	    key.id = id;
	    key.objtype = AGEDGE;
	} else {
	    key.id = key.objtype = 0;
	}
	/* might already exist locally */
	e = agfindedge_by_key(g, t, h, key);
	if ((e == ((Agedge_t*)0)) && agisundirected(g))
	    e = agfindedge_by_key(g, h, t, key);
	if (e)
	    return e;
	if (cflag) {
	    e = agfindedge_by_key(agroot(g), t, h, key);
	    if ((e == ((Agedge_t*)0)) && agisundirected(g))
		e = agfindedge_by_key(agroot(g), h, t, key);
	    if (e) {
		subedge(g,e);
		return e;
	    }
	}
    }
    if (cflag && ok_to_make_edge(g, t, h)
	&& agmapnametoid(g, AGEDGE, name, &id, (!(0)))) { /* reserve id */
	e = newedge(g, t, h, id);
	agregister(g, AGEDGE, e); /* register new object in external namespace */
    }
    else
	e = ((Agedge_t*)0);
    return e;
}

