public static Agedge_s make_aux_edge(Agnode_s u, Agnode_s v, double len, int wt) {
    Agedge_s e;
    Agedgepair_s e2 = (Agedgepair_s) zmalloc(sizeof(Agedgepair_s.class));
    AGTYPE(e2.getStruct("in").amp(), AGINEDGE);
    AGTYPE(e2.getStruct("out").amp(), AGOUTEDGE);
    e2.getStruct("out").getStruct("base").setPtr("data", zmalloc(sizeof(Agedgeinfo_t.class)));
    e = (Agedge_s) e2.getStruct("out").amp();
    agtail(e, u);
    aghead(e, v);
    if (len > USHRT_MAX)
	len = largeMinlen (len);
    ED_minlen(e, ROUND(len));
    ED_weight(e, wt);
    fast_edge(e);
    return e;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
edge_t *make_aux_edge(node_t * u, node_t * v, double len, int wt)
{
    edge_t *e;
    Agedgepair_t* e2 = (Agedgepair_t*)zmalloc(sizeof(Agedgepair_t));
    AGTYPE(&(e2->in)) = AGINEDGE;
    AGTYPE(&(e2->out)) = AGOUTEDGE;
    e2->out.base.data = (Agrec_t*)(Agedgeinfo_t*)zmalloc(sizeof(Agedgeinfo_t));
    e = &(e2->out);
    agtail(e) = u;
    aghead(e) = v;
    if (len > USHRT_MAX)
	len = largeMinlen (len);
    ED_minlen(e) = ROUND(len);
    ED_weight(e) = wt;
    fast_edge(e);
    return e;
}

