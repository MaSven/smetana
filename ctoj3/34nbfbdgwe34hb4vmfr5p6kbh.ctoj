public static _dt_s dtopen(_dtdisc_s disc, _dtmethod_s meth) {
	_dt_s		dt = null;
	int		e;
	_dtdata_s	data;
	if(N(disc) || N(meth))
		return null;
	/* allocate space for dictionary */
	if(N(dt = (_dt_s) Memory.malloc(_dt_s.class)))
		return null;
//	/* initialize all absolutely private data */
	dt.setPtr("searchf", null);
	dt.setPtr("meth", null);
	dt.setPtr("disc", null);
	dtdisc(dt,disc,0);
	dt.setInt("type", 0);
	dt.setInt("nview", 0);
	dt.setPtr("view", null);
	dt.setPtr("walk", null);
	dt.setPtr("user", null);
	if(disc.getPtr("eventf")!=null)
	{	/* if shared/persistent dictionary, get existing data */
		throw new UnsupportedOperationException();
//		data = ((Dtdata_t*)0);
//		if((e = (*disc->eventf)(dt,1,(void*)(&data),disc)) < 0)
//			goto err_open;
//		else if(e > 0)
//		{	if(data)
//			{	if(data->type&meth->type)
//					goto done;
//				else	goto err_open;
//			}
//			if(!disc->memoryf)
//				goto err_open;
//			free((void*)dt);
//			if(!(dt = (*disc->memoryf)(0, 0, sizeof(Dt_t), disc)) )
//				return ((Dt_t*)0);
//			dt->searchf = ((Dtsearch_f)0);
//			dt->meth = ((Dtmethod_t*)0);
//			dt->disc = ((Dtdisc_t*)0);
//			dtdisc(dt,disc,0);
//			dt->type = 1;
//			dt->nview = 0;
//			dt->view = dt->walk = ((Dt_t*)0);
//		}
	}
	/* allocate sharable data */
	if(N(data = (_dtdata_s) (dt.call("memoryf", dt,null,sizeof(_dtdata_s.class),disc)) ))
	{ err_open:
		Memory.free(dt);
		return (null);
	}
	data.setInt("type", meth.getInt("type"));
	data.setPtr("here", null);
	data.setPtr("hh._htab", null);
	data.setInt("ntab", 0);
	data.setInt("size", 0);
	data.setInt("loop", 0);
	data.setInt("minp", 0);
//done:
	dt.setPtr("data", data);
	dt.setPtr("searchf", meth.getPtr("searchf"));
	dt.setPtr("meth", meth);
	if(disc.getPtr("eventf")!=null)
		throw new UnsupportedOperationException();
//		(*disc->eventf)(dt, 5, (void*)dt, disc);
	return dt;
}


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Dt_t* dtopen(Dtdisc_t* disc, Dtmethod_t* meth)
{
	Dt_t*		dt = (Dt_t*)Version;	/* shut-up unuse warning */
	register int		e;
	Dtdata_t*	data;
	if(!disc || !meth)
		return ((Dt_t*)0);
	/* allocate space for dictionary */
	if(!(dt = (Dt_t*) malloc(sizeof(Dt_t))))
		return ((Dt_t*)0);
	/* initialize all absolutely private data */
	dt->searchf = ((Dtsearch_f)0);
	dt->meth = ((Dtmethod_t*)0);
	dt->disc = ((Dtdisc_t*)0);
	dtdisc(dt,disc,0);
	dt->type = 0;
	dt->nview = 0;
	dt->view = dt->walk = ((Dt_t*)0);
	dt->user = ((void*)0);
	if(disc->eventf)
	{	/* if shared/persistent dictionary, get existing data */
		data = ((Dtdata_t*)0);
		if((e = (*disc->eventf)(dt,1,(void*)(&data),disc)) < 0)
			goto err_open;
		else if(e > 0)
		{	if(data)
			{	if(data->type&meth->type)
					goto done;
				else	goto err_open;
			}
			if(!disc->memoryf)
				goto err_open;
			free((void*)dt);
			if(!(dt = (*disc->memoryf)(0, 0, sizeof(Dt_t), disc)) )
				return ((Dt_t*)0);
			dt->searchf = ((Dtsearch_f)0);
			dt->meth = ((Dtmethod_t*)0);
			dt->disc = ((Dtdisc_t*)0);
			dtdisc(dt,disc,0);
			dt->type = 1;
			dt->nview = 0;
			dt->view = dt->walk = ((Dt_t*)0);
		}
	}
	/* allocate sharable data */
	if(!(data = (Dtdata_t*)(dt->memoryf)(dt,((void*)0),sizeof(Dtdata_t),disc)) )
	{ err_open:
		free((void*)dt);
		return ((Dt_t*)0);
	}
	data->type = meth->type;
	data->here = ((Dtlink_t*)0);
	data->hh._htab = ((Dtlink_t**)0);
	data->ntab = data->size = data->loop = 0;
	data->minp = 0;
done:
	dt->data = data;
	dt->searchf = meth->searchf;
	dt->meth = meth;
	if(disc->eventf)
		(*disc->eventf)(dt, 5, (void*)dt, disc);
	return dt;
}

