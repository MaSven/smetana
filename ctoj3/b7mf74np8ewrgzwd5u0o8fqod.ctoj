public static int out_cross(Agnode_s v, Agnode_s w) {
    __array_of_ptr__ e1, e2;
    int inv, cross = 0, t;
    for (e2 = ND_out(w).getArrayOfPtr("list"); e2.getPtr()!=null; e2=e2.plus(1)) {
	int cnt = ED_xpenalty((Agedge_s)e2.getPtr());
	inv = ND_order(aghead(e2.getPtr()));
	for (e1 = ND_out(v).getArrayOfPtr("list"); e1.getPtr()!=null; e1=e1.plus(1)) {
	    t = ND_order(aghead(e1.getPtr())) - inv;
	    if ((t > 0)
		|| ((t == 0)
		    && ((ED_head_port(e1.getPtr())).getStruct("p").getDouble("x") > (ED_head_port(e2.getPtr())).getStruct("p").getDouble("x"))))
		cross += ((ED_xpenalty(e1.getPtr())) * cnt);
	}
    }
    return cross;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int out_cross(node_t * v, node_t * w)
{
    register edge_t **e1, **e2;
    register int inv, cross = 0, t;
    for (e2 = ND_out(w).list; *e2; e2++) {
	register int cnt = ED_xpenalty(*e2);
	inv = ND_order(aghead(*e2));
	for (e1 = ND_out(v).list; *e1; e1++) {
	    t = ND_order(aghead(*e1)) - inv;
	    if ((t > 0)
		|| ((t == 0)
		    && ((ED_head_port(*e1)).p.x > (ED_head_port(*e2)).p.x)))
		cross += ((ED_xpenalty(*e1)) * cnt);
	}
    }
    return cross;
}

