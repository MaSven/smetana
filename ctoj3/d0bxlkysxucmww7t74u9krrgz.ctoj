public static void class2(Agraph_s g) {
    int c;
    Agnode_s n, t, h;
    Agedge_s e, prev, opp;
    GD_nlist(g, null);
    GD_n_nodes(g, 0);		/* new */
    mark_clusters(g);
    for (c = 1; c <= GD_n_cluster(g); c++)
	build_skeleton(g, (Agraph_s) GD_clust(g).plus(c).getPtr());
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n))
	for (e = agfstout(g, n); e!=null; e = agnxtout(g, e)) {
	    if (ND_weight_class(aghead(e)) <= 2)
		ND_weight_class(aghead(e), ND_weight_class(aghead(e))+1);
	    if (ND_weight_class(agtail(e)) <= 2)
		ND_weight_class(agtail(e), ND_weight_class(agtail(e))+1);
	}
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n)) {
	if ((ND_clust(n) == null) && (EQ(n, UF_find(n)))) {
	    fast_node(g, n);
	    GD_n_nodes(g, GD_n_nodes(g)+1);
	}
	prev = null;
	for (e = agfstout(g, n); e!=null; e = agnxtout(g, e)) {
	    /* already processed */
	    if (ED_to_virt(e)!=null) {
		prev = e;
		continue;
	    }
	    /* edges involving sub-clusters of g */
	    if (is_cluster_edge(e)) {
		/* following is new cluster multi-edge code */
		if (mergeable(prev, e)) {
		    if (ED_to_virt(prev)!=null) {
			merge_chain(g, e, ED_to_virt(prev), false);
			other_edge(e);
		    } else if (ND_rank(agtail(e)) == ND_rank(aghead(e))) {
			merge_oneway(e, prev);
			other_edge(e);
		    }
		    /* else is an intra-cluster edge */
		    continue;
		}
		interclrep(g, e);
		prev = e;
		continue;
	    }
	    /* merge multi-edges */
	    if (prev!=null && EQ(agtail(e), agtail(prev)) && EQ(aghead(e), aghead(prev))) {
		if (ND_rank(agtail(e)) == ND_rank(aghead(e))) {
		    merge_oneway(e, prev);
		    other_edge(e);
		    continue;
		}
		if ((ED_label(e) == null) && (ED_label(prev) == null)
		    && ports_eq(e, prev)) {
		    if (Z._().Concentrate)
			ED_edge_type(e, 6);
		    else {
			merge_chain(g, e, ED_to_virt(prev), NOT(false));
			other_edge(e);
		    }
		    continue;
		}
		/* parallel edges with different labels fall through here */
	    }
	    /* self edges */
	    if (EQ(agtail(e), aghead(e))) {
		other_edge(e);
		prev = e;
		continue;
	    }
	    t = UF_find(agtail(e));
	    h = UF_find(aghead(e));
	    /* non-leader leaf nodes */
	    if (NEQ(agtail(e), t) || NEQ(aghead(e), h)) {
		/* FIX need to merge stuff */
		continue;
	    }
	    /* flat edges */
	    if (ND_rank(agtail(e)) == ND_rank(aghead(e))) {
		flat_edge(g, e);
		prev = e;
		continue;
	    }
	    /* forward edges */
	    if (ND_rank(aghead(e)) > ND_rank(agtail(e))) {
		make_chain(g, agtail(e), aghead(e), e);
		prev = e;
		continue;
	    }
	    /* backward edges */
	    else {
		/*other_edge(e); */
		/* avoid when opp==e in undirected graph */
		if ((opp = (agedge(g,aghead(e),agtail(e),null,false)))!=null && NEQ(aghead(opp), aghead(e))) {
		    /* shadows a forward edge */
		    if (ED_to_virt(opp) == null)
			make_chain(g, agtail(opp), aghead(opp), opp);
		    if ((ED_label(e) == null) && (ED_label(opp) == null)
			&& ports_eq(e, opp)) {
			if (Z._().Concentrate) {
			    ED_edge_type(e, 6);
			    ED_conc_opp_flag(opp, NOT(false));
			} else {	/* see above.  this is getting out of hand */
			    other_edge(e);
			    merge_chain(g, e, ED_to_virt(opp), NOT(false));
			}
			continue;
		    }
		}
		make_chain(g, aghead(e), agtail(e), e);
		prev = e;
	    }
	}
    }
    /* since decompose() is not called on subgraphs */
    if (NEQ(g, dot_root(g))) {
	GD_comp(g).setPtr("list", ALLOC_empty(1, GD_comp(g).getPtr("list"), Agnode_s.class));
	GD_comp(g).getArrayOfPtr("list").plus(0).setPtr(GD_nlist(g));
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void class2(graph_t * g)
{
    int c;
    node_t *n, *t, *h;
    edge_t *e, *prev, *opp;
    GD_nlist(g) = NULL;
    GD_n_nodes(g) = 0;		/* new */
    mark_clusters(g);
    for (c = 1; c <= GD_n_cluster(g); c++)
	build_skeleton(g, GD_clust(g)[c]);
    for (n = agfstnode(g); n; n = agnxtnode(g, n))
	for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
	    if (ND_weight_class(aghead(e)) <= 2)
		ND_weight_class(aghead(e))++;
	    if (ND_weight_class(agtail(e)) <= 2)
		ND_weight_class(agtail(e))++;
	}
    for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	if ((ND_clust(n) == NULL) && (n == UF_find(n))) {
	    fast_node(g, n);
	    GD_n_nodes(g)++;
	}
	prev = NULL;
	for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
	    /* already processed */
	    if (ED_to_virt(e)) {
		prev = e;
		continue;
	    }
	    /* edges involving sub-clusters of g */
	    if (is_cluster_edge(e)) {
		/* following is new cluster multi-edge code */
		if (mergeable(prev, e)) {
		    if (ED_to_virt(prev)) {
			merge_chain(g, e, ED_to_virt(prev), 0);
			other_edge(e);
		    } else if (ND_rank(agtail(e)) == ND_rank(aghead(e))) {
			merge_oneway(e, prev);
			other_edge(e);
		    }
		    /* else is an intra-cluster edge */
		    continue;
		}
		interclrep(g, e);
		prev = e;
		continue;
	    }
	    /* merge multi-edges */
	    if (prev && (agtail(e) == agtail(prev)) && (aghead(e) == aghead(prev))) {
		if (ND_rank(agtail(e)) == ND_rank(aghead(e))) {
		    merge_oneway(e, prev);
		    other_edge(e);
		    continue;
		}
		if ((ED_label(e) == NULL) && (ED_label(prev) == NULL)
		    && ports_eq(e, prev)) {
		    if (Concentrate)
			ED_edge_type(e) = 6;
		    else {
			merge_chain(g, e, ED_to_virt(prev), NOT(0));
			other_edge(e);
		    }
		    continue;
		}
		/* parallel edges with different labels fall through here */
	    }
	    /* self edges */
	    if (agtail(e) == aghead(e)) {
		other_edge(e);
		prev = e;
		continue;
	    }
	    t = UF_find(agtail(e));
	    h = UF_find(aghead(e));
	    /* non-leader leaf nodes */
	    if ((agtail(e) != t) || (aghead(e) != h)) {
		/* FIX need to merge stuff */
		continue;
	    }
	    /* flat edges */
	    if (ND_rank(agtail(e)) == ND_rank(aghead(e))) {
		flat_edge(g, e);
		prev = e;
		continue;
	    }
	    /* forward edges */
	    if (ND_rank(aghead(e)) > ND_rank(agtail(e))) {
		make_chain(g, agtail(e), aghead(e), e);
		prev = e;
		continue;
	    }
	    /* backward edges */
	    else {
		/*other_edge(e); */
		/* avoid when opp==e in undirected graph */
		if ((opp = (agedge(g,aghead(e),agtail(e),NULL,0))) && (aghead(opp) != aghead(e))) {
		    /* shadows a forward edge */
		    if (ED_to_virt(opp) == NULL)
			make_chain(g, agtail(opp), aghead(opp), opp);
		    if ((ED_label(e) == NULL) && (ED_label(opp) == NULL)
			&& ports_eq(e, opp)) {
			if (Concentrate) {
			    ED_edge_type(e) = 6;
			    ED_conc_opp_flag(opp) = NOT(0);
			} else {	/* see above.  this is getting out of hand */
			    other_edge(e);
			    merge_chain(g, e, ED_to_virt(opp), NOT(0));
			}
			continue;
		    }
		}
		make_chain(g, aghead(e), agtail(e), e);
		prev = e;
	    }
	}
    }
    /* since decompose() is not called on subgraphs */
    if (g != dot_root(g)) {
	GD_comp(g).list = ALLOC(1, GD_comp(g).list, node_t *);
	GD_comp(g).list[0] = GD_nlist(g);
    }
}

