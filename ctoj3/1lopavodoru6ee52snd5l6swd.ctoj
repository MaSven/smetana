public static void abomination(Agraph_s g) {
    int r;
    __ptr__ rptr;
    assert(GD_minrank(g) == 0);
    /* 3 = one for new rank, one for sentinel, one for off-by-one */
    r = GD_maxrank(g) + 3;
    rptr = ALLOC(r, GD_rank(g), rank_t.class);
    GD_rank(g, rptr.plus(1));
    for (r = GD_maxrank(g); r >= 0; r--)
	GD_rank(g).plus(r).getPtr().setStruct(GD_rank(g).plus(r - 1).getPtr().getStruct());
    GD_rank(g).plus(r).setInt("n", 0);
    GD_rank(g).plus(r).setInt("an", 0);
    GD_rank(g).plus(r).setPtr("v", zmalloc(sizeof_starstar_empty(Agnode_s.class, 2)));
    GD_rank(g).plus(r).setPtr("av", GD_rank(g).plus(r).getPtr("v"));
    GD_rank(g).plus(r).setPtr("flat", null);
    GD_rank(g).plus(r).setDouble("ht1", 1);
    GD_rank(g).plus(r).setDouble("ht2", 1);
    GD_rank(g).plus(r).setDouble("pht1", 1);
    GD_rank(g).plus(r).setDouble("pht2", 1);
    GD_minrank(g, GD_minrank(g)-1);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void abomination(graph_t * g)
{
    int r;
    rank_t *rptr;
    assert(GD_minrank(g) == 0);
    /* 3 = one for new rank, one for sentinel, one for off-by-one */
    r = GD_maxrank(g) + 3;
    rptr = ALLOC(r, GD_rank(g), rank_t);
    GD_rank(g) = rptr + 1;
    for (r = GD_maxrank(g); r >= 0; r--)
	GD_rank(g)[r] = GD_rank(g)[r - 1];
    GD_rank(g)[r].n = GD_rank(g)[r].an = 0;
    GD_rank(g)[r].v = GD_rank(g)[r].av = (node_t **)zmalloc((2)*sizeof(node_t *));
    GD_rank(g)[r].flat = NULL;
    GD_rank(g)[r].ht1 = GD_rank(g)[r].ht2 = 1;
    GD_rank(g)[r].pht1 = GD_rank(g)[r].pht2 = 1;
    GD_minrank(g)--;
}

