static CString rankname[] = new CString[] { new CString("local"), new CString("global"), new CString("none"), null };
static int rankcode[] = { 100, 101, 102, 100 };
static CString fontnamenames[] = new CString[] {new CString("gd"),new CString("ps"),new CString("svg"), null};
static int fontnamecodes[] = {enumAsInt(fontname_kind.class, "NATIVEFONTS"),enumAsInt(fontname_kind.class, "PSFONTS"),
enumAsInt(fontname_kind.class, "SVGFONTS"),-1};
public static void graph_init(Agraph_s g, boolean use_rankdir) {
    CString p;
    double xf;
    int rankdir;
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setPtr("drawing", zmalloc(sizeof(layout_t.class)));
    /* set this up fairly early in case any string sizes are needed */
    if ((p = agget(g, new CString("fontpath")))!=null || (p = getenv(new CString("DOTFONTPATH")))!=null) {
UNSUPPORTED("81bz3jcukzyotxiqgrlhn9cbq"); // 	/* overide GDFONTPATH in local environment if dot
UNSUPPORTED("6jgl7atk1m9yeam4auh127azw"); // 	 * wants its own */
UNSUPPORTED("dyk0vc64gdzy1uwvsc2jqnjdw"); // 	static char *buf = 0;
UNSUPPORTED("8dywgree8jdjmj2ll2whbekhe"); // 	buf = grealloc(buf, strlen("GDFONTPATH=") + strlen(p) + 1);
UNSUPPORTED("d9ej6bo2s49vpstu3pql6tkrx"); // 	strcpy(buf, "GDFONTPATH=");
UNSUPPORTED("1s2jcd2h3eok7j6pclv20gyi2"); // 	strcat(buf, p);
UNSUPPORTED("abkxekvux4nramryfw2e8vcru"); // 	putenv(buf);
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
    }
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setPtr("charset", findCharset(g));
    /*if (!HTTPServerEnVar) {
	Gvimagepath = agget (g, "imagepath");
	if (!Gvimagepath)
	    Gvimagepath = Gvfilepath;
    }*/
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").setPtr("quantum",
	late_double(g, (agattr(g,0,new CString("quantum"),null)), 0.0, 0.0));
    /* setting rankdir=LR is only defined in dot,
     * but having it set causes shape code and others to use it. 
     * The result is confused output, so we turn it off unless requested.
     * This effective rankdir is stored in the bottom 2 bits of g->u.rankdir.
     * Sometimes, the code really needs the graph's rankdir, e.g., neato -n
     * with record shapes, so we store the real rankdir in the next 2 bits.
     */
    rankdir = 0;
    if ((p = agget(g, new CString("rankdir")))!=null) {
UNSUPPORTED("sp7zcza7w0dn7t66aj8rf4wn"); // 	if ((*(p)==*("LR")&&!strcmp(p,"LR")))
UNSUPPORTED("bjd2vk1jssqehllmgnqv601qd"); // 	    rankdir = 1;
UNSUPPORTED("ry8itlrmblmuegdwk1iu1t0x"); // 	else if ((*(p)==*("BT")&&!strcmp(p,"BT")))
UNSUPPORTED("5hno0xn18yt443qg815w3c2s2"); // 	    rankdir = 2;
UNSUPPORTED("aal39mi047mhafrsrxoutcffk"); // 	else if ((*(p)==*("RL")&&!strcmp(p,"RL")))
UNSUPPORTED("7vlda224wrgcdhr0ts3mndh5q"); // 	    rankdir = 3;
    }
    if (use_rankdir)
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setPtr("rankdir", (rankdir << 2) | rankdir);
    else
UNSUPPORTED("eoeia0mfajv7irn96ndso8y4h"); // 	((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rankdir) = (rankdir << 2));
    xf = late_double(g, (agattr(g,0,new CString("nodesep"),null)),
		0.25, 0.02);
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setInt("nodesep", 
    		((((xf)*72>=0)?(int)((xf)*72 + .5):(int)((xf)*72 - .5))));
    p = late_string(g, (agattr(g,0,new CString("ranksep"),null)), null);
    if (p!=null) {
UNSUPPORTED("c3p25g4289dxlei062z4eflss"); // 	if (sscanf(p, "%lf", &xf) == 0)
UNSUPPORTED("570vljex12zx5dkwi7mqa9knw"); // 	    xf = 0.5;
UNSUPPORTED("8k75h069sv2k9b6tgz77dscwd"); // 	else {
UNSUPPORTED("p882lodfwy5v48rwbxvg5s9i"); // 	    if (xf < 0.02)
UNSUPPORTED("dhhbmqv6n01j1eeyy7fpus1xw"); // 		xf = 0.02;
//	}
UNSUPPORTED("1ohdszker00bpadxg5w570p9y"); // 	if (strstr(p, "equally"))
UNSUPPORTED("26txzppfun3k3g975yg8f483c"); // 	    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->exact_ranksep) = (!(0));
    } else
	xf = 0.5;
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setInt("ranksep",
		((((xf)*72>=0)?(int)((xf)*72 + .5):(int)((xf)*72 - .5))));
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setInt("showboxes", 
    late_int(g, (agattr(g,0,new CString("showboxes"),null)), 0, 0));
    p = late_string(g, (agattr(g,0,new CString("fontnames"),null)), null);
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setInt("fontnames", maptoken(p, fontnamenames, fontnamecodes));
    setRatio(g);
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").setPtr("filled", 
	getdoubles2ptf(g, new CString("size"), (pointf) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").getPtr("size")));
    getdoubles2ptf(g, new CString("page"), (pointf) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").getPtr("page"));
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").setPtr("centered", mapbool(agget(g, new CString("center"))));
    if ((p = agget(g, new CString("rotate")))!=null)
UNSUPPORTED("3icj5cx6qdf3xgddwemhaxlg6"); // 	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->landscape = (atoi(p) == 90);
    else if ((p = agget(g, new CString("orientation")))!=null)
UNSUPPORTED("9yion9d58js353sn1710pk52a"); // 	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->landscape = ((p[0] == 'l') || (p[0] == 'L'));
    else if ((p = agget(g, new CString("landscape")))!=null)
UNSUPPORTED("c1on860uvhiyeedmpj8dkg4v5"); // 	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->landscape = mapbool(p);
    p = agget(g, new CString("clusterrank"));
    CL_type = maptoken(p, rankname, rankcode);
    p = agget(g, new CString("concentrate"));
    Concentrate = mapbool(p);
    State = 0;
    EdgeLabelsDone = 0;
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").setPtr("dpi", 0.0);
    if (((p = agget(g, new CString("dpi")))!=null && p.charAt(0)!='\0')
	|| ((p = agget(g, new CString("resolution")))!=null && p.charAt(0)!='\0'))
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").setPtr("dpi", atof(p));
    do_graph_label(g);
    Initial_dist = (1.0e+37);
    G_ordering = (agattr(g,0,new CString("ordering"),null));
    G_gradientangle = (agattr(g,0,new CString("gradientangle"),null));
    G_margin = (agattr(g,0,new CString("margin"),null));
    /* initialize nodes */
    N_height = (agattr(g,1,new CString("height"),null));
    N_width = (agattr(g,1,new CString("width"),null));
    N_shape = (agattr(g,1,new CString("shape"),null));
    N_color = (agattr(g,1,new CString("color"),null));
    N_fillcolor = (agattr(g,1,new CString("fillcolor"),null));
    N_style = (agattr(g,1,new CString("style"),null));
    N_fontsize = (agattr(g,1,new CString("fontsize"),null));
    N_fontname = (agattr(g,1,new CString("fontname"),null));
    N_fontcolor = (agattr(g,1,new CString("fontcolor"),null));
    N_label = (agattr(g,1,new CString("label"),null));
    if (N(N_label))
	N_label = agattr(g, 1, new CString("label"), new CString("\\N"));
    N_xlabel = (agattr(g,1,new CString("xlabel"),null));
    N_showboxes = (agattr(g,1,new CString("showboxes"),null));
    N_penwidth = (agattr(g,1,new CString("penwidth"),null));
    N_ordering = (agattr(g,1,new CString("ordering"),null));
    N_margin = (agattr(g,1,new CString("margin"),null));
    /* attribs for polygon shapes */
    N_sides = (agattr(g,1,new CString("sides"),null));
    N_peripheries = (agattr(g,1,new CString("peripheries"),null));
    N_skew = (agattr(g,1,new CString("skew"),null));
    N_orientation = (agattr(g,1,new CString("orientation"),null));
    N_distortion = (agattr(g,1,new CString("distortion"),null));
    N_fixed = (agattr(g,1,new CString("fixedsize"),null));
    N_imagescale = (agattr(g,1,new CString("imagescale"),null));
    N_nojustify = (agattr(g,1,new CString("nojustify"),null));
    N_layer = (agattr(g,1,new CString("layer"),null));
    N_group = (agattr(g,1,new CString("group"),null));
    N_comment = (agattr(g,1,new CString("comment"),null));
    N_vertices = (agattr(g,1,new CString("vertices"),null));
    N_z = (agattr(g,1,new CString("z"),null));
    N_gradientangle = (agattr(g,1,new CString("gradientangle"),null));
    /* initialize edges */
    E_weight = (agattr(g,2,new CString("weight"),null));
    E_color = (agattr(g,2,new CString("color"),null));
    E_fillcolor = (agattr(g,2,new CString("fillcolor"),null));
    E_fontsize = (agattr(g,2,new CString("fontsize"),null));
    E_fontname = (agattr(g,2,new CString("fontname"),null));
    E_fontcolor = (agattr(g,2,new CString("fontcolor"),null));
    E_label = (agattr(g,2,new CString("label"),null));
    E_xlabel = (agattr(g,2,new CString("xlabel"),null));
    E_label_float = (agattr(g,2,new CString("labelfloat"),null));
    /* vladimir */
    E_dir = (agattr(g,2,new CString("dir"),null));
    E_arrowhead = (agattr(g,2,new CString("arrowhead"),null));
    E_arrowtail = (agattr(g,2,new CString("arrowtail"),null));
    E_headlabel = (agattr(g,2,new CString("headlabel"),null));
    E_taillabel = (agattr(g,2,new CString("taillabel"),null));
    E_labelfontsize = (agattr(g,2,new CString("labelfontsize"),null));
    E_labelfontname = (agattr(g,2,new CString("labelfontname"),null));
    E_labelfontcolor = (agattr(g,2,new CString("labelfontcolor"),null));
    E_labeldistance = (agattr(g,2,new CString("labeldistance"),null));
    E_labelangle = (agattr(g,2,new CString("labelangle"),null));
    /* end vladimir */
    E_minlen = (agattr(g,2,new CString("minlen"),null));
    E_showboxes = (agattr(g,2,new CString("showboxes"),null));
    E_style = (agattr(g,2,new CString("style"),null));
    E_decorate = (agattr(g,2,new CString("decorate"),null));
    E_arrowsz = (agattr(g,2,new CString("arrowsize"),null));
    E_constr = (agattr(g,2,new CString("constraint"),null));
    E_layer = (agattr(g,2,new CString("layer"),null));
    E_comment = (agattr(g,2,new CString("comment"),null));
    E_tailclip = (agattr(g,2,new CString("tailclip"),null));
    E_headclip = (agattr(g,2,new CString("headclip"),null));
    E_penwidth = (agattr(g,2,new CString("penwidth"),null));
    /* background */
   g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").setPtr("xdots", init_xdot(g));
    /* initialize id, if any */
    if ((p = agget(g, new CString("id")))!=null && p.charAt(0)!='\0')
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").setPtr("id", strdup_and_subst_obj(p, g));
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void graph_init(graph_t * g, boolean use_rankdir)
{
    char *p;
    double xf;
    static char *rankname[] = { "local", "global", "none", NULL };
    static int rankcode[] = { 100, 101, 102, 100 };
    static char *fontnamenames[] = {"gd","ps","svg", NULL};
    static int fontnamecodes[] = {NATIVEFONTS,PSFONTS,SVGFONTS,-1};
    int rankdir;
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing) = (layout_t*)zmalloc(sizeof(layout_t));
    /* set this up fairly early in case any string sizes are needed */
    if ((p = agget(g, "fontpath")) || (p = getenv("DOTFONTPATH"))) {
	/* overide GDFONTPATH in local environment if dot
	 * wants its own */
	static char *buf = 0;
	buf = grealloc(buf, strlen("GDFONTPATH=") + strlen(p) + 1);
	strcpy(buf, "GDFONTPATH=");
	strcat(buf, p);
	putenv(buf);
    }
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->charset) = findCharset (g);
    if (!HTTPServerEnVar) {
	Gvimagepath = agget (g, "imagepath");
	if (!Gvimagepath)
	    Gvimagepath = Gvfilepath;
    }
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->quantum =
	late_double(g, (agattr(g,0,"quantum",NULL)), 0.0, 0.0);
    /* setting rankdir=LR is only defined in dot,
     * but having it set causes shape code and others to use it. 
     * The result is confused output, so we turn it off unless requested.
     * This effective rankdir is stored in the bottom 2 bits of g->u.rankdir.
     * Sometimes, the code really needs the graph's rankdir, e.g., neato -n
     * with record shapes, so we store the real rankdir in the next 2 bits.
     */
    rankdir = 0;
    if ((p = agget(g, "rankdir"))) {
	if ((*(p)==*("LR")&&!strcmp(p,"LR")))
	    rankdir = 1;
	else if ((*(p)==*("BT")&&!strcmp(p,"BT")))
	    rankdir = 2;
	else if ((*(p)==*("RL")&&!strcmp(p,"RL")))
	    rankdir = 3;
    }
    if (use_rankdir)
	((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rankdir) = (rankdir << 2) | rankdir);
    else
	((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rankdir) = (rankdir << 2));
    xf = late_double(g, (agattr(g,0,"nodesep",NULL)),
		0.25, 0.02);
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep) = ((((xf)*72>=0)?(int)((xf)*72 + .5):(int)((xf)*72 - .5)));
    p = late_string(g, (agattr(g,0,"ranksep",NULL)), NULL);
    if (p) {
	if (sscanf(p, "%lf", &xf) == 0)
	    xf = 0.5;
	else {
	    if (xf < 0.02)
		xf = 0.02;
	}
	if (strstr(p, "equally"))
	    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->exact_ranksep) = (!(0));
    } else
	xf = 0.5;
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->ranksep) = ((((xf)*72>=0)?(int)((xf)*72 + .5):(int)((xf)*72 - .5)));
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->showboxes) = late_int(g, (agattr(g,0,"showboxes",NULL)), 0, 0);
    p = late_string(g, (agattr(g,0,"fontnames",NULL)), NULL);
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->fontnames) = maptoken(p, fontnamenames, fontnamecodes);
    setRatio(g);
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->filled =
	getdoubles2ptf(g, "size", &((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->size));
    getdoubles2ptf(g, "page", &((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->page));
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->centered = mapbool(agget(g, "center"));
    if ((p = agget(g, "rotate")))
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->landscape = (atoi(p) == 90);
    else if ((p = agget(g, "orientation")))
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->landscape = ((p[0] == 'l') || (p[0] == 'L'));
    else if ((p = agget(g, "landscape")))
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->landscape = mapbool(p);
    p = agget(g, "clusterrank");
    CL_type = maptoken(p, rankname, rankcode);
    p = agget(g, "concentrate");
    Concentrate = mapbool(p);
    State = 0;
    EdgeLabelsDone = 0;
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->dpi = 0.0;
    if (((p = agget(g, "dpi")) && p[0])
	|| ((p = agget(g, "resolution")) && p[0]))
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->dpi = atof(p);
    do_graph_label(g);
    Initial_dist = (1.0e+37);
    G_ordering = (agattr(g,0,"ordering",NULL));
    G_gradientangle = (agattr(g,0,"gradientangle",NULL));
    G_margin = (agattr(g,0,"margin",NULL));
    /* initialize nodes */
    N_height = (agattr(g,1,"height",NULL));
    N_width = (agattr(g,1,"width",NULL));
    N_shape = (agattr(g,1,"shape",NULL));
    N_color = (agattr(g,1,"color",NULL));
    N_fillcolor = (agattr(g,1,"fillcolor",NULL));
    N_style = (agattr(g,1,"style",NULL));
    N_fontsize = (agattr(g,1,"fontsize",NULL));
    N_fontname = (agattr(g,1,"fontname",NULL));
    N_fontcolor = (agattr(g,1,"fontcolor",NULL));
    N_label = (agattr(g,1,"label",NULL));
    if (!N_label)
	N_label = agattr(g, 1, "label", "\\N");
    N_xlabel = (agattr(g,1,"xlabel",NULL));
    N_showboxes = (agattr(g,1,"showboxes",NULL));
    N_penwidth = (agattr(g,1,"penwidth",NULL));
    N_ordering = (agattr(g,1,"ordering",NULL));
    N_margin = (agattr(g,1,"margin",NULL));
    /* attribs for polygon shapes */
    N_sides = (agattr(g,1,"sides",NULL));
    N_peripheries = (agattr(g,1,"peripheries",NULL));
    N_skew = (agattr(g,1,"skew",NULL));
    N_orientation = (agattr(g,1,"orientation",NULL));
    N_distortion = (agattr(g,1,"distortion",NULL));
    N_fixed = (agattr(g,1,"fixedsize",NULL));
    N_imagescale = (agattr(g,1,"imagescale",NULL));
    N_nojustify = (agattr(g,1,"nojustify",NULL));
    N_layer = (agattr(g,1,"layer",NULL));
    N_group = (agattr(g,1,"group",NULL));
    N_comment = (agattr(g,1,"comment",NULL));
    N_vertices = (agattr(g,1,"vertices",NULL));
    N_z = (agattr(g,1,"z",NULL));
    N_gradientangle = (agattr(g,1,"gradientangle",NULL));
    /* initialize edges */
    E_weight = (agattr(g,2,"weight",NULL));
    E_color = (agattr(g,2,"color",NULL));
    E_fillcolor = (agattr(g,2,"fillcolor",NULL));
    E_fontsize = (agattr(g,2,"fontsize",NULL));
    E_fontname = (agattr(g,2,"fontname",NULL));
    E_fontcolor = (agattr(g,2,"fontcolor",NULL));
    E_label = (agattr(g,2,"label",NULL));
    E_xlabel = (agattr(g,2,"xlabel",NULL));
    E_label_float = (agattr(g,2,"labelfloat",NULL));
    /* vladimir */
    E_dir = (agattr(g,2,"dir",NULL));
    E_arrowhead = (agattr(g,2,"arrowhead",NULL));
    E_arrowtail = (agattr(g,2,"arrowtail",NULL));
    E_headlabel = (agattr(g,2,"headlabel",NULL));
    E_taillabel = (agattr(g,2,"taillabel",NULL));
    E_labelfontsize = (agattr(g,2,"labelfontsize",NULL));
    E_labelfontname = (agattr(g,2,"labelfontname",NULL));
    E_labelfontcolor = (agattr(g,2,"labelfontcolor",NULL));
    E_labeldistance = (agattr(g,2,"labeldistance",NULL));
    E_labelangle = (agattr(g,2,"labelangle",NULL));
    /* end vladimir */
    E_minlen = (agattr(g,2,"minlen",NULL));
    E_showboxes = (agattr(g,2,"showboxes",NULL));
    E_style = (agattr(g,2,"style",NULL));
    E_decorate = (agattr(g,2,"decorate",NULL));
    E_arrowsz = (agattr(g,2,"arrowsize",NULL));
    E_constr = (agattr(g,2,"constraint",NULL));
    E_layer = (agattr(g,2,"layer",NULL));
    E_comment = (agattr(g,2,"comment",NULL));
    E_tailclip = (agattr(g,2,"tailclip",NULL));
    E_headclip = (agattr(g,2,"headclip",NULL));
    E_penwidth = (agattr(g,2,"penwidth",NULL));
    /* background */
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->xdots = init_xdot (g);
    /* initialize id, if any */
    if ((p = agget(g, "id")) && *p)
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->drawing)->id = strdup_and_subst_obj(p, g);
}

