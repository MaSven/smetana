public static void search_component(Agraph_s g, Agnode_s n) {
    int c, i;
    elist vec[] = new elist[4];
    Agnode_s other;
    Agedge_s e;
    add_to_component(n);
    vec[0] = (elist) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("out");
    vec[1] = (elist) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("in");
    vec[2] = (elist) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("flat_out");
    vec[3] = (elist) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("flat_in");
    for (c = 0; c <= 3; c++) {
	if (vec[c].getPtr("list")!=null)
	    for (i = 0; (e = (Agedge_s) vec[c].getArrayOfPtr("list", i))!=null; i++) {
			if (EQ(other = (Agnode_s)((e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2? e: e.plus(-1))).getPtr("node"), n))
			  other = (Agnode_s) (e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3? e: e.plus(1)).getPtr("node");
		if ((other.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("mark") != Cmark) && EQ(other, UF_find(other)))
		    search_component(g, other);
	    }
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void
search_component(graph_t * g, node_t * n)
{
    int c, i;
    elist vec[4];
    node_t *other;
    edge_t *e;
    add_to_component(n);
    vec[0] = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->out);
    vec[1] = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->in);
    vec[2] = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->flat_out);
    vec[3] = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->flat_in);
    for (c = 0; c <= 3; c++) {
	if (vec[c].list)
	    for (i = 0; (e = vec[c].list[i]); i++) {
		if ((other = ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node)) == n)
		    other = ((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node);
		if (((((Agnodeinfo_t*)(((Agobj_t*)(other))->data))->mark) != Cmark) && (other == UF_find(other)))
		    search_component(g, other);
	    }
    }
}

