public static int clust_ht(Agraph_s g) {
    int c;
    double ht1, ht2;
    Agraph_s subg;
    __ptr__ rank = GD_rank(dot_root(g));
    int margin, haveClustLabel = 0;
    if (EQ(g, dot_root(g))) 
	margin = 8;
    else
	margin = late_int (g, G_margin, 8, 0);
    ht1 = GD_ht1(g);
    ht2 = GD_ht2(g);
    /* account for sub-clusters */
    for (c = 1; c <= GD_n_cluster(g); c++) {
	subg = (Agraph_s) GD_clust(g).plus(c).getPtr();
	haveClustLabel |= clust_ht(subg);
	if (GD_maxrank(subg) == GD_maxrank(g))
	    ht1 = MAX(ht1, GD_ht1(subg) + margin);
	if (GD_minrank(subg) == GD_minrank(g))
	    ht2 = MAX(ht2, GD_ht2(subg) + margin);
    }
    /* account for a possible cluster label in clusters */
    /* room for root graph label is handled in dotneato_postprocess */
    if (NEQ(g, dot_root(g)) && GD_label(g)!=null) {
	haveClustLabel = 1;
	if (N(GD_flip(agroot(g)))) {
	    ht1 += GD_border(g).plus(0).getDouble("y");
	    ht2 += GD_border(g).plus(2).getDouble("y");
	}
    }
    GD_ht1(g, ht1);
    GD_ht2(g, ht2);
    /* update the global ranks */
    if (NEQ(g, dot_root(g))) {
	rank.plus(GD_minrank(g)).setDouble("ht2", MAX(rank.plus(GD_minrank(g)).getDouble("ht2"), ht2));
	rank.plus(GD_maxrank(g)).setDouble("ht1", MAX(rank.plus(GD_maxrank(g)).getDouble("ht1"), ht1));
    }
    return haveClustLabel;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int clust_ht(Agraph_t * g)
{
    int c;
    double ht1, ht2;
    graph_t *subg;
    rank_t *rank = GD_rank(dot_root(g));
    int margin, haveClustLabel = 0;
    if (g == dot_root(g)) 
	margin = 8;
    else
	margin = late_int (g, G_margin, 8, 0);
    ht1 = GD_ht1(g);
    ht2 = GD_ht2(g);
    /* account for sub-clusters */
    for (c = 1; c <= GD_n_cluster(g); c++) {
	subg = GD_clust(g)[c];
	haveClustLabel |= clust_ht(subg);
	if (GD_maxrank(subg) == GD_maxrank(g))
	    ht1 = MAX(ht1, GD_ht1(subg) + margin);
	if (GD_minrank(subg) == GD_minrank(g))
	    ht2 = MAX(ht2, GD_ht2(subg) + margin);
    }
    /* account for a possible cluster label in clusters */
    /* room for root graph label is handled in dotneato_postprocess */
    if ((g != dot_root(g)) && GD_label(g)) {
	haveClustLabel = 1;
	if (!GD_flip(agroot(g))) {
	    ht1 += GD_border(g)[0].y;
	    ht2 += GD_border(g)[2].y;
	}
    }
    GD_ht1(g) = ht1;
    GD_ht2(g) = ht2;
    /* update the global ranks */
    if (g != dot_root(g)) {
	rank[GD_minrank(g)].ht2 = MAX(rank[GD_minrank(g)].ht2, ht2);
	rank[GD_maxrank(g)].ht1 = MAX(rank[GD_maxrank(g)].ht1, ht1);
    }
    return haveClustLabel;
}

