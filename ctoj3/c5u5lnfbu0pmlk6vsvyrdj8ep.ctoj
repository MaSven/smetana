public static void search_component(Agraph_s g, Agnode_s n) {
    int c, i;
    __array_of_struct__ vec = __array_of_struct__.malloc(elist.class, 4);
    Agnode_s other;
    Agedge_s e;
    add_to_component(n);
    vec.plus(0).setStruct(ND_out(n));
    vec.plus(1).setStruct(ND_in(n));
    vec.plus(2).setStruct(ND_flat_out(n));
    vec.plus(3).setStruct(ND_flat_in(n));
    for (c = 0; c <= 3; c++) {
	if (vec.plus(c).getStruct().getPtr("list")!=null)
	    for (i = 0; (e = (Agedge_s) vec.plus(c).getStruct().getArrayOfPtr("list").plus(i).getPtr())!=null; i++) {
		if (EQ(other = aghead(e), n))
		    other = agtail(e);
		if ((ND_mark(other) != Cmark) && (EQ(other, UF_find(other))))
		    search_component(g, other);
	    }
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void
search_component(graph_t * g, node_t * n)
{
    int c, i;
    elist vec[4];
    node_t *other;
    edge_t *e;
    add_to_component(n);
    vec[0] = ND_out(n);
    vec[1] = ND_in(n);
    vec[2] = ND_flat_out(n);
    vec[3] = ND_flat_in(n);
    for (c = 0; c <= 3; c++) {
	if (vec[c].list)
	    for (i = 0; (e = vec[c].list[i]); i++) {
		if ((other = aghead(e)) == n)
		    other = agtail(e);
		if ((ND_mark(other) != Cmark) && (other == UF_find(other)))
		    search_component(g, other);
	    }
    }
}

