public static boolean pathscross(Agnode_s n0, Agnode_s n1, Agedge_s ie1, Agedge_s oe1) {
    Agedge_s e0, e1;
    Agnode_s na, nb;
    boolean order;
    int cnt;
    order = (ND_order(n0) > ND_order(n1));
    if ((ND_out(n0).getInt("size") != 1) && (ND_out(n0).getInt("size") != 1))
	return false;
    e1 = oe1;
    if (ND_out(n0).getInt("size") == 1 && e1!=null) {
	e0 = (Agedge_s) ND_out(n0).getArrayOfPtr("list").plus(0).getPtr();
	for (cnt = 0; cnt < 2; cnt++) {
	    if (EQ(na = aghead(e0), nb = aghead(e1)))
		break;
	    if (order != (ND_order(na) > ND_order(nb)))
		return NOT(false);
	    if ((ND_out(na).getInt("size") != 1) || (ND_node_type(na) == 0))
		break;
	    e0 = (Agedge_s) ND_out(na).getArrayOfPtr("list").plus(0).getPtr();
	    if ((ND_out(nb).getInt("size") != 1) || (ND_node_type(nb) == 0))
		break;
	    e1 = (Agedge_s) ND_out(nb).getArrayOfPtr("list").plus(0).getPtr();
	}
    }
    e1 = ie1;
    if (ND_in(n0).getInt("size") == 1 && e1!=null) {
	e0 = (Agedge_s) ND_in(n0).getArrayOfPtr("list").plus(0).getPtr();
	for (cnt = 0; cnt < 2; cnt++) {
	    if (EQ(na = agtail(e0), nb = agtail(e1)))
		break;
	    if (order != (ND_order(na) > ND_order(nb)))
		return NOT(false);
	    if ((ND_in(na).getInt("size") != 1) || (ND_node_type(na) == 0))
		break;
	    e0 = (Agedge_s) ND_in(na).getArrayOfPtr("list").plus(0).getPtr();
	    if ((ND_in(nb).getInt("size") != 1) || (ND_node_type(nb) == 0))
		break;
	    e1 = (Agedge_s) ND_in(nb).getArrayOfPtr("list").plus(0).getPtr();
	}
    }
    return false;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static boolean pathscross(n0, n1, ie1, oe1)
node_t *n0, *n1;
edge_t *ie1, *oe1;
{
    edge_t *e0, *e1;
    node_t *na, *nb;
    int order, cnt;
    order = (ND_order(n0) > ND_order(n1));
    if ((ND_out(n0).size != 1) && (ND_out(n0).size != 1))
	return 0;
    e1 = oe1;
    if (ND_out(n0).size == 1 && e1) {
	e0 = ND_out(n0).list[0];
	for (cnt = 0; cnt < 2; cnt++) {
	    if ((na = aghead(e0)) == (nb = aghead(e1)))
		break;
	    if (order != (ND_order(na) > ND_order(nb)))
		return NOT(0);
	    if ((ND_out(na).size != 1) || (ND_node_type(na) == 0))
		break;
	    e0 = ND_out(na).list[0];
	    if ((ND_out(nb).size != 1) || (ND_node_type(nb) == 0))
		break;
	    e1 = ND_out(nb).list[0];
	}
    }
    e1 = ie1;
    if (ND_in(n0).size == 1 && e1) {
	e0 = ND_in(n0).list[0];
	for (cnt = 0; cnt < 2; cnt++) {
	    if ((na = agtail(e0)) == (nb = agtail(e1)))
		break;
	    if (order != (ND_order(na) > ND_order(nb)))
		return NOT(0);
	    if ((ND_in(na).size != 1) || (ND_node_type(na) == 0))
		break;
	    e0 = ND_in(na).list[0];
	    if ((ND_in(nb).size != 1) || (ND_node_type(nb) == 0))
		break;
	    e1 = ND_in(nb).list[0];
	}
    }
    return 0;
}

