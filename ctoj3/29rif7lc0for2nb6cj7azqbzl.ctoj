public static void dot1_rank(Agraph_s g, aspect_t asp) {
    point p = (point) Memory.malloc(point.class);
    edgelabel_ranks(g);
    if (asp!=null) {
UNSUPPORTED("kh7e20nqwuserrnpf3zpvuyl"); // 	init_UF_size(g);
UNSUPPORTED("d88j5oswhz0d3yvd4wlvxohmu"); // 	initEdgeTypes(g);
    }
    collapse_sets(g,g);
    /*collapse_leaves(g); */
    class1(g);
    p = minmax_edges(g);
    decompose(g, 0);
    if (asp!=null && (
	  (g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").getInt("size") > 1)
	  ||
	  (g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("n_cluster") > 0))) {
UNSUPPORTED("evcjt85irnaa02v8cam07i009"); // 	asp->badGraph = 1;
UNSUPPORTED("45nxv6kczal9hnytkfcyt2jk8"); // 	asp = NULL;
    }
    acyclic_(g);
    if (minmax_edges2(g, p))
UNSUPPORTED("800vpyk6y4hcx2txwyrr2boxu"); // 	decompose(g, 0);
    if (asp!=null)
	rank3(g, asp);
    else
	rank1(g);
    expand_ranksets(g, asp);
    cleanup1(g);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void dot1_rank(graph_t * g, aspect_t* asp)
{
    point p;
    edgelabel_ranks(g);
    if (asp) {
	init_UF_size(g);
	initEdgeTypes(g);
    }
    collapse_sets(g,g);
    /*collapse_leaves(g); */
    class1(g);
    p = minmax_edges(g);
    decompose(g, 0);
    if (asp && (((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).size > 1)||((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->n_cluster) > 0))) {
	asp->badGraph = 1;
	asp = NULL;
    }
    acyclic(g);
    if (minmax_edges2(g, p))
	decompose(g, 0);
    if (asp)
	rank3(g, asp);
    else
	rank1(g);
    expand_ranksets(g, asp);
    cleanup1(g);
}

