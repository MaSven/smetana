public static int agdegree(Agraph_s g, Agnode_s n, boolean want_in, boolean want_out) {
    Agsubnode_s sn;
    int rv = 0;
    sn = agsubrep(g, n);
    final Agsubnode_s sn1 = sn;
    if (sn!=null) {
    	if (want_out) rv += cnt((_dt_s)g.getPtr("e_seq"),
    			STARSTAR.amp(new ACCESS<_dtlink_s>() {
    				public _dtlink_s get() {
    					return (_dtlink_s) sn1.getPtr("out_seq");
    				}
    				public void set(_dtlink_s obj) {
    					sn1.setPtr("out_seq", obj);
    				}})
    			);
    	if (want_in) rv += cnt((_dt_s)g.getPtr("e_seq"),
    			STARSTAR.amp(new ACCESS<_dtlink_s>() {
    				public _dtlink_s get() {
    					return (_dtlink_s) sn1.getPtr("in_seq");
    				}
    				public void set(_dtlink_s obj) {
    					sn1.setPtr("in_seq", obj);
    				}})
    			);
    }
	return rv;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
int agdegree(Agraph_t * g, Agnode_t * n, int want_in, int want_out)
{
    Agsubnode_t *sn;
    int rv = 0;
    sn = agsubrep(g, n);
    if (sn) {
	if (want_out) rv += cnt(g->e_seq,&(sn->out_seq));
	if (want_in) rv += cnt(g->e_seq,&(sn->in_seq));
    }
	return rv;
}

