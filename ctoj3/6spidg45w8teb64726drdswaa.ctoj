public static __ptr__ dtvsearch(_dt_s dt, __ptr__ obj, int type) {
	_dt_s		d, p;
	__ptr__		o, n, ok, nk;
	int		cmp, lk, sz, ky;
	Dtcompar_f	cmpf;
	/* these operations only happen at the top level */
	if ((type&(0000001|0000002|0000100|0000040))!=0)
		return (__ptr__) dt.getPtr("meth").call("searchf", dt, obj, type);
	if(((type&(0001000|0000004))!=0) || /* order sets first/last done below */
	   (((type&(0000200|0000400))!=0) && N(dt.getPtr("meth").getInt("type")&(0000010|0000004)) ) ) {
UNSUPPORTED("eh58afn12udc5q8yzr25advls"); // 	{	for(d = dt; d; d = d->view)
UNSUPPORTED("99dyygo1p8ivdwvxg0kyro2wb"); // 			if((o = (*(d->meth->searchf))(d,obj,type)) )
UNSUPPORTED("1dhrv6aj5eq8ntuvb7qbs8aot"); // 				break;
UNSUPPORTED("66mzv36wy2mflr2u2a5pwa2vg"); // 		dt->walk = d;
UNSUPPORTED("c4mj2aqm6yf1jzso7g9z92g39"); // 		return o;
	}
	if((dt.getPtr("meth").getInt("type") & (0000010|0000004) )!=0)
	{	if(N(type & (0000200|0000400|0000010|0000020)) )
			return null;
		n = nk = null; p = null;
		for(d = dt; d!=null; d = (_dt_s) d.getPtr("view"))
		{	if(N(o = (__ptr__) d.getPtr("meth").call("searchf", d, obj, type) ))
				continue;
			ky = d.getPtr("disc").getInt("key");
			sz = d.getPtr("disc").getInt("size");
			lk = d.getPtr("disc").getInt("link");
			cmpf = (Dtcompar_f) d.getPtr("disc").getPtr("comparf");
			ok = (__ptr__) (sz < 0 ? ((__ptr__)o).addVirtualBytes(ky) : ((__ptr__)o).addVirtualBytes(ky));
			if(n!=null) /* get the right one among all dictionaries */
			{
UNSUPPORTED("3901wgr15qsodkeaua3t1cowa"); // 			{	cmp = (cmpf ? (*cmpf)(d,ok,nk,d->disc) : (sz <= 0 ? strcmp(ok,nk) : memcmp(ok,nk,sz)) );
UNSUPPORTED("dbakrc2nyretewvmfasl8hcya"); // 				if(((type & (0000010|0000200)) && cmp < 0) ||
UNSUPPORTED("dtwrbl1qp7i61npnve1m7w05f"); // 				   ((type & (0000020|0000400)) && cmp > 0) )
UNSUPPORTED("5o3u9aaanyd9yh74sjfkkofmo"); // 					goto a_dj;
			}
			else /* looks good for now */
			{ a_dj: p  = d;
				n  = o;
				nk = ok;
			}
		}
		dt.setPtr("walk", p);
		return n;
	}
	/* non-ordered methods */
UNSUPPORTED("36qdhpbcwst6tc1gvwcyvg91u"); // 	if(!(type & (0000010|0000020)) )
UNSUPPORTED("5p6q7ip4om6y4nrsjz07ua456"); // 		return ((void*)0);
UNSUPPORTED("bx84jj9durkqzcrq4l9h1b0za"); // 	if(!dt->walk || obj != (dt->walk->disc->link < 0 ? ((Dthold_t*)(dt->walk->data->here))->obj : (void*)((char*)(dt->walk->data->here) - dt->walk->disc->link) ) )
UNSUPPORTED("eh58afn12udc5q8yzr25advls"); // 	{	for(d = dt; d; d = d->view)
UNSUPPORTED("de5yx4s0nsbgshd9seabcy2g9"); // 			if((o = (*(d->meth->searchf))(d, obj, 0000004)) )
UNSUPPORTED("1dhrv6aj5eq8ntuvb7qbs8aot"); // 				break;
UNSUPPORTED("66mzv36wy2mflr2u2a5pwa2vg"); // 		dt->walk = d;
UNSUPPORTED("d4pllgr7b2ohssrhtxxtd1fbb"); // 		if(!(obj = o) )
UNSUPPORTED("aihzmr4oo3tuh6kkxwtn9tlbd"); // 			return ((void*)0);
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("6he3c07r1xjfepuku37yav920"); // 	for(d = dt->walk, obj = (*d->meth->searchf)(d, obj, type);; )
UNSUPPORTED("d7hiatjof3gfyx3ab27oq4d74"); // 	{	while(obj) /* keep moving until finding an uncovered object */
UNSUPPORTED("44tdztkynd140cqbaafbbxvqn"); // 		{	for(p = dt; ; p = p->view)
UNSUPPORTED("72t51pabtpfsnn4qrcjvd6gkb"); // 			{	if(p == d) /* adjacent object is uncovered */	
UNSUPPORTED("4an2jpd7xs9lm1jlfrbualsrv"); // 					return obj;
UNSUPPORTED("bndt77eukkw8dnhl8sce4ts3d"); // 				if((*(p->meth->searchf))(p, obj, 0000004) )
UNSUPPORTED("6ioth986rfbv208dp59shjy15"); // 					break;
UNSUPPORTED("3to5h0rvqxdeqs38mhv47mm3o"); // 			}
UNSUPPORTED("5bx9ax8tembk4pweu41m5yw43"); // 			obj = (*d->meth->searchf)(d, obj, type);
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("3diupilxwbi5nroolxiy7e8b0"); // 		if(!(d = dt->walk = d->view) ) /* move on to next dictionary */
UNSUPPORTED("aihzmr4oo3tuh6kkxwtn9tlbd"); // 			return ((void*)0);
UNSUPPORTED("esje2igec9cwwteta36lbrdvc"); // 		else if(type&0000010)
UNSUPPORTED("aeh2pn8gp2xj4lehv52n4hp6b"); // 			obj = (*(d->meth->searchf))(d,((void*)0),0000200);
UNSUPPORTED("1lfqka4p8e7w15b16wquy0vjx"); // 		else	obj = (*(d->meth->searchf))(d,((void*)0),0000400);
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("c24nfmv9i7o5eoqaymbibp7m7"); // }

throw new UnsupportedOperationException();
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void* dtvsearch(Dt_t* dt, register void* obj, register int type)
{
	Dt_t		*d, *p;
	void		*o, *n, *ok, *nk;
	int		cmp, lk, sz, ky;
	Dtcompar_f	cmpf;
	/* these operations only happen at the top level */
	if(type&(0000001|0000002|0000100|0000040))
		return (*(dt->meth->searchf))(dt,obj,type);
	if((type&(0001000|0000004)) || /* order sets first/last done below */
	   ((type&(0000200|0000400)) && !(dt->meth->type&(0000010|0000004)) ) )
	{	for(d = dt; d; d = d->view)
			if((o = (*(d->meth->searchf))(d,obj,type)) )
				break;
		dt->walk = d;
		return o;
	}
	if(dt->meth->type & (0000010|0000004) )
	{	if(!(type & (0000200|0000400|0000010|0000020)) )
			return ((void*)0);
		n = nk = ((void*)0); p = ((Dt_t*)0);
		for(d = dt; d; d = d->view)
		{	if(!(o = (*d->meth->searchf)(d, obj, type)) )
				continue;
			(ky = d->disc->key, sz = d->disc->size, lk = d->disc->link, cmpf = d->disc->comparf);
			ok = (void*)(sz < 0 ? *((char**)((char*)(o)+ky)) : ((char*)(o)+ky));
			if(n) /* get the right one among all dictionaries */
			{	cmp = (cmpf ? (*cmpf)(d,ok,nk,d->disc) : (sz <= 0 ? strcmp(ok,nk) : memcmp(ok,nk,sz)) );
				if(((type & (0000010|0000200)) && cmp < 0) ||
				   ((type & (0000020|0000400)) && cmp > 0) )
					goto a_dj;
			}
			else /* looks good for now */
			{ a_dj: p  = d;
				n  = o;
				nk = ok;
			}
		}
		dt->walk = p;
		return n;
	}
	/* non-ordered methods */
	if(!(type & (0000010|0000020)) )
		return ((void*)0);
	if(!dt->walk || obj != (dt->walk->disc->link < 0 ? ((Dthold_t*)(dt->walk->data->here))->obj : (void*)((char*)(dt->walk->data->here) - dt->walk->disc->link) ) )
	{	for(d = dt; d; d = d->view)
			if((o = (*(d->meth->searchf))(d, obj, 0000004)) )
				break;
		dt->walk = d;
		if(!(obj = o) )
			return ((void*)0);
	}
	for(d = dt->walk, obj = (*d->meth->searchf)(d, obj, type);; )
	{	while(obj) /* keep moving until finding an uncovered object */
		{	for(p = dt; ; p = p->view)
			{	if(p == d) /* adjacent object is uncovered */	
					return obj;
				if((*(p->meth->searchf))(p, obj, 0000004) )
					break;
			}
			obj = (*d->meth->searchf)(d, obj, type);
		}
		if(!(d = dt->walk = d->view) ) /* move on to next dictionary */
			return ((void*)0);
		else if(type&0000010)
			obj = (*(d->meth->searchf))(d,((void*)0),0000200);
		else	obj = (*(d->meth->searchf))(d,((void*)0),0000400);
	}
}

