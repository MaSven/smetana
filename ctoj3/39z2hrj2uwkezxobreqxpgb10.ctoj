public static int make_html_label(__ptr__ obj, textlabel_t lp) {
	UNSUPPORTED("3s2xr5n4swgcjctfsv6qg00p1"); // int make_html_label(void *obj, textlabel_t * lp)
UNSUPPORTED("erg9i1970wdri39osu8hx2a6e"); // {
UNSUPPORTED("ecz4e03zumggc8tfymqvirexq"); //     int rv;
UNSUPPORTED("eilnlejf229enq1lj62vjv9co"); //     double wd2, ht2;
UNSUPPORTED("5t3pges1wg6mfbkjboi2joxvz"); //     boxf box;
UNSUPPORTED("djl3ek9tn11htu3vj4zglczzz"); //     graph_t *g;
UNSUPPORTED("1u1794803wctqmezrle9e40fh"); //     htmllabel_t *lbl;
UNSUPPORTED("3safvfkd3g1jswoj457mw482u"); //     htmlenv_t env;
UNSUPPORTED("8yytudftst76763qgnjebkzhm"); //     char *s;
UNSUPPORTED("1czan75f1vggpdp24d7zdiuk3"); //     env.obj = obj;
UNSUPPORTED("91broiy562bqiwualvjbh1l0s"); //     switch (agobjkind(obj)) {
UNSUPPORTED("eyna33dobiebmtd0nihpgura4"); //     case AGRAPH:
UNSUPPORTED("e6ugdl34d8yqtquk3xq8g5njr"); // 	env.g = ((Agraph_t *) obj)->root;
UNSUPPORTED("6aw91xzjmqvmtdvt1di23af8y"); // 	break;
UNSUPPORTED("6x7ztvlgv763oeop84udp1egg"); //     case AGNODE:
UNSUPPORTED("9ldb5ezpi13ytd46d7a2jfsjt"); // 	env.g = agraphof(((Agnode_t *) obj));
UNSUPPORTED("6aw91xzjmqvmtdvt1di23af8y"); // 	break;
UNSUPPORTED("2dqikmmb6ag0anvbzo5tybf1r"); //     case AGEDGE:
UNSUPPORTED("b3fnj3g5kryrunurhwtu14s58"); // 	env.g = agraphof(aghead(((Agedge_t *) obj)));
UNSUPPORTED("6aw91xzjmqvmtdvt1di23af8y"); // 	break;
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("b3ml4dxxt48s1jb4tjmh3kcl"); //     g = env.g->root;
UNSUPPORTED("a849v049i9w8qoy93ki11k5uu"); //     env.finfo.size = lp->fontsize;
UNSUPPORTED("a1hmvx29drpq62yc0z1hnt94v"); //     env.finfo.name = lp->fontname;
UNSUPPORTED("bp1xlac8f55plurlc7r8zlhe1"); //     env.finfo.color = lp->fontcolor;
UNSUPPORTED("1zhbcd4p01yiidkt2nre243ud"); //     env.finfo.flags = 0;
UNSUPPORTED("59lntj5hyamn5m48dx76egibr"); //     lbl = parseHTML(lp->text, &rv, &env);
UNSUPPORTED("5x7tz7hiemlbixjq7oneb217t"); //     if (!lbl) {
UNSUPPORTED("40w3xqmz5l9wriaza3oix426k"); // 	/* Parse of label failed; revert to simple text label */
UNSUPPORTED("8moktqylyfg7421xon31c77cc"); // 	agxbuf xb;
UNSUPPORTED("ej6qvho3zo1ppee5osn05sznr"); // 	unsigned char buf[128];
UNSUPPORTED("el1z2krv8hoorc5c7vjsxw7yn"); // 	agxbinit(&xb, 128, buf);
UNSUPPORTED("ex7p8f1fzbxmluxcv7b1klvqj"); // 	lp->html = 0;
UNSUPPORTED("bw17wplsvct5mo251vy3dsdnd"); // 	lp->text = strdup(nameOf(obj, &xb));
UNSUPPORTED("84zi029i2je3v9lclasqbzzz6"); // 	switch (lp->charset) {
UNSUPPORTED("2o83im06dulx11wjpy469gkoa"); // 	case 1:
UNSUPPORTED("2x8axrtn44h0bxv8taty1g4um"); // 	    s = latin1ToUTF8(lp->text);
UNSUPPORTED("ai3czg6gaaxspsmndknpyvuiu"); // 	    break;
UNSUPPORTED("6s5lm4gzged3go962bmlj7ali"); // 	default:		/* UTF8 */
UNSUPPORTED("ae0fj5kvhvwo125n05075dey0"); // 	    s = htmlEntityUTF8(lp->text, env.g);
UNSUPPORTED("ai3czg6gaaxspsmndknpyvuiu"); // 	    break;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("8o33n1cjfbc5pomhjq05mf70g"); // 	free(lp->text);
UNSUPPORTED("dggo2tcwybfitlkszeokmmkif"); // 	lp->text = s;
UNSUPPORTED("6kbijqcef4n75vn0elzyhlp1s"); // 	make_simple_label(GD_gvc(g), lp);
UNSUPPORTED("52frst03mcbsuu6bmnqs962qm"); // 	agxbfree(&xb);
UNSUPPORTED("cs1ejkx9cw658cl8cagdzqrzm"); // 	return rv;
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("5iviolw5wpvd60kgvpshry9yr"); //     if (lbl->kind == 1) {
UNSUPPORTED("bngn7k03zqxfuyqrg5jrn8bey"); // 	if (!lbl->u.tbl->data.pencolor && getPenColor(obj))
UNSUPPORTED("dotxa79u2y19du2t3cy26ikyr"); // 	    lbl->u.tbl->data.pencolor = strdup(getPenColor(obj));
UNSUPPORTED("4f3k9n37gn0t77n0n8w2jri95"); // 	rv |= size_html_tbl(g, lbl->u.tbl, NULL, &env);
UNSUPPORTED("9uru4l1xhqaont8awi4p0sjkj"); // 	wd2 = (lbl->u.tbl->data.box.UR.x) / 2;
UNSUPPORTED("47cjxxvben4j3g6i0n57razql"); // 	ht2 = (lbl->u.tbl->data.box.UR.y) / 2;
UNSUPPORTED("dbeae1e9945z3x32hpr57lcsy"); // 	box = boxfof(-wd2, -ht2, wd2, ht2);
UNSUPPORTED("esx73kvkhml43ids93kjyxtjl"); // 	pos_html_tbl(lbl->u.tbl, box, (1<<0) | (1<<1) | (1<<2) | (1<<3));
UNSUPPORTED("1pymoi8bdocpvglitsvkl1ht0"); // 	lp->dimen.x = box.UR.x - box.LL.x;
UNSUPPORTED("37qvpfma16f9jhg8vmapgqes9"); // 	lp->dimen.y = box.UR.y - box.LL.y;
UNSUPPORTED("c07up7zvrnu2vhzy6d7zcu94g"); //     } else {
UNSUPPORTED("4c4f4evqzm79omegn0iiwh0xm"); // 	rv |= size_html_txt(GD_gvc(g), lbl->u.txt, &env);
UNSUPPORTED("5p7gjzkkk108kyqqi0dcaub03"); // 	wd2 = lbl->u.txt->box.UR.x  / 2;
UNSUPPORTED("2h33453c8784yvjdqab9rhpnb"); // 	ht2 = lbl->u.txt->box.UR.y  / 2;
UNSUPPORTED("dbeae1e9945z3x32hpr57lcsy"); // 	box = boxfof(-wd2, -ht2, wd2, ht2);
UNSUPPORTED("bm3p3ihso4c60iy15wod75c9c"); // 	lbl->u.txt->box = box;
UNSUPPORTED("1pymoi8bdocpvglitsvkl1ht0"); // 	lp->dimen.x = box.UR.x - box.LL.x;
UNSUPPORTED("37qvpfma16f9jhg8vmapgqes9"); // 	lp->dimen.y = box.UR.y - box.LL.y;
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("5a4597d2vy3oenspwdojc7p42"); //     lp->u.html = lbl;
UNSUPPORTED("75khj23dwtyoqpo3pddh0y5lm"); //     /* If the label is a table, replace label text because this may
UNSUPPORTED("r04wjcozjf8bj9wdy4arsdy1"); //      * be used for the title and alt fields in image maps.
UNSUPPORTED("795vpnc8yojryr8b46aidsu69"); //      */
UNSUPPORTED("5iviolw5wpvd60kgvpshry9yr"); //     if (lbl->kind == 1) {
UNSUPPORTED("8o33n1cjfbc5pomhjq05mf70g"); // 	free(lp->text);
UNSUPPORTED("40luql1elu7ug4ne43b0l4bh4"); // 	lp->text = strdup("<TABLE>");
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("v7vqc9l7ge2bfdwnw11z7rzi"); //     return rv;
UNSUPPORTED("c24nfmv9i7o5eoqaymbibp7m7"); // }

throw new UnsupportedOperationException();
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
int make_html_label(void *obj, textlabel_t * lp)
{
    int rv;
    double wd2, ht2;
    boxf box;
    graph_t *g;
    htmllabel_t *lbl;
    htmlenv_t env;
    char *s;
    env.obj = obj;
    switch (agobjkind(obj)) {
    case AGRAPH:
	env.g = ((Agraph_t *) obj)->root;
	break;
    case AGNODE:
	env.g = agraphof(((Agnode_t *) obj));
	break;
    case AGEDGE:
	env.g = agraphof(aghead(((Agedge_t *) obj)));
	break;
    }
    g = env.g->root;
    env.finfo.size = lp->fontsize;
    env.finfo.name = lp->fontname;
    env.finfo.color = lp->fontcolor;
    env.finfo.flags = 0;
    lbl = parseHTML(lp->text, &rv, &env);
    if (!lbl) {
	/* Parse of label failed; revert to simple text label */
	agxbuf xb;
	unsigned char buf[128];
	agxbinit(&xb, 128, buf);
	lp->html = 0;
	lp->text = strdup(nameOf(obj, &xb));
	switch (lp->charset) {
	case 1:
	    s = latin1ToUTF8(lp->text);
	    break;
	default:		/* UTF8 */
	    s = htmlEntityUTF8(lp->text, env.g);
	    break;
	}
	free(lp->text);
	lp->text = s;
	make_simple_label(GD_gvc(g), lp);
	agxbfree(&xb);
	return rv;
    }
    if (lbl->kind == 1) {
	if (!lbl->u.tbl->data.pencolor && getPenColor(obj))
	    lbl->u.tbl->data.pencolor = strdup(getPenColor(obj));
	rv |= size_html_tbl(g, lbl->u.tbl, NULL, &env);
	wd2 = (lbl->u.tbl->data.box.UR.x) / 2;
	ht2 = (lbl->u.tbl->data.box.UR.y) / 2;
	box = boxfof(-wd2, -ht2, wd2, ht2);
	pos_html_tbl(lbl->u.tbl, box, (1<<0) | (1<<1) | (1<<2) | (1<<3));
	lp->dimen.x = box.UR.x - box.LL.x;
	lp->dimen.y = box.UR.y - box.LL.y;
    } else {
	rv |= size_html_txt(GD_gvc(g), lbl->u.txt, &env);
	wd2 = lbl->u.txt->box.UR.x  / 2;
	ht2 = lbl->u.txt->box.UR.y  / 2;
	box = boxfof(-wd2, -ht2, wd2, ht2);
	lbl->u.txt->box = box;
	lp->dimen.x = box.UR.x - box.LL.x;
	lp->dimen.y = box.UR.y - box.LL.y;
    }
    lp->u.html = lbl;
    /* If the label is a table, replace label text because this may
     * be used for the title and alt fields in image maps.
     */
    if (lbl->kind == 1) {
	free(lp->text);
	lp->text = strdup("<TABLE>");
    }
    return rv;
}

