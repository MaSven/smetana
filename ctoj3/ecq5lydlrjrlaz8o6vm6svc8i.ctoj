public static textlabel_t make_label(__ptr__ obj, CString str, int kind, double fontsize, CString fontname, CString fontcolor) {
    textlabel_t rv = (textlabel_t) Memory.malloc(textlabel_t.class);
    Agraph_s g = null, sg = null;
    Agnode_s n = null;
    Agedge_s e = null;
        CString s = null;
    switch (agobjkind(obj)) {
    case AGRAPH:
UNSUPPORTED("bwd3pkmgxgamoepwkryrpg8p7"); //         sg = (graph_t*)obj;
UNSUPPORTED("8byoc47jwp4w8nf5iybv3m1l7"); // 	g = sg->root;
UNSUPPORTED("6aw91xzjmqvmtdvt1di23af8y"); // 	break;
    case AGNODE:
        n = (Agnode_s)obj.castTo(Agnode_s.class);
	g = agroot(agraphof(n));
	break;
    case AGEDGE:
UNSUPPORTED("1i1ds1rzfhx4xwps1z0wbxiic"); //         e = (edge_t*)obj;
UNSUPPORTED("5xngf7oi7jborlhses6yp7auo"); // 	g = agroot(agraphof(((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node)));
UNSUPPORTED("6aw91xzjmqvmtdvt1di23af8y"); // 	break;
    }
    rv.setPtr("fontname", fontname);
    rv.setPtr("fontcolor", fontcolor);
    rv.setDouble("fontsize", fontsize);
    rv.setInt("charset", g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("charset"));
    if ((kind & (2 << 1))!=0) {
	rv.setPtr("text", str.strdup());
        if ((kind & (1 << 1))!=0) {
	    rv.setBoolean("html", (N(0)));
	}
    }
    else if (kind == (1 << 1)) {
	rv.setPtr("text", str.strdup());
	rv.setBoolean("html", N(0));
	if (make_html_label(obj, rv)!=0) {
	    switch (agobjkind(obj)) {
    case AGRAPH:
	        UNSUPPORTED("agerr(AGPREV, in label of graph %s\n,agnameof(sg));");
		break;
    case AGNODE:
	        UNSUPPORTED("agerr(AGPREV, in label of node %s\n, agnameof(n));");
		break;
    case AGEDGE:
		UNSUPPORTED("agerr(AGPREV, in label of edge %s %s %s\n,");
//		        agnameof(((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node)), agisdirected(g)?"->":"--", agnameof(((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node)));
		break;
	    }
	}
    }
    else {
        //assert(kind == (0 << 1));
	/* This call just processes the graph object based escape sequences. The formatting escape
         * sequences (\n, \l, \r) are processed in make_simple_label. That call also replaces \\ with \.
         */
	rv.setPtr("text", strdup_and_subst_obj0(str, obj, 0));
        switch (rv.getInt("charset")) {
    case 1:
	    UNSUPPORTED("s = latin1ToUTF8(rv->text);");
	    break;
	default: /* UTF8 */
	    s = htmlEntityUTF8(rv.getCString("text"), g);
	    break;
	}
        Memory.free(rv.getPtr("text"));
        rv.setPtr("text", s);
	make_simple_label((GVC_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("gvc"), rv);
    }
    return rv;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
textlabel_t *make_label(void *obj, char *str, int kind, double fontsize, char *fontname, char *fontcolor)
{
    textlabel_t *rv = (textlabel_t*)zmalloc(sizeof(textlabel_t));
    graph_t *g = NULL, *sg = NULL;
    node_t *n = NULL;
    edge_t *e = NULL;
        char *s;
    switch (agobjkind(obj)) {
    case AGRAPH:
        sg = (graph_t*)obj;
	g = sg->root;
	break;
    case AGNODE:
        n = (node_t*)obj;
	g = agroot(agraphof(n));
	break;
    case AGEDGE:
        e = (edge_t*)obj;
	g = agroot(agraphof(aghead(e)));
	break;
    }
    rv->fontname = fontname;
    rv->fontcolor = fontcolor;
    rv->fontsize = fontsize;
    rv->charset = GD_charset(g);
    if (kind & (2 << 1)) {
	rv->text = strdup(str);
        if (kind & (1 << 1)) {
	    rv->html = NOT(0);
	}
    }
    else if (kind == (1 << 1)) {
	rv->text = strdup(str);
	rv->html = NOT(0);
	if (make_html_label(obj, rv)) {
	    switch (agobjkind(obj)) {
	    case AGRAPH:
	        agerr(AGPREV, "in label of graph %s\n",agnameof(sg));
		break;
	    case AGNODE:
	        agerr(AGPREV, "in label of node %s\n", agnameof(n));
		break;
	    case AGEDGE:
		agerr(AGPREV, "in label of edge %s %s %s\n",
		        agnameof(agtail(e)), agisdirected(g)?"->":"--", agnameof(aghead(e)));
		break;
	    }
	}
    }
    else {
        assert(kind == (0 << 1));
	/* This call just processes the graph object based escape sequences. The formatting escape
         * sequences (\n, \l, \r) are processed in make_simple_label. That call also replaces \\ with \.
         */
	rv->text = strdup_and_subst_obj0(str, obj, 0);
        switch (rv->charset) {
	case 1:
	    s = latin1ToUTF8(rv->text);
	    break;
	default: /* UTF8 */
	    s = htmlEntityUTF8(rv->text, g);
	    break;
	}
        free(rv->text);
        rv->text = s;
	make_simple_label(GD_gvc(g), rv);
    }
    return rv;
}

