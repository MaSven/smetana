public static void update_bb_bz(__ptr__ bb, __array_of_struct__ cp) {
    /* if any control point of the segment is outside the bounding box */
    if (cp.plus(0).getDouble("x") > bb.getStruct("UR").getDouble("x") || cp.plus(0).getDouble("x") < bb.getStruct("LL").getDouble("x") ||
        cp.plus(0).getDouble("y") > bb.getStruct("UR").getDouble("y") || cp.plus(0).getDouble("y") < bb.getStruct("LL").getDouble("y") ||
        cp.plus(1).getDouble("x") > bb.getStruct("UR").getDouble("x") || cp.plus(1).getDouble("x") < bb.getStruct("LL").getDouble("x") ||
        cp.plus(1).getDouble("y") > bb.getStruct("UR").getDouble("y") || cp.plus(1).getDouble("y") < bb.getStruct("LL").getDouble("y") ||
        cp.plus(2).getDouble("x") > bb.getStruct("UR").getDouble("x") || cp.plus(2).getDouble("x") < bb.getStruct("LL").getDouble("x") ||
        cp.plus(2).getDouble("y") > bb.getStruct("UR").getDouble("y") || cp.plus(2).getDouble("y") < bb.getStruct("LL").getDouble("y") ||
        cp.plus(3).getDouble("x") > bb.getStruct("UR").getDouble("x") || cp.plus(3).getDouble("x") < bb.getStruct("LL").getDouble("x") ||
        cp.plus(3).getDouble("y") > bb.getStruct("UR").getDouble("y") || cp.plus(3).getDouble("y") < bb.getStruct("LL").getDouble("y")) {
        /* if the segment is sufficiently refined */
        if (check_control_points(cp.asPtr())) {        
            int i;
            /* expand the bounding box */
            for (i = 0; i < 4; i++) {
                if (cp.plus(i).getDouble("x") > bb.getStruct("UR").getDouble("x"))
                    bb.getStruct("UR").setDouble("x", cp.plus(i).getDouble("x"));
                else if (cp.plus(i).getDouble("x") < bb.getStruct("LL").getDouble("x"))
                    bb.getStruct("LL").setDouble("x", cp.plus(i).getDouble("x"));
                if (cp.plus(i).getDouble("y") > bb.getStruct("UR").getDouble("y"))
                    bb.getStruct("UR").setDouble("y", cp.plus(i).getDouble("y"));
                else if (cp.plus(i).getDouble("y") < bb.getStruct("LL").getDouble("y"))
                    bb.getStruct("LL").setDouble("y", cp.plus(i).getDouble("y"));
            }
        }
        else { /* else refine the segment */
		    final __array_of_struct__ left = __array_of_struct__.malloc(pointf.class, 4);
		    final __array_of_struct__ right = __array_of_struct__.malloc(pointf.class, 4);
            Bezier (cp, 3, 0.5, left.asPtr(), right.asPtr());
            update_bb_bz(bb, left);
            update_bb_bz(bb, right);
        }
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void update_bb_bz(boxf *bb, pointf *cp)
{
    /* if any control point of the segment is outside the bounding box */
    if (cp[0].x > bb->UR.x || cp[0].x < bb->LL.x ||
        cp[0].y > bb->UR.y || cp[0].y < bb->LL.y ||
        cp[1].x > bb->UR.x || cp[1].x < bb->LL.x ||
        cp[1].y > bb->UR.y || cp[1].y < bb->LL.y ||
        cp[2].x > bb->UR.x || cp[2].x < bb->LL.x ||
        cp[2].y > bb->UR.y || cp[2].y < bb->LL.y ||
        cp[3].x > bb->UR.x || cp[3].x < bb->LL.x ||
        cp[3].y > bb->UR.y || cp[3].y < bb->LL.y) {
        /* if the segment is sufficiently refined */
        if (check_control_points(cp)) {        
            int i;
            /* expand the bounding box */
            for (i = 0; i < 4; i++) {
                if (cp[i].x > bb->UR.x)
                    bb->UR.x = cp[i].x;
                else if (cp[i].x < bb->LL.x)
                    bb->LL.x = cp[i].x;
                if (cp[i].y > bb->UR.y)
                    bb->UR.y = cp[i].y;
                else if (cp[i].y < bb->LL.y)
                    bb->LL.y = cp[i].y;
            }
        }
        else { /* else refine the segment */
            pointf left[4], right[4];
            Bezier (cp, 3, 0.5, left, right);
            update_bb_bz(bb, left);
            update_bb_bz(bb, right);
        }
    }
}

