public static void update_bb_bz(__ptr__ bb, __array_of_struct__ cp) {
    /* if any control point of the segment is outside the bounding box */
    if (cp.plus(0).getDouble("x") > bb.getStruct("UR").getDouble("x") || cp.plus(0).getDouble("x") < bb.getStruct("LL").getDouble("x") ||
        cp.plus(0).getDouble("y") > bb.getStruct("UR").getDouble("y") || cp.plus(0).getDouble("y") < bb.getStruct("LL").getDouble("y") ||
        cp.plus(1).getDouble("x") > bb.getStruct("UR").getDouble("x") || cp.plus(1).getDouble("x") < bb.getStruct("LL").getDouble("x") ||
        cp.plus(1).getDouble("y") > bb.getStruct("UR").getDouble("y") || cp.plus(1).getDouble("y") < bb.getStruct("LL").getDouble("y") ||
        cp.plus(2).getDouble("x") > bb.getStruct("UR").getDouble("x") || cp.plus(2).getDouble("x") < bb.getStruct("LL").getDouble("x") ||
        cp.plus(2).getDouble("y") > bb.getStruct("UR").getDouble("y") || cp.plus(2).getDouble("y") < bb.getStruct("LL").getDouble("y") ||
        cp.plus(3).getDouble("x") > bb.getStruct("UR").getDouble("x") || cp.plus(3).getDouble("x") < bb.getStruct("LL").getDouble("x") ||
        cp.plus(3).getDouble("y") > bb.getStruct("UR").getDouble("y") || cp.plus(3).getDouble("y") < bb.getStruct("LL").getDouble("y")) {
        /* if the segment is sufficiently refined */
UNSUPPORTED("9i1xs40w5oehttgosk5zxkts7"); //         if (check_control_points(cp)) {        
UNSUPPORTED("2ito24pnyaq3m8u2nlk39ke68"); //             int i;
UNSUPPORTED("8pz3vmrxwml8d89fexfzfu1wn"); //             /* expand the bounding box */
UNSUPPORTED("dgfun7pt7hn6ghd4s0wi0o5ut"); //             for (i = 0; i < 4; i++) {
UNSUPPORTED("a6ku1nbag4e4x0ngj2mvnuwp9"); //                 if (cp[i].x > bb->UR.x)
UNSUPPORTED("dxx7t17g1fd2v47gkoyfi0gr"); //                     bb->UR.x = cp[i].x;
UNSUPPORTED("1178i8jimi4sw1hxfqhydut6m"); //                 else if (cp[i].x < bb->LL.x)
UNSUPPORTED("703vu34afq9zwpj7x6ujf6p1b"); //                     bb->LL.x = cp[i].x;
UNSUPPORTED("25vexwuf5hmw8wchiuoelvlip"); //                 if (cp[i].y > bb->UR.y)
UNSUPPORTED("a8dq6om4dj0l7enuiptq1oahb"); //                     bb->UR.y = cp[i].y;
UNSUPPORTED("a4czwif32r6z27zic916566bh"); //                 else if (cp[i].y < bb->LL.y)
UNSUPPORTED("as0cgop5ty42laetnwj5rhwa7"); //                     bb->LL.y = cp[i].y;
UNSUPPORTED("7g94ubxa48a1yi3mf9v521b7c"); //             }
UNSUPPORTED("4mhlpjofolwivhm0tl8cxznly"); //         }
UNSUPPORTED("4fo1iyyel4l87r0cmfd0ixgvu"); //         else { /* else refine the segment */
UNSUPPORTED("4jszlr7j4l4a675pscen91y63"); //             pointf left[4], right[4];
UNSUPPORTED("biazew32zzs01d3jsasn80xxz"); //             Bezier (cp, 3, 0.5, left, right);
UNSUPPORTED("bn3c6hwhvrgywu0kgmqv88hx1"); //             update_bb_bz(bb, left);
UNSUPPORTED("2j3wkcwvfpkgfay82xhuybadg"); //             update_bb_bz(bb, right);
UNSUPPORTED("4mhlpjofolwivhm0tl8cxznly"); //         }
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void update_bb_bz(boxf *bb, pointf *cp)
{
    /* if any control point of the segment is outside the bounding box */
    if (cp[0].x > bb->UR.x || cp[0].x < bb->LL.x ||
        cp[0].y > bb->UR.y || cp[0].y < bb->LL.y ||
        cp[1].x > bb->UR.x || cp[1].x < bb->LL.x ||
        cp[1].y > bb->UR.y || cp[1].y < bb->LL.y ||
        cp[2].x > bb->UR.x || cp[2].x < bb->LL.x ||
        cp[2].y > bb->UR.y || cp[2].y < bb->LL.y ||
        cp[3].x > bb->UR.x || cp[3].x < bb->LL.x ||
        cp[3].y > bb->UR.y || cp[3].y < bb->LL.y) {
        /* if the segment is sufficiently refined */
        if (check_control_points(cp)) {        
            int i;
            /* expand the bounding box */
            for (i = 0; i < 4; i++) {
                if (cp[i].x > bb->UR.x)
                    bb->UR.x = cp[i].x;
                else if (cp[i].x < bb->LL.x)
                    bb->LL.x = cp[i].x;
                if (cp[i].y > bb->UR.y)
                    bb->UR.y = cp[i].y;
                else if (cp[i].y < bb->LL.y)
                    bb->LL.y = cp[i].y;
            }
        }
        else { /* else refine the segment */
            pointf left[4], right[4];
            Bezier (cp, 3, 0.5, left, right);
            update_bb_bz(bb, left);
            update_bb_bz(bb, right);
        }
    }
}

