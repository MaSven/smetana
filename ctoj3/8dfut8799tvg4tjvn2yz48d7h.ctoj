public static int dtrestore(_dt_s dt, _dtlink_s list) {
	_dtlink_s	t;
	//Dtlink_t	**s, **ends;
	int		type;
	Dtsearch_f	searchf = (Dtsearch_f) dt.getPtr("meth").getPtr("searchf");
	type = dt.getPtr("data").getInt("type")&010000;
	if(N(list)) /* restoring a flattened dictionary */
	{	if(N(type))
			return -1;
		list = (_dtlink_s) dt.getPtr("data").getPtr("here");
	}
	else	/* restoring an extracted list of elements */
	{	if(dt.getPtr("data").getInt("size") != 0)
			return -1;
		type = 0;
	}
	dt.getPtr("data").setInt("type", dt.getPtr("data").getInt("type") & ~010000);
	if((dt.getPtr("data").getInt("type")&(0000001|0000002))!=0)
	{	//dt->data->here = ((Dtlink_t*)0);
UNSUPPORTED("4xawc48hce5sov89n8h4j7xw0"); // 		if(type) /* restoring a flattened dictionary */
UNSUPPORTED("3yrjmgus9a9415ocrrtj1e733"); // 		{	for(ends = (s = dt->data->hh._htab) + dt->data->ntab; s < ends; ++s)
UNSUPPORTED("7s6h8lg0p1wwil85e1p2msogy"); // 			{	if((t = *s) )
UNSUPPORTED("2j3e40zcb5znwl73hbk12t6va"); // 				{	*s = list;
UNSUPPORTED("ef469bao0q1pw0jwv7pmoly31"); // 					list = t->right;
UNSUPPORTED("29gliugc08l5pj89nfqoctwqi"); // 					t->right = ((Dtlink_t*)0);
UNSUPPORTED("cysnuxd51taci3hbg5lifz8ce"); // 				}
UNSUPPORTED("3to5h0rvqxdeqs38mhv47mm3o"); // 			}
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("dri3t8bbbtcxexw436q0kqnxd"); // 		else	/* restoring an extracted list of elements */
UNSUPPORTED("efiynrcqevfta9kp0bfbujmn5"); // 		{	dt->data->size = 0;
UNSUPPORTED("afqkqg6k8jxzgjyj7tb6kw1fc"); // 			while(list)
UNSUPPORTED("4rgxhjb5r159n4fh7vilshms9"); // 			{	t = list->right;
UNSUPPORTED("6fq6k0xv0ofue3nmsm3tcbmxc"); // 				(*searchf)(dt,(void*)list,0000040);
UNSUPPORTED("8dsqgg8k8zwg5ae8ltd5xs9yc"); // 				list = t;
UNSUPPORTED("3to5h0rvqxdeqs38mhv47mm3o"); // 			}
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
	}
	else
	{	if((dt.getPtr("data").getInt("type")&(0000004|0000010))!=0)
			dt.getPtr("data").setPtr("here", list);
		else /*if(dt->data->type&(DT_LIST|DT_STACK|DT_QUEUE))*/
{UNSUPPORTED("79wu0m7edfdq02msgoqkzb32"); // 		{	dt->data->here = ((Dtlink_t*)0);
UNSUPPORTED("c8q10nh3f6o4rjxtacmbgjxqj"); // 			dt->data->hh._head = list;
		}
		if(N(type))
			dt.getPtr("data").setInt("size", -1);
	}
	return 0;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
int dtrestore(register Dt_t* dt, register Dtlink_t* list)
{
	register Dtlink_t	*t, **s, **ends;
	register int		type;
	register Dtsearch_f	searchf = dt->meth->searchf;
	type = dt->data->type&010000;
	if(!list) /* restoring a flattened dictionary */
	{	if(!type)
			return -1;
		list = dt->data->here;
	}
	else	/* restoring an extracted list of elements */
	{	if(dt->data->size != 0)
			return -1;
		type = 0;
	}
	dt->data->type &= ~010000;
	if(dt->data->type&(0000001|0000002))
	{	dt->data->here = ((Dtlink_t*)0);
		if(type) /* restoring a flattened dictionary */
		{	for(ends = (s = dt->data->hh._htab) + dt->data->ntab; s < ends; ++s)
			{	if((t = *s) )
				{	*s = list;
					list = t->right;
					t->right = ((Dtlink_t*)0);
				}
			}
		}
		else	/* restoring an extracted list of elements */
		{	dt->data->size = 0;
			while(list)
			{	t = list->right;
				(*searchf)(dt,(void*)list,0000040);
				list = t;
			}
		}
	}
	else
	{	if(dt->data->type&(0000004|0000010))
			dt->data->here = list;
		else /*if(dt->data->type&(DT_LIST|DT_STACK|DT_QUEUE))*/
		{	dt->data->here = ((Dtlink_t*)0);
			dt->data->hh._head = list;
		}
		if(!type)
			dt->data->size = -1;
	}
	return 0;
}

