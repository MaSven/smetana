public static _dtdisc_s dtdisc(_dt_s dt, _dtdisc_s disc, int type) {
	Dtsearch_f	searchf;
	_dtlink_s	r, t;
	CString	k;
	_dtdisc_s	old;
	if(N(old = (_dtdisc_s) dt.getPtr("disc")) )	/* initialization call from dtopen() */
	{	dt.setPtr("disc", disc);
		if(N(dt.setPtr("memoryf", disc.getPtr("memoryf") )))
			dt.setPtr("memoryf", function(dtdisc__c.class, "dtmemory"));
		return disc;
	}
	if(N(disc))	/* only want to know current discipline */
		return old;
UNSUPPORTED("6htlkpaqff61iwmsg1be47uci"); // 	searchf = dt->meth->searchf;
UNSUPPORTED("ckjxpmega2z5oju8xk72wsy0q"); // 	((dt->data->type&010000) ? dtrestore(dt,((Dtlink_t*)0)) : 0);
UNSUPPORTED("34klfi71a7k7iqdrvezqetdjg"); // 	if(old->eventf && (*old->eventf)(dt,3,(void*)disc,old) < 0)
UNSUPPORTED("1cft3x8zrdzefdb93v3f1tuo7"); // 		return ((Dtdisc_t*)0);
UNSUPPORTED("4e4gm32ypcbtlzkym7sh79rrd"); // 	dt->disc = disc;
UNSUPPORTED("6nr96is5y2ct55pupgycwbjmt"); // 	if(!(dt->memoryf = disc->memoryf) )
UNSUPPORTED("1prh3v6ko1v9w39hgk7wiknjc"); // 		dt->memoryf = dtmemory;
UNSUPPORTED("epetks7tchxd027a5fogh5s8y"); // 	if(dt->data->type&(0000040|0000100|0000020))
UNSUPPORTED("e2tzh95k1lvjl6wbtpwizam8q"); // 		goto done;
UNSUPPORTED("9z4k8xq4t2p909fvi8gusmmww"); // 	else if(dt->data->type&0000002)
UNSUPPORTED("3q5nyguq8mgdfwmm0yrzq2br8"); // 	{	if(type&0000002)
UNSUPPORTED("93q6zqzlgfz2qd0yl6koyw99c"); // 			goto done;
UNSUPPORTED("6d1rfacssm8768oz9fu5o66t8"); // 		else	goto dt_renew;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("eu35368wm4jf6yedwkayoycx4"); // 	else if(dt->data->type&(0000001|0000002))
UNSUPPORTED("8xmm1djjds55s86jodixkp72u"); // 	{	if((type&0000002) && (type&0000001))
UNSUPPORTED("93q6zqzlgfz2qd0yl6koyw99c"); // 			goto done;
UNSUPPORTED("6d1rfacssm8768oz9fu5o66t8"); // 		else	goto dt_renew;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("1ww5saiqcss2tdx5nts4rxpou"); // 	else /*if(dt->data->type&(DT_OSET|DT_OBAG))*/
UNSUPPORTED("4582pmh67cgbsphrw05tf0hmm"); // 	{	if(type&0000001)
UNSUPPORTED("93q6zqzlgfz2qd0yl6koyw99c"); // 			goto done;
UNSUPPORTED("8njey2jaa662w29s8zcqbjln5"); // 	dt_renew:
UNSUPPORTED("assw6t0chu41lwws2ysqi4fgi"); // 		r = dtflatten(dt);
UNSUPPORTED("1rry7yjzos90pgbf3li2qpa18"); // 		dt->data->type &= ~010000;
UNSUPPORTED("6vkn7padspfbtju9g5b65b34w"); // 		dt->data->here = ((Dtlink_t*)0);
UNSUPPORTED("2jfi30wa60xp7iqlk9yyf4k5j"); // 		dt->data->size = 0;
UNSUPPORTED("1i3oayy7gy36lar9kfhuq6rur"); // 		if(dt->data->type&(0000001|0000002))
UNSUPPORTED("ay51d19gimt3gpqjact2t0ypm"); // 		{	register Dtlink_t	**s, **ends;
UNSUPPORTED("5p6g054kk7snvpwuxudelseir"); // 			ends = (s = dt->data->hh._htab) + dt->data->ntab;
UNSUPPORTED("3zu1r6orkvmsvbjbzqqx9wedr"); // 			while(s < ends)
UNSUPPORTED("9wq8eycc78fg8sqi6bjce4q7f"); // 				*s++ = ((Dtlink_t*)0);
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("3rfhc462a0qx53yecw933hkk8"); // 		/* reinsert them */
UNSUPPORTED("ctmfjzioo5q7mzsmb6rf9mxoy"); // 		while(r)
UNSUPPORTED("9qxb0eqp3ujnnuum1bggqarjh"); // 		{	t = r->right;
UNSUPPORTED("ddltpk94i08fyy6x03ozyc7s1"); // 			if(!(type&0000002))	/* new hash value */
UNSUPPORTED("8mj2vd7idro90tjnvl6b9trnc"); // 			{	k = (char*)(disc->link < 0 ? ((Dthold_t*)(r))->obj : (void*)((char*)(r) - disc->link) );
UNSUPPORTED("1dvo2602az1wcigxx20czskv9"); // 				k = (void*)(disc->size < 0 ? *((char**)((char*)((void*)k)+disc->key)) : ((char*)((void*)k)+disc->key));
UNSUPPORTED("269t5qi8m2ujfjvmbqvyjvr1s"); // 				r->hl._hash = (disc->hashf ? (*disc->hashf)(dt,k,disc) : dtstrhash(0,k,disc->size) );
UNSUPPORTED("3to5h0rvqxdeqs38mhv47mm3o"); // 			}
UNSUPPORTED("2e2tx3ch32oxo5y01bflgbf2h"); // 			(void)(*searchf)(dt,(void*)r,0000040);
UNSUPPORTED("8tob14cb9u9q0mnud0wovaioi"); // 			r = t;
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("cerydbb7i6l7c4pgeygvwoqk2"); // done:
UNSUPPORTED("bi0p581nen18ypj0ey48s6ete"); // 	return old;
UNSUPPORTED("c24nfmv9i7o5eoqaymbibp7m7"); // }

throw new UnsupportedOperationException();
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Dtdisc_t* dtdisc(Dt_t* dt, Dtdisc_t* disc, int type)
{
	register Dtsearch_f	searchf;
	register Dtlink_t	*r, *t;
	register char*	k;
	register Dtdisc_t*	old;
	if(!(old = dt->disc) )	/* initialization call from dtopen() */
	{	dt->disc = disc;
		if(!(dt->memoryf = disc->memoryf) )
			dt->memoryf = dtmemory;
		return disc;
	}
	if(!disc)	/* only want to know current discipline */
		return old;
	searchf = dt->meth->searchf;
	((dt->data->type&010000) ? dtrestore(dt,((Dtlink_t*)0)) : 0);
	if(old->eventf && (*old->eventf)(dt,3,(void*)disc,old) < 0)
		return ((Dtdisc_t*)0);
	dt->disc = disc;
	if(!(dt->memoryf = disc->memoryf) )
		dt->memoryf = dtmemory;
	if(dt->data->type&(0000040|0000100|0000020))
		goto done;
	else if(dt->data->type&0000002)
	{	if(type&0000002)
			goto done;
		else	goto dt_renew;
	}
	else if(dt->data->type&(0000001|0000002))
	{	if((type&0000002) && (type&0000001))
			goto done;
		else	goto dt_renew;
	}
	else /*if(dt->data->type&(DT_OSET|DT_OBAG))*/
	{	if(type&0000001)
			goto done;
	dt_renew:
		r = dtflatten(dt);
		dt->data->type &= ~010000;
		dt->data->here = ((Dtlink_t*)0);
		dt->data->size = 0;
		if(dt->data->type&(0000001|0000002))
		{	register Dtlink_t	**s, **ends;
			ends = (s = dt->data->hh._htab) + dt->data->ntab;
			while(s < ends)
				*s++ = ((Dtlink_t*)0);
		}
		/* reinsert them */
		while(r)
		{	t = r->right;
			if(!(type&0000002))	/* new hash value */
			{	k = (char*)(disc->link < 0 ? ((Dthold_t*)(r))->obj : (void*)((char*)(r) - disc->link) );
				k = (void*)(disc->size < 0 ? *((char**)((char*)((void*)k)+disc->key)) : ((char*)((void*)k)+disc->key));
				r->hl._hash = (disc->hashf ? (*disc->hashf)(dt,k,disc) : dtstrhash(0,k,disc->size) );
			}
			(void)(*searchf)(dt,(void*)r,0000040);
			r = t;
		}
	}
done:
	return old;
}

