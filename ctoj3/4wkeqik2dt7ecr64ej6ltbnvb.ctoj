private static __struct__<textfont_t> tf = __struct__.from(textfont_t.class);
public static void storeline(GVC_s gvc, textlabel_t lp, CString line, char terminator) {
    final __struct__<pointf> size = __struct__.from(pointf.class);
    __ptr__ span = null;
    int oldsz = lp.getInt("u.txt.nspans") + 1;
    lp.setPtr("u.txt.span", ZALLOC(oldsz + 1, lp.getPtr("u.txt.span"), textspan_t.class, oldsz));
    span = lp.getPtr("u.txt.span").plus(lp.getInt("u.txt.nspans"));
    span.setPtr("str", line);
    span.setInt("just", terminator);
    if (line!=null && line.charAt(0)!='\0') {
	tf.setPtr("name", lp.getPtr("fontname"));
	tf.setDouble("size", lp.getDouble("fontsize"));
	
	// WE CHEAT
	if (gvc.getPtr("textfont_dt")==null) {
	System.err.println("WE CHEAT");
	size.setDouble("x", 0.0);
	size.setDouble("y", (int)(lp.getDouble("fontsize") * 1.20));
	span.getStruct("size").setDouble("y", (int)(lp.getDouble("fontsize") * 1.20));
	}
	else {
	// END CHEAT
	
	span.setPtr("font", 
		(__ptr__) gvc.getPtr("textfont_dt").castTo(_dt_s.class).call("searchf", 
		  gvc.getPtr("textfont_dt"), tf.amp(), 0000001));
    size.____(textspan_size(gvc, span));
    } // CHEAT
    }
    else {
	size.setDouble("x", 0.0);
	size.setDouble("y", (int)(lp.getDouble("fontsize") * 1.20));
	span.getStruct("size").setDouble("y", (int)(lp.getDouble("fontsize") * 1.20));
    }
    lp.setInt("u.txt.nspans", lp.getInt("u.txt.nspans") + 1);
    /* width = max line width */
    lp.getStruct("dimen").setDouble("x", MAX(lp.getStruct("dimen").getDouble("x"), size.getDouble("x")));
    /* accumulate height */
    lp.getStruct("dimen").setDouble("y", lp.getStruct("dimen").getDouble("y") + size.getDouble("y"));
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void storeline(GVC_t *gvc, textlabel_t *lp, char *line, char terminator)
{
    pointf size;
    textspan_t *span;
    static textfont_t tf;
    int oldsz = lp->u.txt.nspans + 1;
    lp->u.txt.span = ZALLOC(oldsz + 1, lp->u.txt.span, textspan_t, oldsz);
    span = &(lp->u.txt.span[lp->u.txt.nspans]);
    span->str = line;
    span->just = terminator;
    if (line && line[0]) {
	tf.name = lp->fontname;
	tf.size = lp->fontsize;
	span->font = (*(((Dt_t*)(gvc->textfont_dt))->searchf))((gvc->textfont_dt),(void*)(&tf),0000001);
        size = textspan_size(gvc, span);
    }
    else {
	size.x = 0.0;
	span->size.y = size.y = (int)(lp->fontsize * 1.20);
    }
    lp->u.txt.nspans++;
    /* width = max line width */
    lp->dimen.x = MAX(lp->dimen.x, size.x);
    /* accumulate height */
    lp->dimen.y += size.y;
}

