public static boolean flat_mval(Agnode_s n) {
    int i;
    Agedge_s e;
    __ptr__ fl;
    Agnode_s nn;
    if (ND_flat_in(n).getInt("size") > 0) {
	fl = ND_flat_in(n).getPtr("list");
	nn = agtail(fl.plus(0).getPtr());
	for (i = 1; (e = (Agedge_s) fl.plus(i).getPtr())!=null; i++)
	    if (ND_order(agtail(e)) > ND_order(nn))
		nn = agtail(e);
	if (ND_mval(nn) >= 0) {
	    ND_mval(n, ND_mval(nn) + 1);
	    return false;
	}
    } else if (ND_flat_out(n).getInt("size") > 0) {
	fl = ND_flat_out(n).getPtr("list");
	nn = aghead(fl.plus(0).getPtr());
	for (i = 1; (e = (Agedge_s) fl.plus(i).getPtr())!=null; i++)
	    if (ND_order(aghead(e)) < ND_order(nn))
		nn = aghead(e);
	if (ND_mval(nn) > 0) {
	    ND_mval(n, ND_mval(nn) - 1);
	    return false;
	}
    }
    return NOT(false);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int flat_mval(node_t * n)
{
    int i;
    edge_t *e, **fl;
    node_t *nn;
    if (ND_flat_in(n).size > 0) {
	fl = ND_flat_in(n).list;
	nn = agtail(fl[0]);
	for (i = 1; (e = fl[i]); i++)
	    if (ND_order(agtail(e)) > ND_order(nn))
		nn = agtail(e);
	if (ND_mval(nn) >= 0) {
	    ND_mval(n) = ND_mval(nn) + 1;
	    return 0;
	}
    } else if (ND_flat_out(n).size > 0) {
	fl = ND_flat_out(n).list;
	nn = aghead(fl[0]);
	for (i = 1; (e = fl[i]); i++)
	    if (ND_order(aghead(e)) < ND_order(nn))
		nn = aghead(e);
	if (ND_mval(nn) > 0) {
	    ND_mval(n) = ND_mval(nn) - 1;
	    return 0;
	}
    }
    return NOT(0);
}

