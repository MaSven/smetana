public static void allocate_ranks(Agraph_s g) {
	// REVIEW 17/01/2016
    int r, low, high;
    __ptr__ cn;
    Agnode_s n;
    Agedge_s e;
	cn = zmalloc(size_t_array_of_integer(g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("maxrank") + 2));
	/* must be 0 based, not GD_minrank */
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n)) {
	cn.setBracketAsInt(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
	  , 1+cn.getBracketAsInt(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")));
	for (e = agfstout(g, n); e!=null; e = agnxtout(g, e)) {
	    low = 
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1))
		.getPtr("node").castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank");
	    high = 
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1))
		.getPtr("node").castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank");
	    if (low > high) {
		int t = low;
		low = high;
		high = t;
	    }
	    for (r = low + 1; r < high; r++)
		cn.setBracketAsInt(r, 1+cn.getBracketAsInt(r));
	}
    }
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setPtr("rank", 
	  zmalloc(sizeof(rank_t.class, g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("maxrank") + 2) ));
    for (
	r = g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("minrank")
	; r <= g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("maxrank")
	; r++) {
	int tmp1 = cn.getBracketAsInt(r);
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getArrayOfPtr("rank", r).setInt("n", 
	  tmp1);
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getArrayOfPtr("rank", r).setInt("an", 
	  tmp1);
	__ptr__ tmp = zmalloc(sizeof_starstar(Agnode_s.class, cn.getBracketAsInt(r) + 1));
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getArrayOfPtr("rank", r).setPtr("v", tmp);
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getArrayOfPtr("rank", r).setPtr("av", tmp); 
    }
    Memory.free(cn);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void allocate_ranks(graph_t * g)
{
    int r, low, high, *cn;
    node_t *n;
    edge_t *e;
    cn = (int*)zmalloc(((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->maxrank) + 2)*sizeof(int));	/* must be 0 based, not GD_minrank */
    for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	cn[(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->rank)]++;
	for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
	    low = (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank);
	    high = (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank);
	    if (low > high) {
		int t = low;
		low = high;
		high = t;
	    }
	    for (r = low + 1; r < high; r++)
		cn[r]++;
	}
    }
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank) = (rank_t*)zmalloc(((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->maxrank) + 2)*sizeof(rank_t));
    for (r = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->minrank); r <= (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->maxrank); r++) {
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].an = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].n = cn[r];
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].av = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v = (node_t **)zmalloc((cn[r] + 1)*sizeof(node_t *));
    }
    free(cn);
}

