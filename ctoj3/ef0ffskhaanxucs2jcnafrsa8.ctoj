public static int init_graph(Agraph_s g) {
    int i, feasible;
    Agnode_s n;
    Agedge_s e;
    G = g;
    N_nodes = N_edges = S_i = 0;
    for (
	n = (Agnode_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
	; n!=null;
	n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next")
	) {
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("mark", 0);
	N_nodes++;
	for (i = 0; 
	(e = (Agedge_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("out").getArrayOfPtr("list", i))!=null; 
	i++)
	    N_edges++;
    }
    Tree_node.setPtr("list",
	  Tree_node.getPtr("list")!=null
	  ? 
	  grealloc(Tree_node.getPtr("list") , sizeof(Agnode_s.class, N_nodes))
	  :
	  gmalloc(sizeof(Agnode_s.class, N_nodes))
	);
    Tree_node.setInt("size", 0);
    Tree_edge.setPtr("list",
	  Tree_edge.getPtr("list")!=null
	  ? 
	  grealloc(Tree_edge.getPtr("list") , sizeof(Agedge_s.class, N_nodes))
	  :
	  gmalloc(sizeof(Agedge_s.class, N_nodes))
	);
    Tree_edge.setInt("size", 0);
    feasible = 1;
    for (n = (Agnode_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
	; n!=null
	; n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next")
	) {
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("priority", 0);
	for (i = 0;
	(e = (Agedge_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("in").getArrayOfPtr("list", i))!=null
	; i++) {
	    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("priority", 
	      n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("priority")+1);
	    e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).setInt("cutvalue", 0);
	    e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).setInt("tree_index", -1);
	    if (feasible!=0
		&&
		(
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node").castTo(Agobj_s.class)
		.getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
		- 
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node").castTo(Agobj_s.class)
			.getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")) 
		< e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getInt("minlen")
		)
		feasible = 0;
	}
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_in").setPtr("list", 
      zmalloc(sizeof(Agedge_s.class, i + 1)));
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_in").setInt("size", 0);
	for (i = 0; 
	(e = (Agedge_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("out").getArrayOfPtr("list", i))!=null
	; i++);
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_out").setPtr("list", 
	  zmalloc(sizeof(Agedge_s.class, i+1)));
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_out").setInt("size", 0);
    }
    return feasible;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int init_graph(graph_t * g)
{
    int i, feasible;
    node_t *n;
    edge_t *e;
    G = g;
    N_nodes = N_edges = S_i = 0;
    for (n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next)) {
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->mark) = 0;
	N_nodes++;
	for (i = 0; (e = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->out).list[i]); i++)
	    N_edges++;
    }
    Tree_node.list = (Tree_node.list? (node_t **)grealloc(Tree_node.list,(N_nodes)*sizeof(node_t *)):(node_t **)gmalloc((N_nodes)*sizeof(node_t *)));
    Tree_node.size = 0;
    Tree_edge.list = (Tree_edge.list? (edge_t **)grealloc(Tree_edge.list,(N_nodes)*sizeof(edge_t *)):(edge_t **)gmalloc((N_nodes)*sizeof(edge_t *)));
    Tree_edge.size = 0;
    feasible = (!(0));
    for (n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next)) {
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->priority) = 0;
	for (i = 0; (e = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->in).list[i]); i++) {
	    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->priority)++;
	    (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->cutvalue) = 0;
	    (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->tree_index) = -1;
	    if (feasible
		&& ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank) - (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank) < (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen)))
		feasible = 0;
	}
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_in).list = (edge_t **)zmalloc((i + 1)*sizeof(edge_t *));
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_in).size = 0;
	for (i = 0; (e = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->out).list[i]); i++);
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_out).list = (edge_t **)zmalloc((i + 1)*sizeof(edge_t *));
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_out).size = 0;
    }
    return feasible;
}

