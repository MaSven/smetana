public static void acyclic_(Agraph_s g) {
    int c;
    Agnode_s n;
    for (c = 0; c < g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").getInt("size"); c++) {
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setPtr("nlist", 
	  g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").getArrayOfPtr("list", c));
	for (
	n =
	(Agnode_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
	; n!=null
	;
	n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next")
	)
	    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("mark", 0);
	for (
	n =
	(Agnode_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
	; n!=null
	;
	n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next")
	)
	    dfs(n);
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void acyclic(graph_t * g)
{
    int c;
    node_t *n;
    for (c = 0; c < (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).size; c++) {
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist) = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list[c];
	for (n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next))
	    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->mark) = 0;
	for (n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next))
	    dfs(n);
    }
}

