public static int tight_tree() {
    int i;
    Agnode_s n;
    for (n = (Agnode_s) G.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
    ; n!=null;
    n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next")) {
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("mark", 0);
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_out").setArray("list", 0, null);
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_out").setInt("size", 0);
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_in").setArray("list", 0, null);
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("tree_in").setInt("size", 0);
    }
    for (i = 0; i < Tree_edge.getInt("size"); i++)
UNSUPPORTED("ah9l0a5q048qk1tom2pbu1az9"); // 	(((Agedgeinfo_t*)(((Agobj_t*)(Tree_edge.list[i]))->data))->tree_index) = -1;
    Tree_node.setInt("size", 0);
    Tree_edge.setInt("size", 0);
    for (n = (Agnode_s) G.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
    ; n!=null && (Tree_edge.getInt("size") == 0);
    n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next"))
	treesearch(n);
    return Tree_node.getInt("size");
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int tight_tree(void)
{
    int i;
    node_t *n;
    for (n = (((Agraphinfo_t*)(((Agobj_t*)(G))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next)) {
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->mark) = 0;
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_in).list[0] = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_out).list[0] = NULL;
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_in).size = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->tree_out).size = 0;
    }
    for (i = 0; i < Tree_edge.size; i++)
	(((Agedgeinfo_t*)(((Agobj_t*)(Tree_edge.list[i]))->data))->tree_index) = -1;
    Tree_node.size = Tree_edge.size = 0;
    for (n = (((Agraphinfo_t*)(((Agobj_t*)(G))->data))->nlist); n && (Tree_edge.size == 0); n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next))
	treesearch(n);
    return Tree_node.size;
}

