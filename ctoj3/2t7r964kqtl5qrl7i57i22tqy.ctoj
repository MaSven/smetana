public static void decompose(Agraph_s g, int pass) {
    Agraph_s subg;
    Agnode_s n, v;
    G = g;
    if (++Cmark == 0)
	Cmark = 1;
    GD_n_nodes(g, 0);
    GD_comp(g).setInt("size", 0);
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n)) {
	v = n;
	if ((pass > 0) && (subg = ND_clust(v))!=null)
	    v = (Agnode_s) GD_rankleader(subg).plus(ND_rank(v)).getPtr();
	else if (v != UF_find(v))
	    continue;
	if (ND_mark(v) != Cmark) {
	    begin_component();
	    search_component(g, v);
	    end_component();
	}
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void decompose(graph_t * g, int pass)
{
    graph_t *subg;
    node_t *n, *v;
    G = g;
    if (++Cmark == 0)
	Cmark = 1;
    GD_n_nodes(g) = GD_comp(g).size = 0;
    for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	v = n;
	if ((pass > 0) && (subg = ND_clust(v)))
	    v = GD_rankleader(subg)[ND_rank(v)];
	else if (v != UF_find(v))
	    continue;
	if (ND_mark(v) != Cmark) {
	    begin_component();
	    search_component(g, v);
	    end_component();
	}
    }
}

