//static Agnode_s lastn;	/* last node argument */
//static polygon_t poly;
//static int last, outp, sides;
//static final __struct__<pointf> O = __struct__.from(pointf.class); /* point (0,0) */
//static pointf vertex;
//static double xsize, ysize, scalex, scaley, box_URx, box_URy;
public static boolean poly_inside(inside_t inside_context, final __struct__<pointf> p) {
    int i, i1, j;
    boolean s;
    final __struct__<pointf> P = __struct__.from(pointf.class), Q = __struct__.from(pointf.class), R = __struct__.from(pointf.class);
    __ptr__ bp = inside_context.getPtr("s.bp");
    __ptr__ n = inside_context.getPtr("s.n");
    P.____(ccwrotatepf(p, 90 * GD_rankdir(agraphof(n))));
    /* Quick test if port rectangle is target */
    if (bp!=null) {
	final __struct__<boxf> bbox = __struct__.from(boxf.class);
	bbox.____(bp.getStruct());
	return INSIDE(P, bbox);
    }
    if (NEQ(n, Z._().lastn)) {
	double n_width = 0, n_height = 0;
	Z._().poly = (polygon_t) ND_shape_info(n);
	Z._().vertex = (pointf) Z._().poly.getPtr("vertices");
	Z._().sides = Z._().poly.getInt("sides");
	if ((Z._().poly.getInt("option") & (1 << 11))!=0) {
UNSUPPORTED("18yw1scg4sol8bhyf1vedj9kn"); // 	   boxf bb = polyBB(poly); 
UNSUPPORTED("7rz7vxyxao0efec2nvd6g19m1"); // 	    n_width = bb.UR.x - bb.LL.x;
UNSUPPORTED("4h0k2wroz3xqx1ljokdbaqaad"); // 	    n_height = bb.UR.y - bb.LL.y;
UNSUPPORTED("dgykcjw02yoka8uz5b7jdc2ct"); // 	    /* get point and node size adjusted for rankdir=LR */
UNSUPPORTED("75jifr4aucrxp2hvnsrcfunej"); // 	    if (GD_flip(agraphof(n))) {
UNSUPPORTED("e53876tm7q1oasuu013njtgx"); // 		ysize = n_width;
UNSUPPORTED("7wnmmcv8dfzi1bdwml4vcxf0w"); // 		xsize = n_height;
UNSUPPORTED("175pyfe8j8mbhdwvrbx3gmew9"); // 	    } else {
UNSUPPORTED("10ux82vu0kynxilmf6ak7x70q"); // 		xsize = n_width;
UNSUPPORTED("5xao1mdiugxzaq03na34mbl5w"); // 		ysize = n_height;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
	} else {
	    /* get point and node size adjusted for rankdir=LR */
	    if (GD_flip(agraphof(n))!=0) {
UNSUPPORTED("dapvd4c0ggliaqcj08jvao221"); // 		ysize = ND_lw(n) + ND_rw(n);
UNSUPPORTED("8t3g4d9acruono62leh5a8hxh"); // 		xsize = ND_ht(n);
	    } else {
		Z._().xsize = ND_lw(n) + ND_rw(n);
		Z._().ysize = ND_ht(n);
	    }
	    n_width = (ROUND((ND_width(n))*72));
	    n_height = (ROUND((ND_height(n))*72));
	}
	/* scale */
	if (Z._().xsize == 0.0)
	    Z._().xsize = 1.0;
	if (Z._().ysize == 0.0)
	    Z._().ysize = 1.0;
	Z._().scalex = n_width / Z._().xsize;
	Z._().scaley = n_height / Z._().ysize;
	Z._().box_URx = n_width / 2.0;
	Z._().box_URy = n_height / 2.0;
	/* index to outer-periphery */
	Z._().outp = (Z._().poly.getInt("peripheries") - 1) * Z._().sides;
	if (Z._().outp < 0)
	    Z._().outp = 0;
	Z._().lastn = (Agnode_s) n;
    }
    /* scale */
    P.setDouble("x", P.getDouble("x") * Z._().scalex);
    P.setDouble("y", P.getDouble("y") * Z._().scaley);
    /* inside bounding box? */
    if ((fabs(P.getDouble("x")) > Z._().box_URx) || (fabs(P.getDouble("y")) > Z._().box_URy))
	return false;
    /* ellipses */
    if (Z._().sides <= 2)
	return (hypot(P.getDouble("x") / Z._().box_URx, P.getDouble("y") / Z._().box_URy) < 1.);
    /* use fast test in case we are converging on a segment */
    i = Z._().last % Z._().sides;		/* in case last left over from larger polygon */
    i1 = (i + 1) % Z._().sides;
    Q.____(Z._().vertex.plus(i + Z._().outp).getStruct());
    R.____(Z._().vertex.plus(i1 + Z._().outp).getStruct());
    if (N(same_side(P, Z._().O, Q, R)))   /* false if outside the segment's face */
	return false;
    /* else inside the segment face... */
    if ((s = same_side(P, Q, R, Z._().O)) && (same_side(P, R, Z._().O, Q))) /* true if between the segment's sides */
	return NOT(0);
    /* else maybe in another segment */
    for (j = 1; j < Z._().sides; j++) { /* iterate over remaining segments */
	if (s) { /* clockwise */
	    i = i1;
	    i1 = (i + 1) % Z._().sides;
	} else { /* counter clockwise */
	    i1 = i;
	    i = (i + Z._().sides - 1) % Z._().sides;
	}
	if (N(same_side(P, Z._().O, Z._().vertex.plus(i + Z._().outp).getStruct(), Z._().vertex.plus(i1 + Z._().outp).getStruct()))) { /* false if outside any other segment's face */
	    Z._().last = i;
	    return false;
	}
    }
    /* inside all segments' faces */
    Z._().last = i;			/* in case next edge is to same side */
    return NOT(0);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static boolean poly_inside(inside_t * inside_context, pointf p)
{
    static node_t *lastn;	/* last node argument */
    static polygon_t *poly;
    static int last, outp, sides;
    static pointf O;		/* point (0,0) */
    static pointf *vertex;
    static double xsize, ysize, scalex, scaley, box_URx, box_URy;
    int i, i1, j, s;
    pointf P, Q, R;
    boxf *bp = inside_context->s.bp;
    node_t *n = inside_context->s.n;
    P = ccwrotatepf(p, 90 * GD_rankdir(agraphof(n)));
    /* Quick test if port rectangle is target */
    if (bp) {
	boxf bbox = *bp;
	return INSIDE(P, bbox);
    }
    if (n != lastn) {
	double n_width, n_height;
	poly = (polygon_t *) ND_shape_info(n);
	vertex = poly->vertices;
	sides = poly->sides;
	if (poly->option & (1 << 11)) {
	   boxf bb = polyBB(poly); 
	    n_width = bb.UR.x - bb.LL.x;
	    n_height = bb.UR.y - bb.LL.y;
	    /* get point and node size adjusted for rankdir=LR */
	    if (GD_flip(agraphof(n))) {
		ysize = n_width;
		xsize = n_height;
	    } else {
		xsize = n_width;
		ysize = n_height;
	    }
	} else {
	    /* get point and node size adjusted for rankdir=LR */
	    if (GD_flip(agraphof(n))) {
		ysize = ND_lw(n) + ND_rw(n);
		xsize = ND_ht(n);
	    } else {
		xsize = ND_lw(n) + ND_rw(n);
		ysize = ND_ht(n);
	    }
	    n_width = (ROUND((ND_width(n))*72));
	    n_height = (ROUND((ND_height(n))*72));
	}
	/* scale */
	if (xsize == 0.0)
	    xsize = 1.0;
	if (ysize == 0.0)
	    ysize = 1.0;
	scalex = n_width / xsize;
	scaley = n_height / ysize;
	box_URx = n_width / 2.0;
	box_URy = n_height / 2.0;
	/* index to outer-periphery */
	outp = (poly->peripheries - 1) * sides;
	if (outp < 0)
	    outp = 0;
	lastn = n;
    }
    /* scale */
    P.x *= scalex;
    P.y *= scaley;
    /* inside bounding box? */
    if ((fabs(P.x) > box_URx) || (fabs(P.y) > box_URy))
	return 0;
    /* ellipses */
    if (sides <= 2)
	return (hypot(P.x / box_URx, P.y / box_URy) < 1.);
    /* use fast test in case we are converging on a segment */
    i = last % sides;		/* in case last left over from larger polygon */
    i1 = (i + 1) % sides;
    Q = vertex[i + outp];
    R = vertex[i1 + outp];
    if (!(same_side(P, O, Q, R)))   /* false if outside the segment's face */
	return 0;
    /* else inside the segment face... */
    if ((s = same_side(P, Q, R, O)) && (same_side(P, R, O, Q))) /* true if between the segment's sides */
	return NOT(0);
    /* else maybe in another segment */
    for (j = 1; j < sides; j++) { /* iterate over remaining segments */
	if (s) { /* clockwise */
	    i = i1;
	    i1 = (i + 1) % sides;
	} else { /* counter clockwise */
	    i1 = i;
	    i = (i + sides - 1) % sides;
	}
	if (!(same_side(P, O, vertex[i + outp], vertex[i1 + outp]))) { /* false if outside any other segment's face */
	    last = i;
	    return 0;
	}
    }
    /* inside all segments' faces */
    last = i;			/* in case next edge is to same side */
    return NOT(0);
}

