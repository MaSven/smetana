public static void enqueue_neighbors(nodequeue q, Agnode_s n0, int pass) {
    int i;
    Agedge_s e;
    if (pass == 0) {
	for (i = 0; i < ND_out(n0).getInt("size"); i++) {
	    e = (Agedge_s) ND_out(n0).getArrayOfPtr("list").plus(i).getPtr();
	    if (((ND_mark(aghead(e)))) == 0) {
		ND_mark(aghead(e), 1);
		enqueue(q, aghead(e));
	    }
	}
    } else {
	for (i = 0; i < ND_in(n0).getInt("size"); i++) {
	    e = (Agedge_s) ND_in(n0).getArrayOfPtr("list").plus(i).getPtr();
	    if (((ND_mark(agtail(e)))) == 0) {
		ND_mark(agtail(e), 1);
		enqueue(q, agtail(e));
	    }
	}
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void enqueue_neighbors(nodequeue * q, node_t * n0, int pass)
{
    int i;
    edge_t *e;
    if (pass == 0) {
	for (i = 0; i < ND_out(n0).size; i++) {
	    e = ND_out(n0).list[i];
	    if (((ND_mark(aghead(e)))) == 0) {
		(ND_mark(aghead(e))) = NOT(0);
		enqueue(q, aghead(e));
	    }
	}
    } else {
	for (i = 0; i < ND_in(n0).size; i++) {
	    e = ND_in(n0).list[i];
	    if (((ND_mark(agtail(e)))) == 0) {
		(ND_mark(agtail(e))) = NOT(0);
		enqueue(q, agtail(e));
	    }
	}
    }
}

