public static void contain_subclust(Agraph_s g) {
    int margin, c;
    Agraph_s subg;
    margin = late_int (g, Z._().G_margin, 8, 0);
    make_lrvn(g);
    for (c = 1; c <= GD_n_cluster(g); c++) {
	subg = (Agraph_s) GD_clust(g).plus(c).getPtr();
	make_lrvn(subg);
	make_aux_edge(GD_ln(g), GD_ln(subg),
		      margin + GD_border(g).plus(3).getStruct().getDouble("x"), 0);
	make_aux_edge(GD_rn(subg), GD_rn(g),
		      margin + GD_border(g).plus(1).getStruct().getDouble("x"), 0);
	contain_subclust(subg);
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void contain_subclust(graph_t * g)
{
    int margin, c;
    graph_t *subg;
    margin = late_int (g, G_margin, 8, 0);
    make_lrvn(g);
    for (c = 1; c <= GD_n_cluster(g); c++) {
	subg = GD_clust(g)[c];
	make_lrvn(subg);
	make_aux_edge(GD_ln(g), GD_ln(subg),
		      margin + GD_border(g)[3].x, 0);
	make_aux_edge(GD_rn(subg), GD_rn(g),
		      margin + GD_border(g)[1].x, 0);
	contain_subclust(subg);
    }
}

