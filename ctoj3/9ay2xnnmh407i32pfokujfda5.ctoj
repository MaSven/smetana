public static void dot_compute_bb(Agraph_s g, Agraph_s root) {
    int r, c;
    double x, offset;
    Agnode_s v;
    final __struct__<pointf> LL = __struct__.from(pointf.class);
    final __struct__<pointf> UR = __struct__.from(pointf.class);
    if (EQ(g, dot_root(g))) {
	LL.setDouble("x", INT_MAX);
	UR.setDouble("x", -((double)INT_MAX));
	for (r = GD_minrank(g); r <= GD_maxrank(g); r++) {
	    int rnkn = GD_rank(g).plus(r).getInt("n");
	    if (rnkn == 0)
		continue;
	    if ((v = (Agnode_s) GD_rank(g).plus(r).getArrayOfPtr("v").plus(0).getPtr()) == null)
		continue;
	    for (c = 1; (ND_node_type(v) != 0) && c < rnkn; c++)
		v = (Agnode_s) GD_rank(g).plus(r).getArrayOfPtr("v").plus(c).getPtr();
	    if (ND_node_type(v) == 0) {
		x = ND_coord(v).getDouble("x") - ND_lw(v);
		LL.setDouble("x", MIN(LL.getDouble("x"), x));
	    }
	    else continue;
		/* At this point, we know the rank contains a NORMAL node */
	    v = (Agnode_s) GD_rank(g).plus(r).getArrayOfPtr("v").plus(rnkn - 1).getPtr();
	    for (c = rnkn-2; ND_node_type(v) != 0; c--)
		v = (Agnode_s) GD_rank(g).plus(r).getArrayOfPtr("v").plus(c).getPtr();
	    x = ND_coord(v).getDouble("x") + ND_rw(v);
	    UR.setDouble("x", MAX(UR.getDouble("x"), x));
	}
	offset = 8;
	for (c = 1; c <= GD_n_cluster(g); c++) {
	    x = (double)(GD_bb(GD_clust(g).plus(c)).getPtr("LL").getDouble("x") - offset);
	    LL.setDouble("x", MIN(LL.getDouble("x"), x));
	    x = (double)(GD_bb(GD_clust(g).plus(c)).getPtr("UR").getDouble("x") + offset);
	    UR.setDouble("x", MAX(UR.getDouble("x"), x));
	}
    } else {
UNSUPPORTED("6i5o5p5mw4u2480z32i4pryad"); // 	LL.x = (double)(ND_rank(GD_ln(g)));
UNSUPPORTED("6k40vu8k6m5ntjem0c3kd564y"); // 	UR.x = (double)(ND_rank(GD_rn(g)));
    }
    LL.setDouble("y", ND_coord(GD_rank(root).plus(GD_maxrank(g)).getArrayOfPtr("v").plus(0).getPtr()).getDouble("y") - GD_ht1(g));
    UR.setDouble("y", ND_coord(GD_rank(root).plus(GD_minrank(g)).getArrayOfPtr("v").plus(0).getPtr()).getDouble("y") + GD_ht2(g));
    GD_bb(g).setStruct("LL", LL);
    GD_bb(g).setStruct("UR", UR);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void dot_compute_bb(graph_t * g, graph_t * root)
{
    int r, c;
    double x, offset;
    node_t *v;
    pointf LL, UR;
    if (g == dot_root(g)) {
	LL.x = (double)(INT_MAX);
	UR.x = (double)(-INT_MAX);
	for (r = GD_minrank(g); r <= GD_maxrank(g); r++) {
	    int rnkn = GD_rank(g)[r].n;
	    if (rnkn == 0)
		continue;
	    if ((v = GD_rank(g)[r].v[0]) == NULL)
		continue;
	    for (c = 1; (ND_node_type(v) != 0) && c < rnkn; c++)
		v = GD_rank(g)[r].v[c];
	    if (ND_node_type(v) == 0) {
		x = ND_coord(v).x - ND_lw(v);
		LL.x = MIN(LL.x, x);
	    }
	    else continue;
		/* At this point, we know the rank contains a NORMAL node */
	    v = GD_rank(g)[r].v[rnkn - 1];
	    for (c = rnkn-2; ND_node_type(v) != 0; c--)
		v = GD_rank(g)[r].v[c];
	    x = ND_coord(v).x + ND_rw(v);
	    UR.x = MAX(UR.x, x);
	}
	offset = 8;
	for (c = 1; c <= GD_n_cluster(g); c++) {
	    x = (double)(GD_bb(GD_clust(g)[c]).LL.x - offset);
	    LL.x = MIN(LL.x, x);
	    x = (double)(GD_bb(GD_clust(g)[c]).UR.x + offset);
	    UR.x = MAX(UR.x, x);
	}
    } else {
	LL.x = (double)(ND_rank(GD_ln(g)));
	UR.x = (double)(ND_rank(GD_rn(g)));
    }
    LL.y = ND_coord(GD_rank(root)[GD_maxrank(g)].v[0]).y - GD_ht1(g);
    UR.y = ND_coord(GD_rank(root)[GD_minrank(g)].v[0]).y + GD_ht2(g);
    GD_bb(g).LL = LL;
    GD_bb(g).UR = UR;
}

