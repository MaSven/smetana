private final static __struct__<gvlayout_features_t> dotgen_features = __struct__.from(gvlayout_features_t.class);
private final static __struct__<gvlayout_engine_s> dotgen_engine = __struct__.from(gvlayout_engine_s.class);
static {
dotgen_features.setInt("flags", 1<<0);
dotgen_engine.setPtr("layout", function(gen.lib.dotgen.dotinit__c.class, "dot_layout"));
dotgen_engine.setPtr("cleanup", function(gen.lib.dotgen.dotinit__c.class, "dot_cleanup"));
}
public static int gvlayout_select(GVC_s gvc, CString layout) {
	gvplugin_installed_t gvlayout_dot_layout = (gvplugin_installed_t) Memory.malloc(gvplugin_installed_t.class);
	gvlayout_dot_layout.setInt("id", enumAsInt(layout_type.class, "LAYOUT_DOT"));
	gvlayout_dot_layout.setPtr("type", new CString("dot"));
	gvlayout_dot_layout.setInt("quality", 0);
	gvlayout_dot_layout.setPtr("engine", dotgen_engine.amp());
	gvlayout_dot_layout.setPtr("features", dotgen_features.amp());

//    gvplugin_available_t *plugin;
    gvplugin_installed_t typeptr = gvlayout_dot_layout;
//    plugin = gvplugin_load(gvc, API_layout, layout);
//    if (plugin) {
//	typeptr = plugin->typeptr;
	gvc.getStruct("layout").setPtr("type", typeptr.getPtr("type"));
	gvc.getStruct("layout").setPtr("engine", typeptr.getPtr("engine"));
	gvc.getStruct("layout").setInt("id", typeptr.getInt("id"));
	gvc.getStruct("layout").setPtr("features", typeptr.getPtr("features"));
	return 300;  /* FIXME - need better return code */
//    }
//    return 999;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
int gvlayout_select(GVC_t * gvc, const char *layout)
{
    gvplugin_available_t *plugin;
    gvplugin_installed_t *typeptr;
    plugin = gvplugin_load(gvc, API_layout, layout);
    if (plugin) {
	typeptr = plugin->typeptr;
	gvc->layout.type = typeptr->type;
	gvc->layout.engine = (gvlayout_engine_t *) (typeptr->engine);
	gvc->layout.id = typeptr->id;
	gvc->layout.features = (gvlayout_features_t *) (typeptr->features);
	return 300;  /* FIXME - need better return code */
    }
    return 999;
}

