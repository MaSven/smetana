public static void merge_components(Agraph_s g) {
    int c;
    Agnode_s u, v;
    if (GD_comp(g).getInt("size") <= 1)
	return;
    u = null;
    for (c = 0; c < GD_comp(g).getInt("size"); c++) {
	v = (Agnode_s) GD_comp(g).getArrayOfPtr("list").plus(c).getPtr();
	if (u!=null)
	    ND_next(u, v);
	ND_prev(v, u);
	while (ND_next(v)!=null) {
	    v = ND_next(v);
	}
	u = v;
    }
    GD_comp(g).setInt("size", 1);
    GD_nlist(g, GD_comp(g).getArrayOfPtr("list").plus(0).getPtr());
    GD_minrank(g, Z._().GlobalMinRank);
    GD_maxrank(g, Z._().GlobalMaxRank);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void merge_components(graph_t * g)
{
    int c;
    node_t *u, *v;
    if (GD_comp(g).size <= 1)
	return;
    u = NULL;
    for (c = 0; c < GD_comp(g).size; c++) {
	v = GD_comp(g).list[c];
	if (u)
	    ND_next(u) = v;
	ND_prev(v) = u;
	while (ND_next(v)) {
	    v = ND_next(v);
	}
	u = v;
    }
    GD_comp(g).size = 1;
    GD_nlist(g) = GD_comp(g).list[0];
    GD_minrank(g) = GlobalMinRank;
    GD_maxrank(g) = GlobalMaxRank;
}

