public static void decompose(Agraph_s g, int pass) {
    Agraph_s subg;
    Agnode_s n, v;
    G = g;
    if (++Cmark == 0)
	Cmark = 1;
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setInt("n_nodes", 0);
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").setInt("size", 0);
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n)) {
	v = n;
	if ((pass > 0) && (subg = (Agraph_s) v.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("clust"))!=null)
UNSUPPORTED("27zdkh55jxi8b9l2oci6kisuc"); // 	    v = (((Agraphinfo_t*)(((Agobj_t*)(subg))->data))->rankleader)[(((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->rank)];
	else if (NEQ(v, UF_find(v)))
	    continue;
	if (v.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("mark") != Cmark) {
	    begin_component();
	    search_component(g, v);
	    end_component();
	}
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void decompose(graph_t * g, int pass)
{
    graph_t *subg;
    node_t *n, *v;
    G = g;
    if (++Cmark == 0)
	Cmark = 1;
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->n_nodes) = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).size = 0;
    for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	v = n;
	if ((pass > 0) && (subg = (((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->clust)))
	    v = (((Agraphinfo_t*)(((Agobj_t*)(subg))->data))->rankleader)[(((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->rank)];
	else if (v != UF_find(v))
	    continue;
	if ((((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->mark) != Cmark) {
	    begin_component();
	    search_component(g, v);
	    end_component();
	}
    }
}

