public static void poly_init(Agnode_s n) {
    pointf dimen = (pointf) Memory.malloc(pointf.class), min_bb = (pointf) Memory.malloc(pointf.class), bb = (pointf) Memory.malloc(pointf.class);
    point imagesize = (point) Memory.malloc(point.class);
    pointf P = (pointf) Memory.malloc(pointf.class), Q = (pointf) Memory.malloc(pointf.class), R = (pointf) Memory.malloc(pointf.class);
    pointf vertices = null;
    CString p, sfile, fxd;
    double temp, alpha, beta, gamma;
    double orientation, distortion, skew;
    double sectorangle, sidelength, skewdist, gdistortion, gskew;
    double angle, sinx, cosx, xmax, ymax, scalex, scaley;
    double width=0, height=0, marginx, marginy, spacex;
    boolean regular; int peripheries, sides;
    boolean isBox; int i, j, outp;
    polygon_t poly = (polygon_t) Memory.malloc(polygon_t.class);
    regular = n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getPtr("polygon").getBoolean("regular");
    peripheries = n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getPtr("polygon").getInt("peripheries");
    sides = n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getPtr("polygon").getInt("sides");
    orientation = n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getPtr("polygon").getDouble("orientation");
    skew = n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getPtr("polygon").getDouble("skew");
    distortion = n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getPtr("polygon").getDouble("distortion");
    regular |= mapbool(agget(n, new CString("regular")));
    /* all calculations in floating point POINTS */
    /* make x and y dimensions equal if node is regular
     *   If the user has specified either width or height, use the max.
     *   Else use minimum default value.
     * If node is not regular, use the current width and height.
     */
    if (regular) {
UNSUPPORTED("637wuscax8bj094m73fwq3n00"); // 	double sz = userSize(n);
UNSUPPORTED("6wtpde1bxbwd70jz3vuemuvqe"); // 	if (sz > 0.0)
UNSUPPORTED("c4cn28kuy1f86y4d8rbxy1a4g"); // 	    width = height = sz;
UNSUPPORTED("8k75h069sv2k9b6tgz77dscwd"); // 	else {
UNSUPPORTED("mafr2nmpj8xgeranqldzxhtb"); // 	    width = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width);
UNSUPPORTED("l2a1m5p66005ftc6gdbosugj"); // 	    height = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height);
UNSUPPORTED("61qxt5l8ums7d9os9ungn3rao"); // 	    width = height = ((((((width)<(height)?(width):(height)))*72>=0)?(int)((((width)<(height)?(width):(height)))*72 + .5):(int)((((width)<(height)?(width):(height)))*72 - .5)));
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
    } else {
	width = n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("width")*72>=0 ?
	  (int)(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("width")*72+.5)
	  :
	  (int)(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("width")*72-.5);
	height = n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("height")*72>=0 ?
	  (int)(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("height")*72+.5)
	  :
	  (int)(n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("height")*72-.5);
    }
    peripheries = late_int(n, N_peripheries, peripheries, 0);
    orientation += late_double(n, N_orientation, 0.0, -360.0);
    if (sides == 0) {		/* not for builtins */
UNSUPPORTED("dd178b113cb8130tl6q70lcp3"); // 	skew = late_double(n, N_skew, 0.0, -100.0);
UNSUPPORTED("cp83hdn3dp0a7rp9bauc3bgki"); // 	sides = late_int(n, N_sides, 4, 0);
UNSUPPORTED("abmuc3vqirf3i48480fj0k14g"); // 	distortion = late_double(n, N_distortion, 0.0, -100.0);
    }
    /* get label dimensions */
    dimen = (pointf) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getPtr("dimen");
    /* minimal whitespace around label */
    if (((abs(dimen.getDouble("x"))>=0)?(int)(abs(dimen.getDouble("x")) + .5):(int)(abs(dimen.getDouble("x")) - .5))!=0
    		|| ((abs(dimen.getDouble("y"))>=0)?(int)(abs(dimen.getDouble("y")) + .5):(int)(abs(dimen.getDouble("y")) - .5))!=0) {
    	/* padding */
	if ((p = agget(n, new CString("margin")))!=null) {
UNSUPPORTED("4dlqwm3pklzgz2e777dm56n03"); // 	    marginx = marginy = 0;
UNSUPPORTED("r186dwelv54pq63p2yo4czig"); // 	    i = sscanf(p, "%lf,%lf", &marginx, &marginy);
UNSUPPORTED("bjp5a2wbzhormf75ov5fumqto"); // 	    if (marginx < 0)
UNSUPPORTED("3tsws28ifjzq7ju8xs3ye4x18"); // 		marginx = 0;
UNSUPPORTED("7gfecwqgqof787z8u1mgh7qoj"); // 	    if (marginy < 0)
UNSUPPORTED("1xpqznf0i4ljd2b5j81ipsvtg"); // 		marginy = 0;
UNSUPPORTED("1lcx62wzgnn34tk5li0sgoqwm"); // 	    if (i > 0) {
UNSUPPORTED("dau1s6m0w92gp7bvqz3f63wnp"); // 		dimen.x += 2 * ((((marginx)*72>=0)?(int)((marginx)*72 + .5):(int)((marginx)*72 - .5)));
UNSUPPORTED("79iqlz01of88ftxysvivw2hgw"); // 		if (i > 1)
UNSUPPORTED("6opppos2hcjet4cn76130ykba"); // 		    dimen.y += 2 * ((((marginy)*72>=0)?(int)((marginy)*72 + .5):(int)((marginy)*72 - .5)));
UNSUPPORTED("7e1uy5mzei37p66t8jp01r3mk"); // 		else
UNSUPPORTED("8bwwxn4jop0urcsfnygjofg9s"); // 		    dimen.y += 2 * ((((marginx)*72>=0)?(int)((marginx)*72 + .5):(int)((marginx)*72 - .5)));
UNSUPPORTED("afk9bpom7x393euamnvwwkx6b"); // 	    } else
UNSUPPORTED("87bdwkkwbzyswxnepdd9bj8mb"); // 		{((dimen).x += 4*4); ((dimen).y += 2*4);};
	} else
	    {
	    dimen.setDouble("x", dimen.getDouble("x") + 4*4);
	    dimen.setDouble("y", dimen.getDouble("y") + 2*4);
	    };
    }
    spacex = dimen.getDouble("x") -  n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getPtr("dimen").getDouble("x");
    /* quantization */
    if ((temp = agraphof(n).castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("drawing").getDouble("quantum")) > 0.0) {
UNSUPPORTED("3nqb0s5rkwj3igt71vooj8asd"); // 	temp = ((((temp)*72>=0)?(int)((temp)*72 + .5):(int)((temp)*72 - .5)));
UNSUPPORTED("5fxtqwy8liyvnx1yvsou5hb4o"); // 	dimen.x = quant(dimen.x, temp);
UNSUPPORTED("et885f1jcqpske6ip856arouv"); // 	dimen.y = quant(dimen.y, temp);
    }
    imagesize.setInt("x", 0);
    imagesize.setInt("y", 0);
    if (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getBoolean("usershape")) {
	/* custom requires a shapefile
	 * not custom is an adaptable user shape such as a postscript
	 * function.
	 */
UNSUPPORTED("7jbvoylyb27di8f54ufxj4mbk"); // 	if ((*((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->name)==*("custom")&&!strcmp((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->name,"custom"))) {
UNSUPPORTED("cnfv2ayyl46ohdl5p4pc75swz"); // 	    sfile = agget(n, "shapefile");
UNSUPPORTED("6llro6gigojo2r8oo6c4k320o"); // 	    imagesize = gvusershape_size(agraphof(n), sfile);
UNSUPPORTED("3ngt3ika8ppq3m9vbgf2q5lu1"); // 	    if ((imagesize.x == -1) && (imagesize.y == -1)) {
UNSUPPORTED("5l8jenkv77ax02t47zzxyv1k0"); // 		agerr(AGWARN,
UNSUPPORTED("7hgyav5bbs1v4kts1oocozork"); // 		      "No or improper shapefile=\"%s\" for node \"%s\"\n",
UNSUPPORTED("34s5a4xy12nydt3idmis4np67"); // 		      (sfile ? sfile : "<nil>"), agnameof(n));
UNSUPPORTED("apwtbaz0akr5pg5p6uwcroaan"); // 		imagesize.x = imagesize.y = 0;
UNSUPPORTED("175pyfe8j8mbhdwvrbx3gmew9"); // 	    } else {
UNSUPPORTED("4xiqgw4br039sl4r32gg5jv6k"); // 		(((Agraphinfo_t*)(((Agobj_t*)(agraphof(n)))->data))->has_images) = (!(0));
UNSUPPORTED("3nl4wsbxuqlad4tcg8vmg99rx"); // 		imagesize.x += 2;	/* some fixed padding */
UNSUPPORTED("da00oaavfp6fwqwgshhrodz2r"); // 		imagesize.y += 2;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
    } else if ((sfile = agget(n, new CString("image")))!=null && (sfile.charAt(0) != '\0')) {
UNSUPPORTED("76t38i30025xohbzg8w9z4pn9"); // 	imagesize = gvusershape_size(agraphof(n), sfile);
UNSUPPORTED("b8spvmvtuxcciaejq8j1xhu5s"); // 	if ((imagesize.x == -1) && (imagesize.y == -1)) {
UNSUPPORTED("cw5grwj6gbj94jcztvnp2ooyj"); // 	    agerr(AGWARN,
UNSUPPORTED("68jdsrao22ymfpb8e1rdezyez"); // 		  "No or improper image=\"%s\" for node \"%s\"\n",
UNSUPPORTED("5lmxoq1rboqrxrchjf5ubg6w5"); // 		  (sfile ? sfile : "<nil>"), agnameof(n));
UNSUPPORTED("7wmzbnczyvj4oocepujtghrka"); // 	    imagesize.x = imagesize.y = 0;
UNSUPPORTED("7yhr8hn3r6wohafwxrt85b2j2"); // 	} else {
UNSUPPORTED("71mfu0uflnm85dbt8g2oxs9rd"); // 	    (((Agraphinfo_t*)(((Agobj_t*)(agraphof(n)))->data))->has_images) = (!(0));
UNSUPPORTED("286u48muwmjkomlzqufoqm5cw"); // 	    imagesize.x += 2;	/* some fixed padding */
UNSUPPORTED("1x57knvrmlciu7odfroo3paso"); // 	    imagesize.y += 2;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
    }
    /* initialize node bb to labelsize */
    bb.setDouble("x", ((dimen.getDouble("x"))>(imagesize.getInt("x"))?(dimen.getDouble("x")):(imagesize.getInt("x"))));
    bb.setDouble("y", ((dimen.getDouble("y"))>(imagesize.getInt("y"))?(dimen.getDouble("y")):(imagesize.getInt("y"))));
    /* I don't know how to distort or skew ellipses in postscript */
    /* Convert request to a polygon with a large number of sides */
    if ((sides <= 2) && ((distortion != 0.) || (skew != 0.))) {
	sides = 120;
    }
    /* extra sizing depends on if label is centered vertically */
    p = agget(n, new CString("labelloc"));
    if (p!=null && (p.charAt(0) == 't' || p.charAt(0) == 'b'))
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").setInt("valign", p.charAt(0));
    else
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").setInt("valign", 'c');
    isBox = (sides == 4 && (((orientation>=0)?(int)(orientation + .5):(int)(orientation - .5)) % 90) == 0
	     && distortion == 0. && skew == 0.);
    if (isBox) {
	/* for regular boxes the fit should be exact */
    } else if (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("shape").getPtr("polygon").getPtr("vertices")!=null) {
UNSUPPORTED("4adqsyjwqwzs50ggjp57ok6u7"); // 	poly_desc_t* pd = (poly_desc_t*)(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices;
UNSUPPORTED("1fjwgzo5xkijo98ycmzhal8yv"); // 	bb = pd->size_gen(bb);
    } else {
	/* for all other shapes, compute a smallest ellipse
	 * containing bb centered on the origin, and then pad for that.
	 * We assume the ellipse is defined by a scaling up of bb.
	 */
	temp = bb.getDouble("y") * 1.41421356237309504880;
	if (height > temp && (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getInt("valign") == 'c')) {
	    /* if there is height to spare
	     * and the label is centered vertically
	     * then just pad x in proportion to the spare height */
	    bb.setDouble("x", bb.getDouble("x") * sqrt(1. / (1. - ((bb.getDouble("y") / height) * (bb.getDouble("y") / height)))));
	} else {
	    bb.setDouble("x", bb.getDouble("x") * 1.41421356237309504880);
	    bb.setDouble("y", temp);
	}
	if (sides > 2) {
	    temp = cos(3.14159265358979323846 / sides);
	    bb.setDouble("x", bb.getDouble("x") / temp);
	    bb.setDouble("y", bb.getDouble("y") / temp);
	    /* FIXME - for odd-sided polygons, e.g. triangles, there
	       would be a better fit with some vertical adjustment of the shape */
	}
    }
    /* at this point, bb is the minimum size of node that can hold the label */
    min_bb = bb;
    /* increase node size to width/height if needed */
    fxd = late_string(n, N_fixed, new CString("false"));
    if ((fxd.charAt(0) == 's') && (N(strcmp(fxd,new CString("shape"))))) {
	bb.setDouble("x", width);
	bb.setDouble("y", height);
	poly.setInt("option", poly.getInt("option") | (1 << 11));
    } else if (mapbool(fxd)) {
	/* check only label, as images we can scale to fit */
	if ((width < (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getDouble("dimen.x")) 
		|| (height < (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getDouble("dimen.y")))))
	    System.err.println(
		  "node '%s', graph '%s' size too small for label\n");
		  //agnameof(n), agnameof(agraphof(n)));
	bb.setDouble("x",  width);
	bb.setDouble("y", height);
    } else {
	width = ((width)>(bb.getDouble("x"))?(width):(bb.getDouble("x")));
	bb.setDouble("x", width);
	height = ((height)>(bb.getDouble("y"))?(height):(bb.getDouble("y")));
	bb.setDouble("y", height);
    }
    /* If regular, make dimensions the same.
     * Need this to guarantee final node size is regular.
     */
    if (regular) {
    width = ((bb.getDouble("x"))>(bb.getDouble("y"))?(bb.getDouble("x")):(bb.getDouble("y")));
    height = width;
    bb.setDouble("x", width);
    bb.setDouble("y", width);
    }
    /* Compute space available for label.  Provides the justification borders */
    if (N(mapbool(late_string(n, N_nojustify, new CString("false"))))) {
	if (isBox) {
	    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getPtr("space").setDouble("x",
	     ((dimen.getDouble("x"))>(bb.getDouble("x"))?(dimen.getDouble("x")):(bb.getDouble("x"))) - spacex);
	}
	else if (dimen.getDouble("y") < bb.getDouble("y")) {
	    temp = bb.getDouble("x") * sqrt(1.0 - ((dimen.getDouble("y")) * (dimen.getDouble("y"))) / ((bb.getDouble("y")) * (bb.getDouble("y"))));
	    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getPtr("space").setDouble("x",
	      ((dimen.getDouble("x"))>(temp)?(dimen.getDouble("x")):(temp)) - spacex);
        }
	else
	    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getPtr("space").setDouble("x", dimen.getDouble("x") - spacex);
    } else {
	    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getPtr("space").setDouble("x", dimen.getDouble("x") - spacex);
    }
    if ((poly.getInt("option") & (1 << 11)) == 0) {
	temp = bb.getDouble("y") - min_bb.getDouble("y");
	if (dimen.getDouble("y") < imagesize.getInt("y"))
	    temp += imagesize.getInt("y") - dimen.getDouble("y");
	    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("label").getPtr("space").setDouble("y",
	      dimen.getDouble("y") + temp);
    }
    outp = peripheries;
    if (peripheries < 1)
	outp = 1;
    if (sides < 3) {		/* ellipses */
	sides = 2;
	vertices = (pointf)zmalloc(sizeof(pointf.class, outp * sides));
	P.setDouble("x", bb.getDouble("x") / 2.);
	P.setDouble("y", bb.getDouble("y") / 2.);
	vertices.setDouble("x", -P.getDouble("x"));
	vertices.setDouble("y", -P.getDouble("y"));
	vertices.plus(1).setDouble("x", P.getDouble("x"));
	vertices.plus(1).setDouble("y", P.getDouble("y"));
	if (peripheries > 1) {
UNSUPPORTED("4ofenmfgj7cgyf624qmugcx77"); // 	    for (j = 1, i = 2; j < peripheries; j++) {
UNSUPPORTED("458w3r6n3nidn2j2b154phpzt"); // 		P.x += 4;
UNSUPPORTED("24bcrwtjsfswpmtwxnadf0cn1"); // 		P.y += 4;
UNSUPPORTED("byrwdiqkace7e10l3pibk54wg"); // 		vertices[i].x = -P.x;
UNSUPPORTED("bicdgzzy9pdopb03hn9l48yns"); // 		vertices[i].y = -P.y;
UNSUPPORTED("en9fjm2thtauyxn9t7v4j2xgl"); // 		i++;
UNSUPPORTED("2pejlnamuvmi1m7339vzctpnb"); // 		vertices[i].x = P.x;
UNSUPPORTED("dy64x78vvm5nufbuxsn0bi8ng"); // 		vertices[i].y = P.y;
UNSUPPORTED("en9fjm2thtauyxn9t7v4j2xgl"); // 		i++;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("6g6b8zsanvqyc953c4jh1j7iy"); // 	    bb.x = 2. * P.x;
UNSUPPORTED("b5z0hw4dacenv33xsaex70g8d"); // 	    bb.y = 2. * P.y;
	}
    } else {
/*
 * FIXME - this code is wrong - it doesn't work for concave boundaries.
 *          (e.g. "folder"  or "promoter")
 *   I don't think it even needs sectorangle, or knowledge of skewed shapes.
 *   (Concepts that only work for convex regular (modulo skew/distort) polygons.)
 *
 *   I think it only needs to know inside v. outside (by always drawing
 *   boundaries clockwise, say),  and the two adjacent segments.
 *
 *   It needs to find the point where the two lines, parallel to
 *   the current segments, and outside by GAP distance, intersect.   
 */
UNSUPPORTED("4snhunxvhgqhjw3f3gxt0r5u7"); // 	vertices = (pointf*)zmalloc((outp * sides)*sizeof(pointf));
UNSUPPORTED("72zc5p6squuowvfru1c85v6nh"); // 	if ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices) {
UNSUPPORTED("3ghle84ieryaenfnlbzrfv7bw"); // 	    poly_desc_t* pd = (poly_desc_t*)(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices;
UNSUPPORTED("227lpcg9dt83m2bm8yshb4djf"); // 	    pd->vertex_gen (vertices, &bb);
UNSUPPORTED("cc3jvnwvbhjhro4adeet363yd"); // 	    xmax = bb.x/2;
UNSUPPORTED("39rdmp8vl9muqtv7xs1xwtrwk"); // 	    ymax = bb.y/2;
UNSUPPORTED("7yhr8hn3r6wohafwxrt85b2j2"); // 	} else {
UNSUPPORTED("saig62jvwdw3vrc3io2qjedb"); // 	    sectorangle = 2. * 3.14159265358979323846 / sides;
UNSUPPORTED("vncqtbdavil32l1x63kc30vv"); // 	    sidelength = sin(sectorangle / 2.);
UNSUPPORTED("8bkg824emffoo2ip8kqckd9c0"); // 	    skewdist = hypot(fabs(distortion) + fabs(skew), 1.);
UNSUPPORTED("3y5tlggftz1ifvwbtsvl7llvm"); // 	    gdistortion = distortion * 1.41421356237309504880 / cos(sectorangle / 2.);
UNSUPPORTED("cv8x1a1omodgd8oxafh5lq2dm"); // 	    gskew = skew / 2.;
UNSUPPORTED("5w72rfu6rjanmsk6ub77k09gi"); // 	    angle = (sectorangle - 3.14159265358979323846) / 2.;
UNSUPPORTED("9rbjq9mq1kbvx9xlksxgqircz"); // 	    *&sinx = sin(angle); *&cosx = cos(angle);
UNSUPPORTED("630nzhdmh77g1mq76kcehzjof"); // 	    R.x = .5 * cosx;
UNSUPPORTED("8wklch1i9ovxc1mpiuqdqzp4s"); // 	    R.y = .5 * sinx;
UNSUPPORTED("9d3od6m99gwddgwzcomp8do1o"); // 	    xmax = ymax = 0.;
UNSUPPORTED("blahauv4mhc2lz2y0oqdgabj"); // 	    angle += (3.14159265358979323846 - sectorangle) / 2.;
UNSUPPORTED("9mlrumbikcvketd18jx1ox7k7"); // 	    for (i = 0; i < sides; i++) {
UNSUPPORTED("7u3jbzerk7wlpbqcv8sgvk97e"); // 	    /*next regular vertex */
UNSUPPORTED("8mjgrm12fk6a0kq3ajr0r0sxf"); // 		angle += sectorangle;
UNSUPPORTED("dywydjyaz5ffw47p5m8jfqtyh"); // 		*&sinx = sin(angle); *&cosx = cos(angle);
UNSUPPORTED("9i45hh68wczx8g3uqrxnhywbk"); // 		R.x += sidelength * cosx;
UNSUPPORTED("1g3tvsha4cqbchgorvfu4v8yb"); // 		R.y += sidelength * sinx;
UNSUPPORTED("buoity5ys34nbfdi68n939i19"); // 	    /*distort and skew */
UNSUPPORTED("1axurggeuegy7piff0sk84hxl"); // 		P.x = R.x * (skewdist + R.y * gdistortion) + R.y * gskew;
UNSUPPORTED("b8xubhs1tmrsthuy5jcf4tdq5"); // 		P.y = R.y;
UNSUPPORTED("7lfvd7tq57ebix7l2h56anjty"); // 	    /*orient P.x,P.y */
UNSUPPORTED("f0yabfy3rqz200dwleux2hlmg"); // 		alpha = ((orientation)/180.0 * 3.14159265358979323846) + atan2(P.y, P.x);
UNSUPPORTED("ewl38ts3h65m0u23heh6qt3em"); // 		*&sinx = sin(alpha); *&cosx = cos(alpha);
UNSUPPORTED("elv5tjaq3zl6d01fuvzhm92aw"); // 		P.x = P.y = hypot(P.x, P.y);
UNSUPPORTED("8ntomjufhkcfykkeqsl7fwaml"); // 		P.x *= cosx;
UNSUPPORTED("88fbfhj9o3ur7pfw1f6snyvlx"); // 		P.y *= sinx;
UNSUPPORTED("esm38igxlrder8ikb4o7lfdx1"); // 	    /*scale for label */
UNSUPPORTED("e61iyn3yld1vlo9yydhnfjblx"); // 		P.x *= bb.x;
UNSUPPORTED("2k1tiuhg03ar43bi1klo5wob5"); // 		P.y *= bb.y;
UNSUPPORTED("dhfot3tew4c8tk71rs855inaa"); // 	    /*find max for bounding box */
UNSUPPORTED("61k8hexe4riwx2r3i5op9qc9j"); // 		xmax = ((fabs(P.x))>(xmax)?(fabs(P.x)):(xmax));
UNSUPPORTED("diodj355igvmd1oiwypfgacdh"); // 		ymax = ((fabs(P.y))>(ymax)?(fabs(P.y)):(ymax));
UNSUPPORTED("4z2j61w5a0wx8tdr88wstcr5g"); // 	    /* store result in array of points */
UNSUPPORTED("6fv27j87r2oit6ikuxklo5a0u"); // 		vertices[i] = P;
UNSUPPORTED("374n43lwjq5wws4qq2b6hjsq9"); // 		if (isBox) { /* enforce exact symmetry of box */
UNSUPPORTED("4gapvvfgp0vwab2t7ny4bcee8"); // 		    vertices[1].x = -P.x;
UNSUPPORTED("3ldx3z01hukr1fa9ottttnyfs"); // 		    vertices[1].y = P.y;
UNSUPPORTED("3ooxejyzzalier9kyb24ecnj2"); // 		    vertices[2].x = -P.x;
UNSUPPORTED("bztbsnvgx2oogbmpb5p32e25w"); // 		    vertices[2].y = -P.y;
UNSUPPORTED("arrf701vzh7lh5yguouo61nx7"); // 		    vertices[3].x = P.x;
UNSUPPORTED("9a2rkhe9aomcxwxnuu2t7gtgd"); // 		    vertices[3].y = -P.y;
UNSUPPORTED("czyohktf9bkx4udfqhx42f4lu"); // 		    break;
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("9gpmuqnq6b1v96ihgin4q5j2v"); // 	/* apply minimum dimensions */
UNSUPPORTED("5ga5png37lxepkr251dh0rbnz"); // 	xmax *= 2.;
UNSUPPORTED("514b4cjwe7lez17ktknud619n"); // 	ymax *= 2.;
UNSUPPORTED("36f41061q2o9glw9lwhj24tps"); // 	bb.x = ((width)>(xmax)?(width):(xmax));
UNSUPPORTED("egf2vtgm39iprn0nbh0sx9t6x"); // 	bb.y = ((height)>(ymax)?(height):(ymax));
UNSUPPORTED("4vwgyfieo4h3n0go44qntfybw"); // 	scalex = bb.x / xmax;
UNSUPPORTED("bkj5xdt82i6kne4qamttkvqd4"); // 	scaley = bb.y / ymax;
UNSUPPORTED("bnlcutimilujroygrsjpbamec"); // 	for (i = 0; i < sides; i++) {
UNSUPPORTED("5dznk69haxedww8ugav5ykrld"); // 	    P = vertices[i];
UNSUPPORTED("2hj1salway3p9sstzfxvv7ur3"); // 	    P.x *= scalex;
UNSUPPORTED("bf17f4ztvcy1898sgyfgkzsxu"); // 	    P.y *= scaley;
UNSUPPORTED("6c6pwxutn336lcat32f25lci"); // 	    vertices[i] = P;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("dr2t455022wfwrxn48nygohen"); // 	if (peripheries > 1) {
UNSUPPORTED("3x6t3unoi91ezbh3iz168cm2t"); // 	    Q = vertices[(sides - 1)];
UNSUPPORTED("8cm8js7jdmpakzujw3wo4h6jk"); // 	    R = vertices[0];
UNSUPPORTED("5zpv8twf25wr8n71ql3lh8ku2"); // 	    beta = atan2(R.y - Q.y, R.x - Q.x);
UNSUPPORTED("9mlrumbikcvketd18jx1ox7k7"); // 	    for (i = 0; i < sides; i++) {
UNSUPPORTED("gkm8nb6f6ispdzj0ausiv1fe"); // 		/*for each vertex find the bisector */
UNSUPPORTED("8tp61rvblb9bmqfwgyknlk906"); // 		P = Q;
UNSUPPORTED("1ls3xc8rwvn3763c32mx1wzsd"); // 		Q = R;
UNSUPPORTED("1zrelve2mvbnzah086dkomf6k"); // 		R = vertices[(i + 1) % sides];
UNSUPPORTED("bgx8ee996r89memnp0ea0b80m"); // 		alpha = beta;
UNSUPPORTED("5p9jzpcd51evtwqyugnwk50vf"); // 		beta = atan2(R.y - Q.y, R.x - Q.x);
UNSUPPORTED("dwskcoivmu9pc5kth75x0ersl"); // 		gamma = (alpha + 3.14159265358979323846 - beta) / 2.;
UNSUPPORTED("cmm5tvlcafe2aso9bkk3kl7of"); // 		/*find distance along bisector to */
UNSUPPORTED("bebwurfm1a1h1bywf9kf5ueug"); // 		/*intersection of next periphery */
UNSUPPORTED("1mtgr15b978d0tdunbpj2pkdp"); // 		temp = 4 / sin(gamma);
UNSUPPORTED("28mxt6c4230xruf63s6u415y9"); // 		/*convert this distance to x and y */
UNSUPPORTED("1fxw0fz2b6iq6p6qy58mx9mwu"); // 		*&sinx = sin((alpha - gamma)); *&cosx = cos((alpha - gamma));
UNSUPPORTED("8j7vx250v0icumolzos2p5qa8"); // 		sinx *= temp;
UNSUPPORTED("35ed1mrpnziq164g6cg4stt5w"); // 		cosx *= temp;
UNSUPPORTED("eu3ptwi3s2200v4253yk1x69t"); // 		/*save the vertices of all the */
UNSUPPORTED("7lc5jxgzj6z4lq7sd9y2b6vex"); // 		/*peripheries at this base vertex */
UNSUPPORTED("86nzalouete6viryy967d5g9u"); // 		for (j = 1; j < peripheries; j++) {
UNSUPPORTED("dautpj9jyj2qwa8jpujdh3436"); // 		    Q.x += cosx;
UNSUPPORTED("7p6tl6s20kdual1ysfoxl8wku"); // 		    Q.y += sinx;
UNSUPPORTED("1yw9xq85ss81cogn9jrg24ojc"); // 		    vertices[i + j * sides] = Q;
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("9mlrumbikcvketd18jx1ox7k7"); // 	    for (i = 0; i < sides; i++) {
UNSUPPORTED("aa5s79go4kwos2as72rcsdrxf"); // 		P = vertices[i + (peripheries - 1) * sides];
UNSUPPORTED("7ee9ageu4efyramsg9jn6klpb"); // 		bb.x = ((2. * fabs(P.x))>(bb.x)?(2. * fabs(P.x)):(bb.x));
UNSUPPORTED("lklvdmn7xiqbxhpgdeufcvjj"); // 		bb.y = ((2. * fabs(P.y))>(bb.y)?(2. * fabs(P.y)):(bb.y));
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
    }
    poly.setInt("regular", regular?1:0);
    poly.setInt("peripheries", peripheries);
    poly.setInt("sides", sides);
    poly.setDouble("orientation", orientation);
    poly.setDouble("skew", skew);
    poly.setDouble("distortion", distortion);
    poly.setPtr("vertices", vertices);
    if ((poly.getInt("option") & (1 << 11))!=0) {
	/* set width and height to reflect label and shape */
UNSUPPORTED("7kk8oru3b3copylmq3gssx6qx"); // 	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width) = ((((dimen.x)>(bb.x)?(dimen.x):(bb.x)))/(double)72);
UNSUPPORTED("8oouzms2x039fhfcfxm7yc4su"); // 	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height) = ((((dimen.y)>(bb.y)?(dimen.y):(bb.y)))/(double)72);
    } else {
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setDouble("width", ((bb.getDouble("x"))/(double)72));
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setDouble("height", ((bb.getDouble("y"))/(double)72));
    }
    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setPtr("shape_info", poly);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void poly_init(node_t * n)
{
    pointf dimen, min_bb, bb;
    point imagesize;
    pointf P, Q, R;
    pointf *vertices;
    char *p, *sfile, *fxd;
    double temp, alpha, beta, gamma;
    double orientation, distortion, skew;
    double sectorangle, sidelength, skewdist, gdistortion, gskew;
    double angle, sinx, cosx, xmax, ymax, scalex, scaley;
    double width, height, marginx, marginy, spacex;
    int regular, peripheries, sides;
    int i, j, isBox, outp;
    polygon_t *poly = (polygon_t*)zmalloc(sizeof(polygon_t));
    regular = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->regular;
    peripheries = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->peripheries;
    sides = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->sides;
    orientation = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->orientation;
    skew = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->skew;
    distortion = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->distortion;
    regular |= mapbool(agget(n, "regular"));
    /* all calculations in floating point POINTS */
    /* make x and y dimensions equal if node is regular
     *   If the user has specified either width or height, use the max.
     *   Else use minimum default value.
     * If node is not regular, use the current width and height.
     */
    if (regular) {
	double sz = userSize(n);
	if (sz > 0.0)
	    width = height = sz;
	else {
	    width = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width);
	    height = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height);
	    width = height = ((((((width)<(height)?(width):(height)))*72>=0)?(int)((((width)<(height)?(width):(height)))*72 + .5):(int)((((width)<(height)?(width):(height)))*72 - .5)));
	}
    } else {
	width = (((((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width))*72>=0)?(int)(((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width))*72 + .5):(int)(((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width))*72 - .5)));
	height = (((((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height))*72>=0)?(int)(((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height))*72 + .5):(int)(((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height))*72 - .5)));
    }
    peripheries = late_int(n, N_peripheries, peripheries, 0);
    orientation += late_double(n, N_orientation, 0.0, -360.0);
    if (sides == 0) {		/* not for builtins */
	skew = late_double(n, N_skew, 0.0, -100.0);
	sides = late_int(n, N_sides, 4, 0);
	distortion = late_double(n, N_distortion, 0.0, -100.0);
    }
    /* get label dimensions */
    dimen = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->dimen;
    /* minimal whitespace around label */
    if (((abs(dimen.x)>=0)?(int)(abs(dimen.x) + .5):(int)(abs(dimen.x) - .5)) || ((abs(dimen.y)>=0)?(int)(abs(dimen.y) + .5):(int)(abs(dimen.y) - .5))) {
	/* padding */
	if ((p = agget(n, "margin"))) {
	    marginx = marginy = 0;
	    i = sscanf(p, "%lf,%lf", &marginx, &marginy);
	    if (marginx < 0)
		marginx = 0;
	    if (marginy < 0)
		marginy = 0;
	    if (i > 0) {
		dimen.x += 2 * ((((marginx)*72>=0)?(int)((marginx)*72 + .5):(int)((marginx)*72 - .5)));
		if (i > 1)
		    dimen.y += 2 * ((((marginy)*72>=0)?(int)((marginy)*72 + .5):(int)((marginy)*72 - .5)));
		else
		    dimen.y += 2 * ((((marginx)*72>=0)?(int)((marginx)*72 + .5):(int)((marginx)*72 - .5)));
	    } else
		{((dimen).x += 4*4); ((dimen).y += 2*4);};
	} else
	    {((dimen).x += 4*4); ((dimen).y += 2*4);};
    }
    spacex = dimen.x - (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->dimen.x;
    /* quantization */
    if ((temp = (((Agraphinfo_t*)(((Agobj_t*)(agraphof(n)))->data))->drawing)->quantum) > 0.0) {
	temp = ((((temp)*72>=0)?(int)((temp)*72 + .5):(int)((temp)*72 - .5)));
	dimen.x = quant(dimen.x, temp);
	dimen.y = quant(dimen.y, temp);
    }
    imagesize.x = imagesize.y = 0;
    if ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->usershape) {
	/* custom requires a shapefile
	 * not custom is an adaptable user shape such as a postscript
	 * function.
	 */
	if ((*((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->name)==*("custom")&&!strcmp((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->name,"custom"))) {
	    sfile = agget(n, "shapefile");
	    imagesize = gvusershape_size(agraphof(n), sfile);
	    if ((imagesize.x == -1) && (imagesize.y == -1)) {
		agerr(AGWARN,
		      "No or improper shapefile=\"%s\" for node \"%s\"\n",
		      (sfile ? sfile : "<nil>"), agnameof(n));
		imagesize.x = imagesize.y = 0;
	    } else {
		(((Agraphinfo_t*)(((Agobj_t*)(agraphof(n)))->data))->has_images) = (!(0));
		imagesize.x += 2;	/* some fixed padding */
		imagesize.y += 2;
	    }
	}
    } else if ((sfile = agget(n, "image")) && (*sfile != '\0')) {
	imagesize = gvusershape_size(agraphof(n), sfile);
	if ((imagesize.x == -1) && (imagesize.y == -1)) {
	    agerr(AGWARN,
		  "No or improper image=\"%s\" for node \"%s\"\n",
		  (sfile ? sfile : "<nil>"), agnameof(n));
	    imagesize.x = imagesize.y = 0;
	} else {
	    (((Agraphinfo_t*)(((Agobj_t*)(agraphof(n)))->data))->has_images) = (!(0));
	    imagesize.x += 2;	/* some fixed padding */
	    imagesize.y += 2;
	}
    }
    /* initialize node bb to labelsize */
    bb.x = ((dimen.x)>(imagesize.x)?(dimen.x):(imagesize.x));
    bb.y = ((dimen.y)>(imagesize.y)?(dimen.y):(imagesize.y));
    /* I don't know how to distort or skew ellipses in postscript */
    /* Convert request to a polygon with a large number of sides */
    if ((sides <= 2) && ((distortion != 0.) || (skew != 0.))) {
	sides = 120;
    }
    /* extra sizing depends on if label is centered vertically */
    p = agget(n, "labelloc");
    if (p && (p[0] == 't' || p[0] == 'b'))
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->valign = p[0];
    else
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->valign = 'c';
    isBox = (sides == 4 && (((orientation>=0)?(int)(orientation + .5):(int)(orientation - .5)) % 90) == 0
	     && distortion == 0. && skew == 0.);
    if (isBox) {
	/* for regular boxes the fit should be exact */
    } else if ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices) {
	poly_desc_t* pd = (poly_desc_t*)(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices;
	bb = pd->size_gen(bb);
    } else {
	/* for all other shapes, compute a smallest ellipse
	 * containing bb centered on the origin, and then pad for that.
	 * We assume the ellipse is defined by a scaling up of bb.
	 */
	temp = bb.y * 1.41421356237309504880;
	if (height > temp && (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->valign == 'c') {
	    /* if there is height to spare
	     * and the label is centered vertically
	     * then just pad x in proportion to the spare height */
	    bb.x *= sqrt(1. / (1. - ((bb.y / height) * (bb.y / height))));
	} else {
	    bb.x *= 1.41421356237309504880;
	    bb.y = temp;
	}
	if (sides > 2) {
	    temp = cos(3.14159265358979323846 / sides);
	    bb.x /= temp;
	    bb.y /= temp;
	    /* FIXME - for odd-sided polygons, e.g. triangles, there
	       would be a better fit with some vertical adjustment of the shape */
	}
    }
    /* at this point, bb is the minimum size of node that can hold the label */
    min_bb = bb;
    /* increase node size to width/height if needed */
    fxd = late_string(n, N_fixed, "false");
    if ((*fxd == 's') && (*(fxd)==*("shape")&&!strcmp(fxd,"shape"))) {
	bb.x = width;
	bb.y = height;
	poly->option |= (1 << 11);
    } else if (mapbool(fxd)) {
	/* check only label, as images we can scale to fit */
	if ((width < (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->dimen.x) || (height < (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->dimen.y))
	    agerr(AGWARN,
		  "node '%s', graph '%s' size too small for label\n",
		  agnameof(n), agnameof(agraphof(n)));
	bb.x = width;
	bb.y = height;
    } else {
	bb.x = width = ((width)>(bb.x)?(width):(bb.x));
	bb.y = height = ((height)>(bb.y)?(height):(bb.y));
    }
    /* If regular, make dimensions the same.
     * Need this to guarantee final node size is regular.
     */
    if (regular) {
	width = height = bb.x = bb.y = ((bb.x)>(bb.y)?(bb.x):(bb.y));
    }
    /* Compute space available for label.  Provides the justification borders */
    if (!mapbool(late_string(n, N_nojustify, "false"))) {
	if (isBox) {
	    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->space.x = ((dimen.x)>(bb.x)?(dimen.x):(bb.x)) - spacex;
	}
	else if (dimen.y < bb.y) {
	    temp = bb.x * sqrt(1.0 - ((dimen.y) * (dimen.y)) / ((bb.y) * (bb.y)));
	    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->space.x = ((dimen.x)>(temp)?(dimen.x):(temp)) - spacex;
        }
	else
	    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->space.x = dimen.x - spacex;
    } else {
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->space.x = dimen.x - spacex;
    }
    if ((poly->option & (1 << 11)) == 0) {
	temp = bb.y - min_bb.y;
	if (dimen.y < imagesize.y)
	    temp += imagesize.y - dimen.y;
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->label)->space.y = dimen.y + temp;
    }
    outp = peripheries;
    if (peripheries < 1)
	outp = 1;
    if (sides < 3) {		/* ellipses */
	sides = 2;
	vertices = (pointf*)zmalloc((outp * sides)*sizeof(pointf));
	P.x = bb.x / 2.;
	P.y = bb.y / 2.;
	vertices[0].x = -P.x;
	vertices[0].y = -P.y;
	vertices[1] = P;
	if (peripheries > 1) {
	    for (j = 1, i = 2; j < peripheries; j++) {
		P.x += 4;
		P.y += 4;
		vertices[i].x = -P.x;
		vertices[i].y = -P.y;
		i++;
		vertices[i].x = P.x;
		vertices[i].y = P.y;
		i++;
	    }
	    bb.x = 2. * P.x;
	    bb.y = 2. * P.y;
	}
    } else {
/*
 * FIXME - this code is wrong - it doesn't work for concave boundaries.
 *          (e.g. "folder"  or "promoter")
 *   I don't think it even needs sectorangle, or knowledge of skewed shapes.
 *   (Concepts that only work for convex regular (modulo skew/distort) polygons.)
 *
 *   I think it only needs to know inside v. outside (by always drawing
 *   boundaries clockwise, say),  and the two adjacent segments.
 *
 *   It needs to find the point where the two lines, parallel to
 *   the current segments, and outside by GAP distance, intersect.   
 */
	vertices = (pointf*)zmalloc((outp * sides)*sizeof(pointf));
	if ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices) {
	    poly_desc_t* pd = (poly_desc_t*)(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape)->polygon->vertices;
	    pd->vertex_gen (vertices, &bb);
	    xmax = bb.x/2;
	    ymax = bb.y/2;
	} else {
	    sectorangle = 2. * 3.14159265358979323846 / sides;
	    sidelength = sin(sectorangle / 2.);
	    skewdist = hypot(fabs(distortion) + fabs(skew), 1.);
	    gdistortion = distortion * 1.41421356237309504880 / cos(sectorangle / 2.);
	    gskew = skew / 2.;
	    angle = (sectorangle - 3.14159265358979323846) / 2.;
	    *&sinx = sin(angle); *&cosx = cos(angle);
	    R.x = .5 * cosx;
	    R.y = .5 * sinx;
	    xmax = ymax = 0.;
	    angle += (3.14159265358979323846 - sectorangle) / 2.;
	    for (i = 0; i < sides; i++) {
	    /*next regular vertex */
		angle += sectorangle;
		*&sinx = sin(angle); *&cosx = cos(angle);
		R.x += sidelength * cosx;
		R.y += sidelength * sinx;
	    /*distort and skew */
		P.x = R.x * (skewdist + R.y * gdistortion) + R.y * gskew;
		P.y = R.y;
	    /*orient P.x,P.y */
		alpha = ((orientation)/180.0 * 3.14159265358979323846) + atan2(P.y, P.x);
		*&sinx = sin(alpha); *&cosx = cos(alpha);
		P.x = P.y = hypot(P.x, P.y);
		P.x *= cosx;
		P.y *= sinx;
	    /*scale for label */
		P.x *= bb.x;
		P.y *= bb.y;
	    /*find max for bounding box */
		xmax = ((fabs(P.x))>(xmax)?(fabs(P.x)):(xmax));
		ymax = ((fabs(P.y))>(ymax)?(fabs(P.y)):(ymax));
	    /* store result in array of points */
		vertices[i] = P;
		if (isBox) { /* enforce exact symmetry of box */
		    vertices[1].x = -P.x;
		    vertices[1].y = P.y;
		    vertices[2].x = -P.x;
		    vertices[2].y = -P.y;
		    vertices[3].x = P.x;
		    vertices[3].y = -P.y;
		    break;
		}
	    }
	}
	/* apply minimum dimensions */
	xmax *= 2.;
	ymax *= 2.;
	bb.x = ((width)>(xmax)?(width):(xmax));
	bb.y = ((height)>(ymax)?(height):(ymax));
	scalex = bb.x / xmax;
	scaley = bb.y / ymax;
	for (i = 0; i < sides; i++) {
	    P = vertices[i];
	    P.x *= scalex;
	    P.y *= scaley;
	    vertices[i] = P;
	}
	if (peripheries > 1) {
	    Q = vertices[(sides - 1)];
	    R = vertices[0];
	    beta = atan2(R.y - Q.y, R.x - Q.x);
	    for (i = 0; i < sides; i++) {
		/*for each vertex find the bisector */
		P = Q;
		Q = R;
		R = vertices[(i + 1) % sides];
		alpha = beta;
		beta = atan2(R.y - Q.y, R.x - Q.x);
		gamma = (alpha + 3.14159265358979323846 - beta) / 2.;
		/*find distance along bisector to */
		/*intersection of next periphery */
		temp = 4 / sin(gamma);
		/*convert this distance to x and y */
		*&sinx = sin((alpha - gamma)); *&cosx = cos((alpha - gamma));
		sinx *= temp;
		cosx *= temp;
		/*save the vertices of all the */
		/*peripheries at this base vertex */
		for (j = 1; j < peripheries; j++) {
		    Q.x += cosx;
		    Q.y += sinx;
		    vertices[i + j * sides] = Q;
		}
	    }
	    for (i = 0; i < sides; i++) {
		P = vertices[i + (peripheries - 1) * sides];
		bb.x = ((2. * fabs(P.x))>(bb.x)?(2. * fabs(P.x)):(bb.x));
		bb.y = ((2. * fabs(P.y))>(bb.y)?(2. * fabs(P.y)):(bb.y));
	    }
	}
    }
    poly->regular = regular;
    poly->peripheries = peripheries;
    poly->sides = sides;
    poly->orientation = orientation;
    poly->skew = skew;
    poly->distortion = distortion;
    poly->vertices = vertices;
    if (poly->option & (1 << 11)) {
	/* set width and height to reflect label and shape */
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width) = ((((dimen.x)>(bb.x)?(dimen.x):(bb.x)))/(double)72);
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height) = ((((dimen.y)>(bb.y)?(dimen.y):(bb.y)))/(double)72);
    } else {
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->width) = ((bb.x)/(double)72);
	(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->height) = ((bb.y)/(double)72);
    }
    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->shape_info) = (void *) poly;
}

