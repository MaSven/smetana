public static void bezier_clip(__ptr__ inside_context, __ptr__ inside, __array_of_struct__ sp, boolean left_inside) {
    final __array_of_struct__ seg = __array_of_struct__.malloc(pointf.class, 4);
    final __array_of_struct__ best = __array_of_struct__.malloc(pointf.class, 4);
    final __struct__<pointf> pt = __struct__.from(pointf.class), opt = __struct__.from(pointf.class);
    __ptr__ left, right;
    final MutableDouble low = new MutableDouble(0), high = new MutableDouble(0);
    double t;
    MutableDouble idir, odir;
    boolean found;
    int i;
    if (left_inside) {
	left = null;
	right = (pointf) seg.asPtr();
	pt.____(sp.plus(0).getStruct());
	idir = low;
	odir = high;
    } else {
	left = (pointf) seg.asPtr();
	right = null;
	pt.____(sp.plus(3).getStruct());
	idir = high;
	odir = low;
    }
    found = false;
    low.setValue(0.0);
    high.setValue(1.0);
    do {
	opt.____(pt);
	t = (high.getValue() + low.getValue()) / 2.0;
	pt.____(Bezier(sp, 3, t, left, right));
	if ((Boolean) ((CFunction)inside).exe(inside_context, pt)) {
	    idir.setValue(t);
	} else {
	    for (i = 0; i < 4; i++)
		best.plus(i).setStruct(seg.plus(i).getStruct());
	    found = NOT(false);
	    odir.setValue(t);
	}
    } while (ABS(opt.getDouble("x") - pt.getDouble("x")) > .5 || ABS(opt.getDouble("y") - pt.getDouble("y")) > .5);
    if (found)
	for (i = 0; i < 4; i++)
	    sp.plus(i).setStruct(best.plus(i).getStruct());
    else
	for (i = 0; i < 4; i++)
	    sp.plus(i).setStruct(seg.plus(i).getStruct());
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void bezier_clip(inside_t * inside_context,
		 boolean(*inside) (inside_t * inside_context, pointf p),
		 pointf * sp, boolean left_inside)
{
    pointf seg[4], best[4], pt, opt, *left, *right;
    double low, high, t, *idir, *odir;
    boolean found;
    int i;
    if (left_inside) {
	left = NULL;
	right = seg;
	pt = sp[0];
	idir = &low;
	odir = &high;
    } else {
	left = seg;
	right = NULL;
	pt = sp[3];
	idir = &high;
	odir = &low;
    }
    found = 0;
    low = 0.0;
    high = 1.0;
    do {
	opt = pt;
	t = (high + low) / 2.0;
	pt = Bezier(sp, 3, t, left, right);
	if (inside(inside_context, pt)) {
	    *idir = t;
	} else {
	    for (i = 0; i < 4; i++)
		best[i] = seg[i];
	    found = NOT(0);
	    *odir = t;
	}
    } while (ABS(opt.x - pt.x) > .5 || ABS(opt.y - pt.y) > .5);
    if (found)
	for (i = 0; i < 4; i++)
	    sp[i] = best[i];
    else
	for (i = 0; i < 4; i++)
	    sp[i] = seg[i];
}

