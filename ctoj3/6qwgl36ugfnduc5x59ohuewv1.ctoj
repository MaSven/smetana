public static __struct__<boxf> maximal_bbox(Agraph_s g, spline_info_t sp, Agnode_s vn, Agedge_s ie, Agedge_s oe) {
    double b, nb;
    Agraph_s left_cl, right_cl;
    Agnode_s left, right;
    final __struct__<boxf> rv = __struct__.from(boxf.class);
    left_cl = right_cl = null;
    /* give this node all the available space up to its neighbors */
    b = (double)(ND_coord(vn).getDouble("x") - ND_lw(vn) - 4);
    if ((left = neighbor(g, vn, ie, oe, -1))!=null) {
	if ((left_cl = cl_bound(g, vn, left))!=null)
	    nb = GD_bb(left_cl).getPtr("UR").getDouble("x") + (double)(sp.getInt("Splinesep"));
	else {
	    nb = (double)(ND_coord(left).getDouble("x") + ND_mval(left));
	    if (ND_node_type(left) == 0)
		nb += GD_nodesep(g) / 2.;
	    else
		nb += (double)(sp.getInt("Splinesep"));
	}
	if (nb < b)
	    b = nb;
	rv.getStruct("LL").setDouble("x", ROUND(b));
    } else
	rv.getStruct("LL").setDouble("x", MIN(ROUND(b), sp.getInt("LeftBound")));
    /* we have to leave room for our own label! */
    if ((ND_node_type(vn) == 1) && (ND_label(vn)!=null))
	b = (double)(ND_coord(vn).getDouble("x") + 10);
    else
	b = (double)(ND_coord(vn).getDouble("x") + ND_rw(vn) + 4);
    if ((right = neighbor(g, vn, ie, oe, 1))!=null) {
	if ((right_cl = cl_bound(g, vn, right))!=null)
	    nb = GD_bb(right_cl).getStruct("LL").getDouble("x") - (double)(sp.getInt("Splinesep"));
	else {
	    nb = ND_coord(right).getDouble("x") - ND_lw(right);
	    if (ND_node_type(right) == 0)
		nb -= GD_nodesep(g) / 2.;
	    else
		nb -= (double)(sp.getInt("Splinesep"));
	}
	if (nb > b)
	    b = nb;
	rv.getStruct("UR").setDouble("x", ROUND(b));
    } else
	rv.getStruct("UR").setDouble("x", MAX(ROUND(b), sp.getInt("RightBound")));
    if ((ND_node_type(vn) == 1) && (ND_label(vn)!=null)) {
	rv.getStruct("UR").setDouble("x", rv.getStruct("UR").getDouble("x") - ND_rw(vn));
	if (rv.getStruct("UR").getDouble("x") < rv.getStruct("LL").getDouble("x")) rv.getStruct("UR").setDouble("x", ND_coord(vn).getDouble("x"));
    }
    rv.getStruct("LL").setDouble("y", ND_coord(vn).getDouble("y") - GD_rank(g).plus(ND_rank(vn)).getDouble("ht1"));
    rv.getStruct("UR").setDouble("y", ND_coord(vn).getDouble("y") + GD_rank(g).plus(ND_rank(vn)).getDouble("ht2"));
    return rv;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static boxf maximal_bbox(graph_t* g, spline_info_t* sp, node_t* vn, edge_t* ie, edge_t* oe)
{
    double b, nb;
    graph_t *left_cl, *right_cl;
    node_t *left, *right;
    boxf rv;
    left_cl = right_cl = NULL;
    /* give this node all the available space up to its neighbors */
    b = (double)(ND_coord(vn).x - ND_lw(vn) - 4);
    if ((left = neighbor(g, vn, ie, oe, -1))) {
	if ((left_cl = cl_bound(g, vn, left)))
	    nb = GD_bb(left_cl).UR.x + (double)(sp->Splinesep);
	else {
	    nb = (double)(ND_coord(left).x + ND_mval(left));
	    if (ND_node_type(left) == 0)
		nb += GD_nodesep(g) / 2.;
	    else
		nb += (double)(sp->Splinesep);
	}
	if (nb < b)
	    b = nb;
	rv.LL.x = ROUND(b);
    } else
	rv.LL.x = MIN(ROUND(b), sp->LeftBound);
    /* we have to leave room for our own label! */
    if ((ND_node_type(vn) == 1) && (ND_label(vn)))
	b = (double)(ND_coord(vn).x + 10);
    else
	b = (double)(ND_coord(vn).x + ND_rw(vn) + 4);
    if ((right = neighbor(g, vn, ie, oe, 1))) {
	if ((right_cl = cl_bound(g, vn, right)))
	    nb = GD_bb(right_cl).LL.x - (double)(sp->Splinesep);
	else {
	    nb = ND_coord(right).x - ND_lw(right);
	    if (ND_node_type(right) == 0)
		nb -= GD_nodesep(g) / 2.;
	    else
		nb -= (double)(sp->Splinesep);
	}
	if (nb > b)
	    b = nb;
	rv.UR.x = ROUND(b);
    } else
	rv.UR.x = MAX(ROUND(b), sp->RightBound);
    if ((ND_node_type(vn) == 1) && (ND_label(vn))) {
	rv.UR.x -= ND_rw(vn);
	if (rv.UR.x < rv.LL.x) rv.UR.x = ND_coord(vn).x;
    }
    rv.LL.y = ND_coord(vn).y - GD_rank(g)[ND_rank(vn)].ht1;
    rv.UR.y = ND_coord(vn).y + GD_rank(g)[ND_rank(vn)].ht2;
    return rv;
}

