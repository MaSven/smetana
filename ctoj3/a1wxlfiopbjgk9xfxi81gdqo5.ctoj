public static void cleanup1(Agraph_s g) {
    Agnode_s n;
    Agedge_s e, f;
    int c;
    for (c = 0; c < g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").getInt("size"); c++) {
	g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setPtr("nlist", 	
	 g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").getArrayOfPtr("list", c));
	for (
		n = (Agnode_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
		; n!=null ; n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next")) {
	    renewlist((elist) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("in"));
	    renewlist((elist) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("out"));
		n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("mark", 0);
    }
    }
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n)) {
	for (e = agfstout(g, n); e!=null; e = agnxtout(g, e)) {
	    f = (Agedge_s) e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getPtr("to_virt");
	    /* Null out any other references to f to make sure we don't 
	     * handle it a second time. For example, parallel multiedges 
	     * share a virtual edge.
	     */
	    if (f!=null && EQ(e ,f.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getPtr("to_orig"))) {
		Agedge_s e1, f1;
		Agnode_s n1;
		for (n1 = agfstnode(g); n1!=null; n1 = agnxtnode(g, n1)) {
		    for (e1 = agfstout(g, n1); e1!=null; e1 = agnxtout(g, e1)) {
			if (NEQ(e, e1)) {
			    f1 = (Agedge_s) e1.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getPtr("to_virt");
			    if (f1!=null && EQ(f, f1)) {
				e1.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).setPtr("to_virt", null);
			    }
			}
		    }
		}
		Memory.free(f.getPtr("base").getPtr("data"));
		Memory.free(f);
	    }
	    e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).setPtr("to_virt", null);
	}
    }
    Memory.free(g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").getPtr("list"));
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").setPtr("list", null);
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("comp").setInt("size", 0);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void 
cleanup1(graph_t * g)
{
    node_t *n;
    edge_t *e, *f;
    int c;
    for (c = 0; c < (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).size; c++) {
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist) = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list[c];
	for (n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next)) {
	    renewlist(&(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->in));
	    renewlist(&(((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->out));
	    (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->mark) = 0;
	}
    }
    for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
	    f = (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->to_virt);
	    /* Null out any other references to f to make sure we don't 
	     * handle it a second time. For example, parallel multiedges 
	     * share a virtual edge.
	     */
	    if (f && (e == (((Agedgeinfo_t*)(((Agobj_t*)(f))->data))->to_orig))) {
		edge_t *e1, *f1;
		node_t *n1;
		for (n1 = agfstnode(g); n1; n1 = agnxtnode(g, n1)) {
		    for (e1 = agfstout(g, n1); e1; e1 = agnxtout(g, e1)) {
			if (e != e1) {
			    f1 = (((Agedgeinfo_t*)(((Agobj_t*)(e1))->data))->to_virt);
			    if (f1 && (f == f1)) {
				(((Agedgeinfo_t*)(((Agobj_t*)(e1))->data))->to_virt) = NULL;
			    }
			}
		    }
		}
		free(f->base.data);
		free(f);
	    }
	    (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->to_virt) = NULL;
	}
    }
    free((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list);
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list = NULL;
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).size = 0;
}

