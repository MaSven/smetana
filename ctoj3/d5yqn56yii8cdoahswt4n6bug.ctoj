public static Agraph_s agopen(CString name, final __struct__<Agdesc_s> desc, Agdisc_s arg_disc) {
		Agraph_s g;
		Agclos_s clos;
		int gid[] = new int[1];
		clos = agclos(arg_disc);
		g = (Agraph_s) clos.getStruct("disc").getPtr("mem").call("alloc", clos.getStruct("state").getPtr("mem"), sizeof(Agraph_s.class));
    	AGTYPE(g, AGRAPH);
		g.setPtr("clos", clos);
		g.setStruct("desc", desc);
		g.getStruct("desc").setInt("maingraph", ASINT((N(0))));
		g.setPtr("root", g);
		g.getPtr("clos").getStruct("state").setPtr("id", (__ptr__) g.getPtr("clos").getStruct("disc").getPtr("id").call("open", g, arg_disc));
		 if (agmapnametoid(g, AGRAPH, name, gid, (N(0)))!=0)
		   AGID(g, gid[0]);
		// /* else AGID(g) = 0 because we have no alternatives */
		g = agopen1(g);
		agregister(g, AGRAPH, g);
		return g;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Agraph_t *agopen(char *name, Agdesc_t desc, Agdisc_t * arg_disc)
{
    Agraph_t *g;
    Agclos_t *clos;
    unsigned long gid;
    clos = agclos(arg_disc);
    g = clos->disc.mem->alloc(clos->state.mem, sizeof(Agraph_t));
    AGTYPE(g) = AGRAPH;
    g->clos = clos;
    g->desc = desc;
    g->desc.maingraph = (!(0));
    g->root = g;
    g->clos->state.id = g->clos->disc.id->open(g, arg_disc);
    if (agmapnametoid(g, AGRAPH, name, &gid, (!(0))))
	AGID(g) = gid;
    /* else AGID(g) = 0 because we have no alternatives */
    g = agopen1(g);
    agregister(g, AGRAPH, g);
    return g;
}

