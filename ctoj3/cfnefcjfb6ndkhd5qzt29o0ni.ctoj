public static void build_ranks(Agraph_s g, int pass) {
	// REVIEW 17/01/2016
    int i, j;
    Agnode_s n, n0 = null;
    __ptr__ otheredges;
    nodequeue q;
    q = new_queue(g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("n_nodes"));
    for (n = (Agnode_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
	; n!=null
	; n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next"))
		n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("mark", 0);
	for (i = g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("minrank")
	; i <= g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("maxrank")
	; i++)
	  g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getArrayOfPtr("rank", i).setInt("n", 0);
for (n = (Agnode_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("nlist")
; n!=null;
 n = (Agnode_s) n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("next")) {
	otheredges = pass == 0 ?
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("in").getPtr("list") 
	:
	n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("out").getPtr("list") 
	;
	if (otheredges.getBracket(0) != null)
	    continue;
if (n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("mark") == 0) {
	    n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("mark", 1);
	    enqueue(q, n);
	    while ((n0 = dequeue(q))!=null) {
		if (n0.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("ranktype") != 7) {
		    install_in_rank(g, n0);
		    enqueue_neighbors(q, n0, pass);
		} else {
		    install_cluster(g, n0, pass, q);
		}
	    }
    }
    }
if (dequeue(q)!=null)
UNSUPPORTED("1b3hbd5artrq77i58q2o9kgz3"); // 	agerr(AGERR, "surprise\n");
    for (i = g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("minrank")
	; i <= g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("maxrank")
	; i++) {
	Root.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getArrayOfPtr("rank", i).setInt("valid", 0);
if (
((g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("rankdir") & 0x3) & 1) !=0
&&
 (g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getArrayOfPtr("rank", i).getInt("n") > 0)
 ) {
UNSUPPORTED("405degi9t91rpd6o3z9t9qiia"); // 	    int n, ndiv2;
UNSUPPORTED("30a8pq377cbku4twl05adqnl8"); // 	    node_t **vlist = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[i].v;
UNSUPPORTED("cfmxgrmesluueh7e2f38tn40w"); // 	    n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[i].n - 1;
UNSUPPORTED("d9ly5w1rjmgw0qm3rsvyaw02t"); // 	    ndiv2 = n / 2;
UNSUPPORTED("2g7cqttybpzo43r72tup95jco"); // 	    for (j = 0; j <= ndiv2; j++)
UNSUPPORTED("ekxdw1q97g78loiy5tfa8inw"); // 		exchange(vlist[j], vlist[n - j]);
	}
    }
    if (EQ(g, dot_root(g)) && ncross(g) > 0)
	transpose(g, 0);
    free_queue(q);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void build_ranks(graph_t * g, int pass)
{
    int i, j;
    node_t *n, *n0;
    edge_t **otheredges;
    nodequeue *q;
    q = new_queue((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->n_nodes));
    for (n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next))
	((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->mark)) = 0;
    for (i = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->minrank); i <= (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->maxrank); i++)
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[i].n = 0;
    for (n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist); n; n = (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->next)) {
	otheredges = ((pass == 0) ? (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->in).list : (((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->out).list);
	if (otheredges[0] != NULL)
	    continue;
	if (((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->mark)) == 0) {
	    ((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->mark)) = (!(0));
	    enqueue(q, n);
	    while ((n0 = dequeue(q))) {
		if ((((Agnodeinfo_t*)(((Agobj_t*)(n0))->data))->ranktype) != 7) {
		    install_in_rank(g, n0);
		    enqueue_neighbors(q, n0, pass);
		} else {
		    install_cluster(g, n0, pass, q);
		}
	    }
	}
    }
    if (dequeue(q))
	agerr(AGERR, "surprise\n");
    for (i = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->minrank); i <= (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->maxrank); i++) {
	(((Agraphinfo_t*)(((Agobj_t*)(Root))->data))->rank)[i].valid = 0;
	if (((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rankdir & 0x3) & 1) && ((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[i].n > 0)) {
	    int n, ndiv2;
	    node_t **vlist = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[i].v;
	    n = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[i].n - 1;
	    ndiv2 = n / 2;
	    for (j = 0; j <= ndiv2; j++)
		exchange(vlist[j], vlist[n - j]);
	}
    }
    if ((g == dot_root(g)) && ncross(g) > 0)
	transpose(g, 0);
    free_queue(q);
}

