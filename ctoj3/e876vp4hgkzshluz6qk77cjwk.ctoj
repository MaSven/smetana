public static void dot_mincross(Agraph_s g, boolean doBalance) {
    int c, nc;
    CString s;
    init_mincross(g);
    for (nc = c = 0; c < GD_comp(g).getInt("size"); c++) {
	init_mccomp(g, c);
	nc += mincross_(g, 0, 2, doBalance);
    }
    merge2(g);
    /* run mincross on contents of each cluster */
    for (c = 1; c <= GD_n_cluster(g); c++) {
	nc += mincross_clust(g, (Agraph_s) GD_clust(g).plus(c).getPtr(), doBalance);
    }
    if ((GD_n_cluster(g) > 0)
	&& (N(s = agget(g, new CString("remincross"))) || (mapbool(s)))) {
	mark_lowclusters(g);
	Z._().ReMincross = NOT(0);
	nc = mincross_(g, 2, 2, doBalance);
    }
    cleanup2(g, nc);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void dot_mincross(graph_t * g, int doBalance)
{
    int c, nc;
    char *s;
    init_mincross(g);
    for (nc = c = 0; c < GD_comp(g).size; c++) {
	init_mccomp(g, c);
	nc += mincross(g, 0, 2, doBalance);
    }
    merge2(g);
    /* run mincross on contents of each cluster */
    for (c = 1; c <= GD_n_cluster(g); c++) {
	nc += mincross_clust(g, GD_clust(g)[c], doBalance);
    }
    if ((GD_n_cluster(g) > 0)
	&& (!(s = agget(g, "remincross")) || (mapbool(s)))) {
	mark_lowclusters(g);
	ReMincross = NOT(0);
	nc = mincross(g, 2, 2, doBalance);
    }
    cleanup2(g, nc);
}

