public static void flat_rev(Agraph_s g, Agedge_s e) {
    int j;
    Agedge_s rev;
    if (N(ND_flat_out(aghead(e)).getArrayOfPtr("list")))
	rev = null;
    else
	for (j = 0; (rev = (Agedge_s) ND_flat_out(aghead(e)).getArrayOfPtr("list").plus(j).getPtr())!=null; j++)
	    if (EQ(aghead(rev), agtail(e)))
		break;
    if (rev!=null) {
	merge_oneway(e, rev);
	if (ED_to_virt(e) == null)
	    ED_to_virt(e, rev);
	if ((ED_edge_type(rev) == 4)
	    && (ED_to_orig(rev) == null))
	    ED_to_orig(rev, e);
	elist_append(e, ND_other(agtail(e)));
    } else {
	rev = new_virtual_edge(aghead(e), agtail(e), e);
	if (ED_edge_type(e) == 4)
	    ED_edge_type(rev, 4);
	else
	    ED_edge_type(rev, 3);
	ED_label(rev, ED_label(e));
	flat_edge(g, rev);
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void flat_rev(Agraph_t * g, Agedge_t * e)
{
    int j;
    Agedge_t *rev;
    if (!ND_flat_out(aghead(e)).list)
	rev = NULL;
    else
	for (j = 0; (rev = ND_flat_out(aghead(e)).list[j]); j++)
	    if (aghead(rev) == agtail(e))
		break;
    if (rev) {
	merge_oneway(e, rev);
	if (ED_to_virt(e) == 0)
	    ED_to_virt(e) = rev;
	if ((ED_edge_type(rev) == 4)
	    && (ED_to_orig(rev) == 0))
	    ED_to_orig(rev) = e;
	elist_append(e, ND_other(agtail(e)));
    } else {
	rev = new_virtual_edge(aghead(e), agtail(e), e);
	if (ED_edge_type(e) == 4)
	    ED_edge_type(rev) = 4;
	else
	    ED_edge_type(rev) = 3;
	ED_label(rev) = ED_label(e);
	flat_edge(g, rev);
    }
}

