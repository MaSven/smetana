public static int Proutespline(__ptr__ edges, int edgen, final __struct__<Ppoly_t> input, __ptr__ evs, __ptr__ output) {
    __ptr__ inps;
    int inpn;
    /* unpack into previous format rather than modify legacy code */
    inps = input.getPtr("ps");
    inpn = input.getInt("pn");
    if (setjmp(jbuf)!=0)
UNSUPPORTED("8d9xfgejx5vgd6shva5wk5k06"); // 	return -1;
    /* generate the splines */
    evs.plus(0).getStruct().____(normv(evs.plus(0).getStruct()));
    evs.plus(1).getStruct().____(normv(evs.plus(1).getStruct()));
    opl = 0;
    growops(4);
    ops.plus(opl).setStruct(inps.plus(0).getStruct());
    opl++;
    if (reallyroutespline(edges, edgen, inps, inpn, evs.plus(0).getStruct(), evs.plus(1).getStruct()) == -1)
	return -1;
    output.setInt("pn", opl);
    output.setPtr("ps", ops);
    return 0;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
int Proutespline(Pedge_t * edges, int edgen, Ppolyline_t input,
		 Ppoint_t * evs, Ppolyline_t * output)
{
    Ppoint_t *inps;
    int inpn;
    /* unpack into previous format rather than modify legacy code */
    inps = input.ps;
    inpn = input.pn;
    if (setjmp(jbuf))
	return -1;
    /* generate the splines */
    evs[0] = normv(evs[0]);
    evs[1] = normv(evs[1]);
    opl = 0;
    growops(4);
    ops[opl++] = inps[0];
    if (reallyroutespline(edges, edgen, inps, inpn, evs[0], evs[1]) == -1)
	return -1;
    output->pn = opl;
    output->ps = ops;
    return 0;
}

