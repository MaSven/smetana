static void _dot_splines(Agraph_s g, int normalize) {
    int i, j, k, n_nodes, n_edges, ind, cnt;
    Agnode_s n;
    Agedgeinfo_t fwdedgeai = (Agedgeinfo_t) Memory.malloc(Agedgeinfo_t.class), fwdedgebi = (Agedgeinfo_t) Memory.malloc(Agedgeinfo_t.class);
    Agedgepair_s fwdedgea = (Agedgepair_s) Memory.malloc(Agedgepair_s.class), fwdedgeb = (Agedgepair_s) Memory.malloc(Agedgepair_s.class);
    Agedge_s e, e0, e1, ea, eb, le0, le1;
    __ptr__ edges;
    path P;
    spline_info_t sd = (spline_info_t) Memory.malloc(spline_info_t.class);
    int et = (GD_flags(g) & (7 << 1));
    fwdedgea.getPtr("out").getPtr("base").setPtr("data", fwdedgeai);
    fwdedgeb.getPtr("out").getPtr("base").setPtr("data", fwdedgebi);
    if (et == (0 << 1)) return; 
    if (et == (2 << 1)) {
	resetRW (g);
	if ((GD_has_labels(g) & (1 << 0))!=0) {
UNSUPPORTED("4k888z8ymdp2b653twxc1ugbu"); // 	    agerr (AGWARN, "edge labels with splines=curved not supported in dot - use xlabels\n");
	}
	for (n = agfstnode (g); n!=null; n = agnxtnode(g, n)) {
	    for (e = agfstout(g, n); e!=null; e = agnxtout(g,e)) {
		makeStraightEdge(g, e, et, sinfo);
	    }
	}
UNSUPPORTED("46btiag50nczzur103eqhjcup"); // 	goto finish;
    } 
    mark_lowclusters(g);
    if (routesplinesinit()!=0) return;
    P = (path) zmalloc(sizeof(path.class));
    /* FlatHeight = 2 * GD_nodesep(g); */
    sd.setInt("Splinesep", GD_nodesep(g) / 4);
    sd.setInt("Multisep", GD_nodesep(g));
    edges = zmalloc(sizeof_starstar(Agedge_s.class, 128));
    /* compute boundaries and list of splines */
    sd.setInt("RightBound", 0);
    sd.setInt("LeftBound", 0);
    n_edges = n_nodes = 0;
    for (i = GD_minrank(g); i <= GD_maxrank(g); i++) {
	n_nodes += GD_rank(g).getBracket(i).getInt("n");
	if ((n = (Agnode_s) GD_rank(g).getBracket(i).getArray("v", 0))!=null)
	    sd.setInt("LeftBound", (int)MIN(sd.getInt("LeftBound"), (ND_coord(n).getDouble("x") - ND_lw(n))));
	if (GD_rank(g).getBracket(i).getInt("n")!=0 && (n = (Agnode_s) GD_rank(g).getBracket(i).getArray("v", GD_rank(g).getBracket(i).getInt("n") - 1))!=null)
	    sd.setInt("RightBound", (int)MAX(sd.getInt("RightBound"), (ND_coord(n).getDouble("x") + ND_rw(n))));
	sd.setInt("LeftBound", sd.getInt("LeftBound") - 16);
	sd.setInt("RightBound", sd.getInt("RightBound") + 16);
	for (j = 0; j < GD_rank(g).getBracket(i).getInt("n"); j++) {
	    n = (Agnode_s) GD_rank(g).getBracket(i).getArray("v", j);
		/* if n is the label of a flat edge, copy its position to
		 * the label.
		 */
	    if (ND_alg(n)!=null) {
UNSUPPORTED("5ccfgna84rl1jtgmuk8nbffqy"); // 		edge_t* fe = (edge_t*)ND_alg(n);
UNSUPPORTED("491vob6ykt7vk18zsgjm6l2zr"); // 		assert (ED_label(fe));
UNSUPPORTED("dmdpxf403p3cj5res72ow5qir"); // 		ED_label(fe)->pos = ND_coord(n);
UNSUPPORTED("equ6t5h0u8rkyhzp6p1aq8pvo"); // 		ED_label(fe)->set = NOT(0);
	    }
	    if ((ND_node_type(n) != 0) &&
		((Integer)sinfo.call("splineMerge", n) == 0))
		continue;
	    for (k = 0; (e = (Agedge_s) ND_out(n).getArray("list", k))!=null; k++) {
		if ((ED_edge_type(e) == 4)
		    || (ED_edge_type(e) == 6))
		    continue;
		setflags(e, 1, 16, 64);
		edges.setBracket(n_edges++, e);
		if (n_edges % 128 == 0)
		    edges = ALLOC (n_edges + 128, edges, Agedge_s.class);
	    }
	    if (ND_flat_out(n).getPtr("list")!=null)
		for (k = 0; (e = (Agedge_s) ND_flat_out(n).getArray("list", k))!=null; k++) {
		    setflags(e, 2, 0, 128);
		    edges.setBracket(n_edges++, e);
		    if (n_edges % 128 == 0)
			edges = ALLOC (n_edges + 128, edges, Agedge_s.class);
		}
	    if (ND_other(n).getPtr("list")!=null) {
		/* In position, each node has its rw stored in mval and,
                 * if a node is part of a loop, rw may be increased to
                 * reflect the loops and associated labels. We restore
                 * the original value here. 
                 */
		if (ND_node_type(n) == 0) {
		    double tmp = ND_rw(n);
		    ND_rw(n, ND_mval(n));
		    ND_mval(n, tmp);
		}
		for (k = 0; (e = (Agedge_s) ND_other(n).getArray("list", k))!=null; k++) {
		    setflags(e, 0, 0, 128);
		    edges.setBracket(n_edges++, e);
		    if (n_edges % 128 == 0)
			edges = ALLOC (n_edges + 128, edges, Agedge_s.class);
		}
	    }
	}
    }
    /* Sort so that equivalent edges are contiguous. 
     * Equivalence should basically mean that 2 edges have the
     * same set {(tailnode,tailport),(headnode,headport)}, or
     * alternatively, the edges would be routed identically if
     * routed separately.
     */
    qsort(edges.getBracket(0),
    n_edges,
    sizeof(edges.getBracket(0)),
    function(dotsplines__c.class, "edgecmp"));
    /* FIXME: just how many boxes can there be? */
    P.setPtr("boxes", zmalloc(sizeof(boxf.class, n_nodes + 20 * 2 * 9)));
    sd.setPtr("Rank_box", zmalloc(sizeof(boxf.class, i)));
    if (et == (1 << 1)) {
    /* place regular edge labels */
	for (n = GD_nlist(g); n!=null; n = ND_next(n)) {
	    if ((ND_node_type(n) == 1) && (ND_label(n)!=null)) {
		place_vnlabel(n);
	    }
	}
    }
    for (i = 0; i < n_edges;) {
 	boolean havePorts;
	ind = i;
	le0 = getmainedge((e0 = (Agedge_s) edges.getBracket(i++)));
	if (ED_tail_port(e0).getBoolean("defined") || ED_head_port(e0).getBoolean("defined")) {
	    havePorts = NOT(false);
	    ea = e0;
	} else {
	    havePorts = false;
	    ea =  le0;
	}
UNSUPPORTED("cobwft4vc4ps12ztouyfhkf2s"); // 	if (ED_tree_index(ea) & 32) {
UNSUPPORTED("a2yto9rc78dq3zv7gecboim9d"); // 	    { edge_t *newp; Agedgeinfo_t *info; newp = &fwdedgea.out; info = (Agedgeinfo_t*)newp->base.data; *info = *(Agedgeinfo_t*)ea->base.data; *newp = *ea; newp->base.data = (Agrec_t*)info; AGTAIL(newp) = AGHEAD(ea); AGHEAD(newp) = AGTAIL(ea); ED_tail_port(newp) = ED_head_port(ea); ED_head_port(newp) = ED_tail_port(ea); ED_edge_type(newp) = 1; ED_to_orig(newp) = ea; };
UNSUPPORTED("bsdsjxk9xm8m2v0qrh9l38k8p"); // 	    ea = &fwdedgea.out;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("37opiyr41fc5xr4moeo47vc04"); // 	for (cnt = 1; i < n_edges; cnt++, i++) {
UNSUPPORTED("983ih30ayhr1lzknncnx5v7h0"); // 	    if (le0 != (le1 = getmainedge((e1 = edges[i]))))
UNSUPPORTED("9ekmvj13iaml5ndszqyxa8eq"); // 		break;
UNSUPPORTED("eagvi5np4lznxosx76h2395kk"); // 	    if (ED_adjacent(e0)) continue; /* all flat adjacent edges at once */
UNSUPPORTED("36ukzzbqwwrugncmoypyehamx"); // 	    if (ED_tail_port(e1).defined || ED_head_port(e1).defined) {
UNSUPPORTED("9cttxreydhgfl09uib24m67mf"); // 		if (!havePorts) break;
UNSUPPORTED("7e1uy5mzei37p66t8jp01r3mk"); // 		else
UNSUPPORTED("5kgsceaw05m62ez6cjsi2737r"); // 		    eb = e1;
UNSUPPORTED("175pyfe8j8mbhdwvrbx3gmew9"); // 	    } else {
UNSUPPORTED("40qj6thppjbc7c83vvb5jldyr"); // 		if (havePorts) break;
UNSUPPORTED("7e1uy5mzei37p66t8jp01r3mk"); // 		else
UNSUPPORTED("88fkkyx6k3qggp4e6anlpn4fv"); // 		    eb = le1;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("2i6hmkiupoa8cejw1rx1pnsa3"); // 	    if (ED_tree_index(eb) & 32) {
UNSUPPORTED("4x7xut1vwbxpfnmvotf46ryi1"); // 		{ edge_t *newp; Agedgeinfo_t *info; newp = &fwdedgeb.out; info = (Agedgeinfo_t*)newp->base.data; *info = *(Agedgeinfo_t*)eb->base.data; *newp = *eb; newp->base.data = (Agrec_t*)info; AGTAIL(newp) = AGHEAD(eb); AGHEAD(newp) = AGTAIL(eb); ED_tail_port(newp) = ED_head_port(eb); ED_head_port(newp) = ED_tail_port(eb); ED_edge_type(newp) = 1; ED_to_orig(newp) = eb; };
UNSUPPORTED("63z6sleiaefvlnvc91jjtxbrc"); // 		eb = &fwdedgeb.out;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("dmucmxu1beu9d6hkagdcp2qeo"); // 	    if (portcmp(ED_tail_port(ea), ED_tail_port(eb)))
UNSUPPORTED("9ekmvj13iaml5ndszqyxa8eq"); // 		break;
UNSUPPORTED("2m8agn69pch8ufba30ces6uby"); // 	    if (portcmp(ED_head_port(ea), ED_head_port(eb)))
UNSUPPORTED("9ekmvj13iaml5ndszqyxa8eq"); // 		break;
UNSUPPORTED("eqlormixd8ks3ozymrfofn5b5"); // 	    if ((ED_tree_index(e0) & 15) == 2
UNSUPPORTED("9py7h7ohbemy0f72clix5dm9w"); // 		&& ED_label(e0) != ED_label(e1))
UNSUPPORTED("9ekmvj13iaml5ndszqyxa8eq"); // 		break;
UNSUPPORTED("duvz0el020n4dl9glct5rxxld"); // 	    if (ED_tree_index(edges[i]) & 64)	/* Aha! -C is on */
UNSUPPORTED("9ekmvj13iaml5ndszqyxa8eq"); // 		break;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("912vzaosg0fvsotzkl7z89ske"); // 	if (agtail(e0) == aghead(e0)) {
UNSUPPORTED("cwxxrpy49vz9xfyv9uaz99gdi"); // 	    int b, sizey, r;
UNSUPPORTED("7otw7dg5a3bb7fecdwruhmrvp"); // 	    n = agtail(e0);
UNSUPPORTED("e7utclljkgkmer894j924vy6f"); // 	    r = ND_rank(n);
UNSUPPORTED("6i97euivukaemb20gvlupi09f"); // 	    if (r == GD_maxrank(g)) {
UNSUPPORTED("enb2meghc31mwxstglg9x7xb2"); // 		if (r > 0)
UNSUPPORTED("5c0t14k5nx3yiw0imb2k8nr8"); // 		    sizey = ND_coord(GD_rank(g)[r-1].v[0]).y - ND_coord(n).y;
UNSUPPORTED("7e1uy5mzei37p66t8jp01r3mk"); // 		else
UNSUPPORTED("7ysnd9u28fxaq03r1ijoicf2p"); // 		    sizey = ND_ht(n);
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("7jwkt8epzn4q98wm4mhyuab5u"); // 	    else if (r == GD_minrank(g)) {
UNSUPPORTED("cctmm7rnif4tolnaloyp5dg4z"); // 		sizey = ND_coord(n).y - ND_coord(GD_rank(g)[r+1].v[0]).y;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("6q044im7742qhglc4553noina"); // 	    else {
UNSUPPORTED("4l74utbfn20srimll95p0ixoc"); // 		int upy = ND_coord(GD_rank(g)[r-1].v[0]).y - ND_coord(n).y;
UNSUPPORTED("9472mw1lvatndypkj69f5p2gi"); // 		int dwny = ND_coord(n).y - ND_coord(GD_rank(g)[r+1].v[0]).y;
UNSUPPORTED("kcgrqbrfak4g32acoi0xp76t"); // 		sizey = MIN(upy, dwny);
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("f4sgy1slqv6tctrbi0fvi24zl"); // 	    makeSelfEdge(P, edges, ind, cnt, sd.Multisep, sizey/2, &sinfo);
UNSUPPORTED("5sk20l84pkw9w72ugylxsiccx"); // 	    for (b = 0; b < cnt; b++) {
UNSUPPORTED("f4s98j6o7ri1shqms39c3osal"); // 		e = edges[ind+b];
UNSUPPORTED("14r9xzdxj12x56xirgma31no3"); // 		if (ED_label(e))
UNSUPPORTED("3tm7ws9fi8p3fkp27am0q42qi"); // 		    updateBB(g, ED_label(e));
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("3t8iw7e2u8g8pm8jmi90d85fs"); // 	else if (ND_rank(agtail(e0)) == ND_rank(aghead(e0))) {
UNSUPPORTED("c6f9xlhdxum5x7azsvkmnqp0o"); // 	    make_flat_edge(g, &sd, P, edges, ind, cnt, et);
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("9352ql3e58qs4fzapgjfrms2s"); // 	else
UNSUPPORTED("5cmvc3q4exegy3yuwnmhz0vyp"); // 	    make_regular_edge(g, &sd, P, edges, ind, cnt, et);
    }
    /* place regular edge labels */
UNSUPPORTED("8g62mxpap4eeua2lkn9a1iosi"); //     for (n = GD_nlist(g); n; n = ND_next(n)) {
UNSUPPORTED("ak6y4elnrka5m8ioo19frebx7"); // 	if ((ND_node_type(n) == 1) && (ND_label(n))) {
UNSUPPORTED("4w39ct9hxndczv8e4ctlgbzha"); // 	    place_vnlabel(n);
UNSUPPORTED("ohgp641pe8uyzr6o8mald2j8"); // 	    updateBB(g, ND_label(n));
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("6mrzl15kpzmyecrpat2d3513m"); //     /* normalize splines so they always go from tail to head */
UNSUPPORTED("f4imjybt8mlaaenp5xh7g87s5"); //     /* place_portlabel relies on this being done first */
UNSUPPORTED("926q5hqqolwppu8yp5uynfxol"); //     if (normalize)
UNSUPPORTED("8ogp6iebqnxezbttmxiuw2svj"); // 	edge_normalize(g);
UNSUPPORTED("dndhhrtyamnz785a911696dgg"); // finish :
UNSUPPORTED("e07zjhdpp09jufts4ibxkhexr"); //     /* vladimir: place port labels */
UNSUPPORTED("50atyu2nxiof63gcg8zomj5rw"); //     /* FIX: head and tail labels are not part of cluster bbox */
UNSUPPORTED("3z03ta0965bdhkbykeg4f8xdr"); //     if ((E_headlabel || E_taillabel) && (E_labelangle || E_labeldistance)) {
UNSUPPORTED("attp4bsjqe99xnhi7lr7pszar"); // 	for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
UNSUPPORTED("54jm4bbgzyl0txauszo1mappu"); // 	    if (E_headlabel) {
UNSUPPORTED("dw8yu56thd0wpolmtby8r5doo"); // 		for (e = agfstin(g, n); e; e = agnxtin(g, e))
UNSUPPORTED("4h39n1vkqyqszgmg2o7d2pw7z"); // 		    if (ED_head_label(AGMKOUT(e))) {
UNSUPPORTED("ex7h0x60y0l4oi3dsqg7sfk1t"); // 			place_portlabel(AGMKOUT(e), NOT(0));
UNSUPPORTED("9u960ou1xs0cdsdn0qe8a13ye"); // 			updateBB(g, ED_head_label(AGMKOUT(e)));
UNSUPPORTED("dkxvw03k2gg9anv4dbze06axd"); // 		    }
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("cqi8doquf015wo1bw8on36qct"); // 	    if (E_taillabel) {
UNSUPPORTED("6gnq0yj07udpwxbuc86k8yysb"); // 		for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
UNSUPPORTED("ejz8yrj8mh0l0gdl5zeaht1ex"); // 		    if (ED_tail_label(e)) {
UNSUPPORTED("9pdg7peez077ldl84zfh73o1w"); // 			if (place_portlabel(e, 0))
UNSUPPORTED("6jup6d9gfnx4b1wptmtw09n6w"); // 			    updateBB(g, ED_tail_label(e));
UNSUPPORTED("dkxvw03k2gg9anv4dbze06axd"); // 		    }
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("e1gou4etuv01r4rys0cnxzl7z"); //     /* end vladimir */
UNSUPPORTED("a93zz3hd9icnuny2yisv0nwpq"); //     if (et != (2 << 1)) {
UNSUPPORTED("9qt5wqg0lr73uypdykgd6zdw9"); // 	free(edges);
UNSUPPORTED("cemgtepdat8xa7jzngmujlly1"); // 	free(P->boxes);
UNSUPPORTED("dgq5kszfp504quv2x88lenes3"); // 	free(P);
UNSUPPORTED("48ss52qqe0v3b7sse028ce4u"); // 	free(sd.Rank_box);
UNSUPPORTED("dzaii1vx2bk4lnkuqkmv0w8w"); // 	routesplinesterm();
UNSUPPORTED("3xbu5lb3fe5zgccq9vbjk3kln"); //     } 
UNSUPPORTED("dlck30sbhdy5jvyuugcnl0xzw"); //     State = 1;
UNSUPPORTED("82iavdz9in9jv6j5fizbcc2q4"); //     EdgeLabelsDone = 1;
UNSUPPORTED("c24nfmv9i7o5eoqaymbibp7m7"); // }

throw new UnsupportedOperationException();
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void _dot_splines(graph_t * g, int normalize)
{
    int i, j, k, n_nodes, n_edges, ind, cnt;
    node_t *n;
    Agedgeinfo_t fwdedgeai, fwdedgebi;
    Agedgepair_t fwdedgea, fwdedgeb;
    edge_t *e, *e0, *e1, *ea, *eb, *le0, *le1, **edges;
    path *P;
    spline_info_t sd;
    int et = (GD_flags(g) & (7 << 1));
    fwdedgea.out.base.data = (Agrec_t*)&fwdedgeai;
    fwdedgeb.out.base.data = (Agrec_t*)&fwdedgebi;
    if (et == (0 << 1)) return; 
    if (et == (2 << 1)) {
	resetRW (g);
	if (GD_has_labels(g) & (1 << 0)) {
	    agerr (AGWARN, "edge labels with splines=curved not supported in dot - use xlabels\n");
	}
	for (n = agfstnode (g); n; n = agnxtnode(g, n)) {
	    for (e = agfstout(g, n); e; e = agnxtout(g,e)) {
		makeStraightEdge(g, e, et, &sinfo);
	    }
	}
	goto finish;
    } 
    mark_lowclusters(g);
    if (routesplinesinit()) return;
    P = (path*)zmalloc(sizeof(path));
    /* FlatHeight = 2 * GD_nodesep(g); */
    sd.Splinesep = GD_nodesep(g) / 4;
    sd.Multisep = GD_nodesep(g);
    edges = (edge_t **)zmalloc((128)*sizeof(edge_t *));
    /* compute boundaries and list of splines */
    sd.LeftBound = sd.RightBound = 0;
    n_edges = n_nodes = 0;
    for (i = GD_minrank(g); i <= GD_maxrank(g); i++) {
	n_nodes += GD_rank(g)[i].n;
	if ((n = GD_rank(g)[i].v[0]))
	    sd.LeftBound = MIN(sd.LeftBound, (ND_coord(n).x - ND_lw(n)));
	if (GD_rank(g)[i].n && (n = GD_rank(g)[i].v[GD_rank(g)[i].n - 1]))
	    sd.RightBound = MAX(sd.RightBound, (ND_coord(n).x + ND_rw(n)));
	sd.LeftBound -= 16;
	sd.RightBound += 16;
	for (j = 0; j < GD_rank(g)[i].n; j++) {
	    n = GD_rank(g)[i].v[j];
		/* if n is the label of a flat edge, copy its position to
		 * the label.
		 */
	    if (ND_alg(n)) {
		edge_t* fe = (edge_t*)ND_alg(n);
		assert (ED_label(fe));
		ED_label(fe)->pos = ND_coord(n);
		ED_label(fe)->set = NOT(0);
	    }
	    if ((ND_node_type(n) != 0) &&
		(sinfo.splineMerge(n) == 0))
		continue;
	    for (k = 0; (e = ND_out(n).list[k]); k++) {
		if ((ED_edge_type(e) == 4)
		    || (ED_edge_type(e) == 6))
		    continue;
		setflags(e, 1, 16, 64);
		edges[n_edges++] = e;
		if (n_edges % 128 == 0)
		    (edges = ALLOC (n_edges + 128, edges, edge_t*));
	    }
	    if (ND_flat_out(n).list)
		for (k = 0; (e = ND_flat_out(n).list[k]); k++) {
		    setflags(e, 2, 0, 128);
		    edges[n_edges++] = e;
		    if (n_edges % 128 == 0)
			(edges = ALLOC (n_edges + 128, edges, edge_t*));
		}
	    if (ND_other(n).list) {
		/* In position, each node has its rw stored in mval and,
                 * if a node is part of a loop, rw may be increased to
                 * reflect the loops and associated labels. We restore
                 * the original value here. 
                 */
		if (ND_node_type(n) == 0) {
		    double tmp = ND_rw(n);
		    ND_rw(n) = ND_mval(n);
		    ND_mval(n) = tmp;
		}
		for (k = 0; (e = ND_other(n).list[k]); k++) {
		    setflags(e, 0, 0, 128);
		    edges[n_edges++] = e;
		    if (n_edges % 128 == 0)
			(edges = ALLOC (n_edges + 128, edges, edge_t*));
		}
	    }
	}
    }
    /* Sort so that equivalent edges are contiguous. 
     * Equivalence should basically mean that 2 edges have the
     * same set {(tailnode,tailport),(headnode,headport)}, or
     * alternatively, the edges would be routed identically if
     * routed separately.
     */
    qsort((char *) &edges[0], n_edges, sizeof(edges[0]),
	  (qsort_cmpf) edgecmp);
    /* FIXME: just how many boxes can there be? */
    P->boxes = (boxf*)zmalloc((n_nodes + 20 * 2 * 9)*sizeof(boxf));
    sd.Rank_box = (boxf*)zmalloc((i)*sizeof(boxf));
    if (et == (1 << 1)) {
    /* place regular edge labels */
	for (n = GD_nlist(g); n; n = ND_next(n)) {
	    if ((ND_node_type(n) == 1) && (ND_label(n))) {
		place_vnlabel(n);
	    }
	}
    }
    for (i = 0; i < n_edges;) {
 	boolean havePorts;
	ind = i;
	le0 = getmainedge((e0 = edges[i++]));
	if (ED_tail_port(e0).defined || ED_head_port(e0).defined) {
	    havePorts = NOT(0);
	    ea = e0;
	} else {
	    havePorts = 0;
	    ea =  le0;
	}
	if (ED_tree_index(ea) & 32) {
	    { edge_t *newp; Agedgeinfo_t *info; newp = &fwdedgea.out; info = (Agedgeinfo_t*)newp->base.data; *info = *(Agedgeinfo_t*)ea->base.data; *newp = *ea; newp->base.data = (Agrec_t*)info; AGTAIL(newp) = AGHEAD(ea); AGHEAD(newp) = AGTAIL(ea); ED_tail_port(newp) = ED_head_port(ea); ED_head_port(newp) = ED_tail_port(ea); ED_edge_type(newp) = 1; ED_to_orig(newp) = ea; };
	    ea = &fwdedgea.out;
	}
	for (cnt = 1; i < n_edges; cnt++, i++) {
	    if (le0 != (le1 = getmainedge((e1 = edges[i]))))
		break;
	    if (ED_adjacent(e0)) continue; /* all flat adjacent edges at once */
	    if (ED_tail_port(e1).defined || ED_head_port(e1).defined) {
		if (!havePorts) break;
		else
		    eb = e1;
	    } else {
		if (havePorts) break;
		else
		    eb = le1;
	    }
	    if (ED_tree_index(eb) & 32) {
		{ edge_t *newp; Agedgeinfo_t *info; newp = &fwdedgeb.out; info = (Agedgeinfo_t*)newp->base.data; *info = *(Agedgeinfo_t*)eb->base.data; *newp = *eb; newp->base.data = (Agrec_t*)info; AGTAIL(newp) = AGHEAD(eb); AGHEAD(newp) = AGTAIL(eb); ED_tail_port(newp) = ED_head_port(eb); ED_head_port(newp) = ED_tail_port(eb); ED_edge_type(newp) = 1; ED_to_orig(newp) = eb; };
		eb = &fwdedgeb.out;
	    }
	    if (portcmp(ED_tail_port(ea), ED_tail_port(eb)))
		break;
	    if (portcmp(ED_head_port(ea), ED_head_port(eb)))
		break;
	    if ((ED_tree_index(e0) & 15) == 2
		&& ED_label(e0) != ED_label(e1))
		break;
	    if (ED_tree_index(edges[i]) & 64)	/* Aha! -C is on */
		break;
	}
	if (agtail(e0) == aghead(e0)) {
	    int b, sizey, r;
	    n = agtail(e0);
	    r = ND_rank(n);
	    if (r == GD_maxrank(g)) {
		if (r > 0)
		    sizey = ND_coord(GD_rank(g)[r-1].v[0]).y - ND_coord(n).y;
		else
		    sizey = ND_ht(n);
	    }
	    else if (r == GD_minrank(g)) {
		sizey = ND_coord(n).y - ND_coord(GD_rank(g)[r+1].v[0]).y;
	    }
	    else {
		int upy = ND_coord(GD_rank(g)[r-1].v[0]).y - ND_coord(n).y;
		int dwny = ND_coord(n).y - ND_coord(GD_rank(g)[r+1].v[0]).y;
		sizey = MIN(upy, dwny);
	    }
	    makeSelfEdge(P, edges, ind, cnt, sd.Multisep, sizey/2, &sinfo);
	    for (b = 0; b < cnt; b++) {
		e = edges[ind+b];
		if (ED_label(e))
		    updateBB(g, ED_label(e));
	    }
	}
	else if (ND_rank(agtail(e0)) == ND_rank(aghead(e0))) {
	    make_flat_edge(g, &sd, P, edges, ind, cnt, et);
	}
	else
	    make_regular_edge(g, &sd, P, edges, ind, cnt, et);
    }
    /* place regular edge labels */
    for (n = GD_nlist(g); n; n = ND_next(n)) {
	if ((ND_node_type(n) == 1) && (ND_label(n))) {
	    place_vnlabel(n);
	    updateBB(g, ND_label(n));
	}
    }
    /* normalize splines so they always go from tail to head */
    /* place_portlabel relies on this being done first */
    if (normalize)
	edge_normalize(g);
finish :
    /* vladimir: place port labels */
    /* FIX: head and tail labels are not part of cluster bbox */
    if ((E_headlabel || E_taillabel) && (E_labelangle || E_labeldistance)) {
	for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	    if (E_headlabel) {
		for (e = agfstin(g, n); e; e = agnxtin(g, e))
		    if (ED_head_label(AGMKOUT(e))) {
			place_portlabel(AGMKOUT(e), NOT(0));
			updateBB(g, ED_head_label(AGMKOUT(e)));
		    }
	    }
	    if (E_taillabel) {
		for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
		    if (ED_tail_label(e)) {
			if (place_portlabel(e, 0))
			    updateBB(g, ED_tail_label(e));
		    }
		}
	    }
	}
    }
    /* end vladimir */
    if (et != (2 << 1)) {
	free(edges);
	free(P->boxes);
	free(P);
	free(sd.Rank_box);
	routesplinesterm();
    } 
    State = 1;
    EdgeLabelsDone = 1;
}

