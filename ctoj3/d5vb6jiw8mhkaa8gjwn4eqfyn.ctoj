public static void allocate_ranks(Agraph_s g) {
	// REVIEW 17/01/2016
    int r, low, high;
    __ptr__ cn;
    Agnode_s n;
    Agedge_s e;
	cn = zmalloc(size_t_array_of_integer(GD_maxrank(g) + 2));
	/* must be 0 based, not GD_minrank */
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n)) {
	cn.plus(ND_rank(n)).setInt(1+cn.plus(ND_rank(n)).getInt());
	for (e = agfstout(g, n); e!=null; e = agnxtout(g, e)) {
	    low = ND_rank(agtail(e));
	    high = ND_rank(aghead(e));
	    if (low > high) {
		int t = low;
		low = high;
		high = t;
	    }
	    for (r = low + 1; r < high; r++)
		cn.plus(r).setInt(1+cn.plus(r).getInt());
	}
    }
    GD_rank(g, zmalloc(sizeof(rank_t.class, GD_maxrank(g) + 2)));
    for (r = GD_minrank(g); r <= GD_maxrank(g); r++) {
	GD_rank(g).plus(r).setInt("n", cn.plus(r).getInt());
	GD_rank(g).plus(r).setInt("an", cn.plus(r).getInt());
	__ptr__ tmp = zmalloc(sizeof_starstar_empty(Agnode_s.class, cn.plus(r).getInt() + 1));
	GD_rank(g).plus(r).setPtr("v", tmp);
	GD_rank(g).plus(r).setPtr("av", tmp);
    }
    Memory.free(cn);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void allocate_ranks(graph_t * g)
{
    int r, low, high, *cn;
    node_t *n;
    edge_t *e;
    cn = (int*)zmalloc((GD_maxrank(g) + 2)*sizeof(int));	/* must be 0 based, not GD_minrank */
    for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	cn[ND_rank(n)]++;
	for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
	    low = ND_rank(agtail(e));
	    high = ND_rank(aghead(e));
	    if (low > high) {
		int t = low;
		low = high;
		high = t;
	    }
	    for (r = low + 1; r < high; r++)
		cn[r]++;
	}
    }
    GD_rank(g) = (rank_t*)sizeof_starstar_allocated((GD_maxrank(g) + 2)*sizeof(rank_t));
    for (r = GD_minrank(g); r <= GD_maxrank(g); r++) {
	GD_rank(g)[r].an = GD_rank(g)[r].n = cn[r];
	GD_rank(g)[r].av = GD_rank(g)[r].v = (node_t **)zmalloc((cn[r] + 1)*sizeof(node_t *));
    }
    free(cn);
}

