public static void flat_search(Agraph_s g, Agnode_s v) {
    int i;
    boolean hascl;
    Agedge_s e;
    adjmatrix_t M = (adjmatrix_t) GD_rank(g).plus(ND_rank(v)).getPtr("flat");
    ND_mark(v, NOT(false));
    ND_onstack(v, NOT(false));
    hascl = (GD_n_cluster(dot_root(g)) > 0);
    if (ND_flat_out(v).getArrayOfPtr("list")!=null)
	for (i = 0; (e = (Agedge_s) ND_flat_out(v).getArrayOfPtr("list").plus(i).getPtr())!=null; i++) {
	    if (hascl
		&& NOT(agcontains(g, agtail(e)) && agcontains(g, aghead(e))))
		continue;
	    if (ED_weight(e) == 0)
		continue;
	    if (ND_onstack(aghead(e)) == NOT(false)) {
UNSUPPORTED("cgkgsq3cgt6yvpwsn9st1phym"); // 		assert(ND_low(aghead(e)) < M->nrows);
UNSUPPORTED("38hoycfuki3wuy5cj039e3b00"); // 		assert(ND_low(agtail(e)) < M->ncols);
UNSUPPORTED("ehj17yz9fge33i8h1scw4m7q6"); // 		(M->data[((ND_low(aghead(e)))*M->ncols)+(ND_low(agtail(e)))]) = 1;
UNSUPPORTED("1iwplhbmvtv3d8gseqen1bn52"); // 		delete_flat_edge(e);
UNSUPPORTED("b5737gtfqocrc9dqgtvfuz5e7"); // 		i--;
UNSUPPORTED("8x0ryen4203ncnio11ie1rl6o"); // 		if (ED_edge_type(e) == 4)
UNSUPPORTED("2yi9az7ibt7j9bwztjilyo0v2"); // 		    continue;
UNSUPPORTED("8nnedzb0mcoepaac60ovylf44"); // 		flat_rev(g, e);
	    } else {
		assert(ND_low(aghead(e)) < M.getInt("nrows"));
		assert(ND_low(agtail(e)) < M.getInt("ncols"));
		M.getArrayOfInteger("data").plus(ND_low(agtail(e))*M.getInt("ncols")+ND_low(aghead(e))).setInt(1);
		if (ND_mark(aghead(e)) == 0)
		    flat_search(g, aghead(e));
	    }
	}
    ND_onstack(v, 0);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void flat_search(graph_t * g, node_t * v)
{
    int i;
    boolean hascl;
    edge_t *e;
    adjmatrix_t *M = GD_rank(g)[ND_rank(v)].flat;
    ND_mark(v) = NOT(0);
    ND_onstack(v) = NOT(0);
    hascl = (GD_n_cluster(dot_root(g)) > 0);
    if (ND_flat_out(v).list)
	for (i = 0; (e = ND_flat_out(v).list[i]); i++) {
	    if (hascl
		&& NOT(agcontains(g, agtail(e)) && agcontains(g, aghead(e))))
		continue;
	    if (ED_weight(e) == 0)
		continue;
	    if (ND_onstack(aghead(e)) == NOT(0)) {
		assert(ND_low(aghead(e)) < M->nrows);
		assert(ND_low(agtail(e)) < M->ncols);
		(M->data[((ND_low(aghead(e)))*M->ncols)+(ND_low(agtail(e)))]) = 1;
		delete_flat_edge(e);
		i--;
		if (ED_edge_type(e) == 4)
		    continue;
		flat_rev(g, e);
	    } else {
		assert(ND_low(aghead(e)) < M->nrows);
		assert(ND_low(agtail(e)) < M->ncols);
		(M->data[((ND_low(agtail(e)))*M->ncols)+(ND_low(aghead(e)))]) = 1;
		if (ND_mark(aghead(e)) == 0)
		    flat_search(g, aghead(e));
	    }
	}
    ND_onstack(v) = 0;
}

