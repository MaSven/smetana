public static void make_LR_constraints(Agraph_s g) {
    int i, j, k;
    int sw;			/* self width */
    int m0, m1;
    double width;
    int sep[] = new int[2];
    int nodesep;      /* separation between nodes on same rank */
    Agedge_s e, e0, e1, ff;
    Agnode_s u, v, t0, h0;
    __ptr__ rank = g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("rank");
    /* Use smaller separation on odd ranks if g has edge labels */
    if ((g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("has_labels") & (1 << 0))!=0) {
UNSUPPORTED("axlxw0t0r2hzbb5btwrh46lkc"); // 	sep[0] = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep);
UNSUPPORTED("5cg9a7rbcwxv21cdkiif3xmj7"); // 	sep[1] = 5;
    }
    else {
	sep[1] = sep[0] = g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("nodesep");
    }
    /* make edges to constrain left-to-right ordering */
    for (i = g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("minrank");
    i <= g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("maxrank"); i++) {
	double last;
	rank.getBracket(i).getArrayOfPtr("v", 0).castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("rank", 0);
	last = 0;
	nodesep = sep[i & 1];
	for (j = 0; j < rank.getBracket(i).getInt("n"); j++) {
	    u = (Agnode_s) rank.getBracket(i).getArrayOfPtr("v", j);
	    u.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setDouble("mval", 
	      u.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("rw"));
	    /* keep it somewhere safe */
	    if (u.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("other").getInt("size") > 0) {	/* compute self size */
		/* FIX: dot assumes all self-edges go to the right. This
                 * is no longer true, though makeSelfEdge still attempts to
                 * put as many as reasonable on the right. The dot code
                 * should be modified to allow a box reflecting the placement
                 * of all self-edges, and use that to reposition the nodes.
                 * Note that this would not only affect left and right
                 * positioning but may also affect interrank spacing.
                 */
UNSUPPORTED("8kgf11dy5m3hx91sysahjo45p"); // 		sw = 0;
UNSUPPORTED("8eyavbfk6hso3i2l2p2fjwto"); // 		for (k = 0; (e = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->other).list[k]); k++) {
UNSUPPORTED("4yeq8o1707oidcplg862k50b1"); // 		    if (((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node) == ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node)) {
UNSUPPORTED("atau7kpq2vbrr85achvgzyuwk"); // 			sw += selfRightSpace (e);
UNSUPPORTED("dkxvw03k2gg9anv4dbze06axd"); // 		    }
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("6y8cmpxuz4v4kwndnrv7r6q66"); // 		(((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->rw) += sw;	/* increment to include self edges */
	    }
	    v = (Agnode_s) rank.getBracket(i).getArrayOfPtr("v", j + 1);
	    if (v!=null) {
		width = u.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("rw")
		  + v.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getDouble("lw")
		  + nodesep;
		e0 = (Agedge_s) make_aux_edge(u, v, width, 0);
		v.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("rank", (int)(last + width));
		last = (int)(last + width);
	    }
	    /* constraints from labels of flat edges on previous rank */
	    if ((e = (Agedge_s) u.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("alg"))!=null) {
UNSUPPORTED("cxw8ydiuxbb8ij2li7bni5hw6"); // 		e0 = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->save_out).list[0];
UNSUPPORTED("bpxr5wbci575cqk4awx366l9a"); // 		e1 = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->save_out).list[1];
UNSUPPORTED("9kqzqolne46jtq60ncjxq0kr"); // 		if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e0))->tag).objtype) == 2?(e0):((e0)-1))->node)))->data))->order) > (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e1))->tag).objtype) == 2?(e1):((e1)-1))->node)))->data))->order)) {
UNSUPPORTED("dawf9478fmdgoh10o8ibtktyb"); // 		    ff = e0;
UNSUPPORTED("4wct7zlju85d7kmms4rdc9ozf"); // 		    e0 = e1;
UNSUPPORTED("93s40no5vzzdtji0myg211s4x"); // 		    e1 = ff;
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("4afahyncgu45oqtea6p9n8voi"); // 		m0 = ((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen) * (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep)) / 2;
UNSUPPORTED("3iiravoww10as9la9ncorkk32"); // 		m1 = m0 + (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e0))->tag).objtype) == 2?(e0):((e0)-1))->node)))->data))->rw) + (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e0))->tag).objtype) == 3?(e0):((e0)+1))->node)))->data))->lw);
UNSUPPORTED("cm72bivjokpeme1mr5h8pdef6"); // 		/* these guards are needed because the flat edges
UNSUPPORTED("64ascirpf0t76z2wp73qmn11n"); // 		 * work very poorly with cluster layout */
UNSUPPORTED("4ziyu1fofeff23e6fjows4dvs"); // 		if (canreach(((((((Agobj_t*)(e0))->tag).objtype) == 3? (e0): ((e0)+1))->node), ((((((Agobj_t*)(e0))->tag).objtype) == 2? (e0): ((e0)-1))->node)) == 0)
UNSUPPORTED("35e3a3k8zm15ead95q4nm8fid"); // 		    make_aux_edge(((((((Agobj_t*)(e0))->tag).objtype) == 2? (e0): ((e0)-1))->node), ((((((Agobj_t*)(e0))->tag).objtype) == 3? (e0): ((e0)+1))->node), m1,
UNSUPPORTED("dnbk67gze57d61g6zz9n4mfqb"); // 			(((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight));
UNSUPPORTED("11d2wawo2nvm5xoaiiwyilrg8"); // 		m1 = m0 + (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e1))->tag).objtype) == 3?(e1):((e1)+1))->node)))->data))->rw) + (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e1))->tag).objtype) == 2?(e1):((e1)-1))->node)))->data))->lw);
UNSUPPORTED("5yxb55rx3zkezjsd17xu53rgs"); // 		if (canreach(((((((Agobj_t*)(e1))->tag).objtype) == 2? (e1): ((e1)-1))->node), ((((((Agobj_t*)(e1))->tag).objtype) == 3? (e1): ((e1)+1))->node)) == 0)
UNSUPPORTED("c3knkeuwq33yyqrhpohl929ac"); // 		    make_aux_edge(((((((Agobj_t*)(e1))->tag).objtype) == 3? (e1): ((e1)+1))->node), ((((((Agobj_t*)(e1))->tag).objtype) == 2? (e1): ((e1)-1))->node), m1,
UNSUPPORTED("dnbk67gze57d61g6zz9n4mfqb"); // 			(((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight));
	    }
	    /* position flat edge endpoints */
	    for (k = 0; k < u.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("flat_out").getInt("size"); k++) {
UNSUPPORTED("bn8j522v2xg4lux2i26bviss0"); // 		e = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->flat_out).list[k];
UNSUPPORTED("anvs34px7lvxddwhixao0g7ek"); // 		if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->order) < (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->order)) {
UNSUPPORTED("4o92i7ee1hgvwgu4m1ug2e2gc"); // 		    t0 = ((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node);
UNSUPPORTED("898cw9l6k013qew990n17w42u"); // 		    h0 = ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node);
UNSUPPORTED("a47jqpic91ky93e1ohxv590l5"); // 		} else {
UNSUPPORTED("4pxk5a14evl2dwc4fyf2fmwnz"); // 		    t0 = ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node);
UNSUPPORTED("7rkopg7093jho7qunh024i1up"); // 		    h0 = ((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node);
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("4zzc9sncg4jv6pd9ksjepqv3r"); // 		width = (((Agnodeinfo_t*)(((Agobj_t*)(t0))->data))->rw) + (((Agnodeinfo_t*)(((Agobj_t*)(h0))->data))->lw);
UNSUPPORTED("7jiqzsk8n9tofkqi6p6tw8md4"); // 		m0 = (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen) * (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep) + width;
UNSUPPORTED("97qp3x6qksypzh1ub51hpvt6l"); // 		if ((e0 = find_fast_edge(t0, h0))) {
UNSUPPORTED("a3laykeel8hw5n06ned6olw6r"); // 		    /* flat edge between adjacent neighbors 
UNSUPPORTED("alc1lt3ea70luvfmuqla9dvt6"); //                      * ED_dist contains the largest label width.
UNSUPPORTED("ym87cwsjq05ou3qvto7m277m"); //                      */
UNSUPPORTED("7iqxn2msvb9ch8ry26vtpenp6"); // 		    m0 = ((m0)>(width + (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep) + (((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist)>=0)?(int)((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist) + .5):(int)((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist) - .5)))?(m0):(width + (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep) + (((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist)>=0)?(int)((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist) + .5):(int)((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist) - .5))));
UNSUPPORTED("1q0oi92352t3yw0it2ivfdfkp"); // 		    if (m0 > USHRT_MAX)
UNSUPPORTED("2b77c5xi1b1zhyhb5h9f3lu95"); // 			m0 = largeMinlen (m0);
UNSUPPORTED("bujbed3lnyszdk9743g5ulyvg"); // 		    (((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->minlen) = (((((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->minlen))>(m0)?((((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->minlen)):(m0));
UNSUPPORTED("1cwmu7gj62vyt8s7c126itplz"); // 		    (((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->weight) = (((((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->weight))>((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight))?((((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->weight)):((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight)));
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("dv87dfjiy2vuj22fkyt63ta4s"); // 		else if (!(((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->label)) {
UNSUPPORTED("4gkdrtjm7pntses2s8sn1btxg"); // 		    /* unlabeled flat edge between non-neighbors 
UNSUPPORTED("5tfm7nj1zy86628mwhhl31ftd"); // 		     * ED_minlen(e) is max of ED_minlen of all equivalent 
UNSUPPORTED("ezep8pv9pwv39kqujxc2abjsa"); //                      * edges.
UNSUPPORTED("ym87cwsjq05ou3qvto7m277m"); //                      */
UNSUPPORTED("9mi5n4622kpqhvqregyvwgenm"); // 		    make_aux_edge(t0, h0, m0, (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight));
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
		/* labeled flat edges between non-neighbors have already
                 * been constrained by the label above. 
                 */ 
	    }
    }
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void 
make_LR_constraints(graph_t * g)
{
    int i, j, k;
    int sw;			/* self width */
    int m0, m1;
    double width;
    int sep[2];
    int nodesep;      /* separation between nodes on same rank */
    edge_t *e, *e0, *e1, *ff;
    node_t *u, *v, *t0, *h0;
    rank_t *rank = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank);
    /* Use smaller separation on odd ranks if g has edge labels */
    if ((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->has_labels) & (1 << 0)) {
	sep[0] = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep);
	sep[1] = 5;
    }
    else {
	sep[1] = sep[0] = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep);
    }
    /* make edges to constrain left-to-right ordering */
    for (i = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->minrank); i <= (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->maxrank); i++) {
	double last;
	last = (((Agnodeinfo_t*)(((Agobj_t*)(rank[i].v[0]))->data))->rank) = 0;
	nodesep = sep[i & 1];
	for (j = 0; j < rank[i].n; j++) {
	    u = rank[i].v[j];
	    (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->mval) = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->rw);	/* keep it somewhere safe */
	    if ((((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->other).size > 0) {	/* compute self size */
		/* FIX: dot assumes all self-edges go to the right. This
                 * is no longer true, though makeSelfEdge still attempts to
                 * put as many as reasonable on the right. The dot code
                 * should be modified to allow a box reflecting the placement
                 * of all self-edges, and use that to reposition the nodes.
                 * Note that this would not only affect left and right
                 * positioning but may also affect interrank spacing.
                 */
		sw = 0;
		for (k = 0; (e = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->other).list[k]); k++) {
		    if (((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node) == ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node)) {
			sw += selfRightSpace (e);
		    }
		}
		(((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->rw) += sw;	/* increment to include self edges */
	    }
	    v = rank[i].v[j + 1];
	    if (v) {
		width = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->rw) + (((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->lw) + nodesep;
		e0 = make_aux_edge(u, v, width, 0);
		last = ((((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->rank) = last + width);
	    }
	    /* constraints from labels of flat edges on previous rank */
	    if ((e = (edge_t*)(((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->alg))) {
		e0 = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->save_out).list[0];
		e1 = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->save_out).list[1];
		if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e0))->tag).objtype) == 2?(e0):((e0)-1))->node)))->data))->order) > (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e1))->tag).objtype) == 2?(e1):((e1)-1))->node)))->data))->order)) {
		    ff = e0;
		    e0 = e1;
		    e1 = ff;
		}
		m0 = ((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen) * (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep)) / 2;
		m1 = m0 + (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e0))->tag).objtype) == 2?(e0):((e0)-1))->node)))->data))->rw) + (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e0))->tag).objtype) == 3?(e0):((e0)+1))->node)))->data))->lw);
		/* these guards are needed because the flat edges
		 * work very poorly with cluster layout */
		if (canreach(((((((Agobj_t*)(e0))->tag).objtype) == 3? (e0): ((e0)+1))->node), ((((((Agobj_t*)(e0))->tag).objtype) == 2? (e0): ((e0)-1))->node)) == 0)
		    make_aux_edge(((((((Agobj_t*)(e0))->tag).objtype) == 2? (e0): ((e0)-1))->node), ((((((Agobj_t*)(e0))->tag).objtype) == 3? (e0): ((e0)+1))->node), m1,
			(((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight));
		m1 = m0 + (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e1))->tag).objtype) == 3?(e1):((e1)+1))->node)))->data))->rw) + (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e1))->tag).objtype) == 2?(e1):((e1)-1))->node)))->data))->lw);
		if (canreach(((((((Agobj_t*)(e1))->tag).objtype) == 2? (e1): ((e1)-1))->node), ((((((Agobj_t*)(e1))->tag).objtype) == 3? (e1): ((e1)+1))->node)) == 0)
		    make_aux_edge(((((((Agobj_t*)(e1))->tag).objtype) == 3? (e1): ((e1)+1))->node), ((((((Agobj_t*)(e1))->tag).objtype) == 2? (e1): ((e1)-1))->node), m1,
			(((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight));
	    }
	    /* position flat edge endpoints */
	    for (k = 0; k < (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->flat_out).size; k++) {
		e = (((Agnodeinfo_t*)(((Agobj_t*)(u))->data))->flat_out).list[k];
		if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->order) < (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->order)) {
		    t0 = ((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node);
		    h0 = ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node);
		} else {
		    t0 = ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node);
		    h0 = ((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node);
		}
		width = (((Agnodeinfo_t*)(((Agobj_t*)(t0))->data))->rw) + (((Agnodeinfo_t*)(((Agobj_t*)(h0))->data))->lw);
		m0 = (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->minlen) * (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep) + width;
		if ((e0 = find_fast_edge(t0, h0))) {
		    /* flat edge between adjacent neighbors 
                     * ED_dist contains the largest label width.
                     */
		    m0 = ((m0)>(width + (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep) + (((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist)>=0)?(int)((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist) + .5):(int)((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist) - .5)))?(m0):(width + (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nodesep) + (((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist)>=0)?(int)((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist) + .5):(int)((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->dist) - .5))));
		    if (m0 > USHRT_MAX)
			m0 = largeMinlen (m0);
		    (((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->minlen) = (((((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->minlen))>(m0)?((((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->minlen)):(m0));
		    (((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->weight) = (((((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->weight))>((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight))?((((Agedgeinfo_t*)(((Agobj_t*)(e0))->data))->weight)):((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight)));
		}
		else if (!(((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->label)) {
		    /* unlabeled flat edge between non-neighbors 
		     * ED_minlen(e) is max of ED_minlen of all equivalent 
                     * edges.
                     */
		    make_aux_edge(t0, h0, m0, (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->weight));
		}
		/* labeled flat edges between non-neighbors have already
                 * been constrained by the label above. 
                 */ 
	    }
	}
    }
}

