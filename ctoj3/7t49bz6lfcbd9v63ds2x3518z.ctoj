public static void build_ranks(Agraph_s g, int pass) {
    int i, j;
    Agnode_s n, n0 = null;
    __ptr__ otheredges;
    nodequeue q;
    q = new_queue(GD_n_nodes(g));
    for (n = GD_nlist(g); n!=null; n = ND_next(n))
	ND_mark(n, 0);
    for (i = GD_minrank(g); i <= GD_maxrank(g); i++)
	GD_rank(g).plus(i).setInt("n", 0);
    for (n = GD_nlist(g); n!=null; n = ND_next(n)) {
	otheredges = ((pass == 0) ? ND_in(n).getPtr("list") : ND_out(n).getPtr("list"));
	if (otheredges.plus(0).getPtr() != null)
	    continue;
	if ((ND_mark(n)) == 0) {
	    ND_mark(n,  1);
	    enqueue(q, n);
	    while ((n0 = dequeue(q))!=null) {
		if (ND_ranktype(n0) != 7) {
		    install_in_rank(g, n0);
		    enqueue_neighbors(q, n0, pass);
		} else {
		    install_cluster(g, n0, pass, q);
		}
	    }
	}
    }
    if (dequeue(q)!=null)
UNSUPPORTED("1b3hbd5artrq77i58q2o9kgz3"); // 	agerr(AGERR, "surprise\n");
    for (i = GD_minrank(g); i <= GD_maxrank(g); i++) {
	GD_rank(Z._().Root).plus(i).setInt("valid", 0);
	if (GD_flip(g)!=0 && (GD_rank(g).plus(i).getInt("n") > 0)) {
	    int nn, ndiv2;
	    __ptr__ vlist = GD_rank(g).plus(i).getPtr("v");
	    nn = GD_rank(g).plus(i).getInt("n") - 1;
	    ndiv2 = nn / 2;
	    for (j = 0; j <= ndiv2; j++)
		exchange((Agnode_s)vlist.plus(j).getPtr(), (Agnode_s)vlist.plus(nn - j).getPtr());
	}
    }
    if (EQ(g, dot_root(g)) && ncross(g) > 0)
	transpose(g, false);
    free_queue(q);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void build_ranks(graph_t * g, int pass)
{
    int i, j;
    node_t *n, *n0;
    edge_t **otheredges;
    nodequeue *q;
    q = new_queue(GD_n_nodes(g));
    for (n = GD_nlist(g); n; n = ND_next(n))
	(ND_mark(n)) = 0;
    for (i = GD_minrank(g); i <= GD_maxrank(g); i++)
	GD_rank(g)[i].n = 0;
    for (n = GD_nlist(g); n; n = ND_next(n)) {
	otheredges = ((pass == 0) ? ND_in(n).list : ND_out(n).list);
	if (otheredges[0] != NULL)
	    continue;
	if ((ND_mark(n)) == 0) {
	    (ND_mark(n)) = NOT(0);
	    enqueue(q, n);
	    while ((n0 = dequeue(q))) {
		if (ND_ranktype(n0) != 7) {
		    install_in_rank(g, n0);
		    enqueue_neighbors(q, n0, pass);
		} else {
		    install_cluster(g, n0, pass, q);
		}
	    }
	}
    }
    if (dequeue(q))
	agerr(AGERR, "surprise\n");
    for (i = GD_minrank(g); i <= GD_maxrank(g); i++) {
	GD_rank(Root)[i].valid = 0;
	if (GD_flip(g) && (GD_rank(g)[i].n > 0)) {
	    int n, ndiv2;
	    node_t **vlist = GD_rank(g)[i].v;
	    n = GD_rank(g)[i].n - 1;
	    ndiv2 = n / 2;
	    for (j = 0; j <= ndiv2; j++)
		exchange(vlist[j], vlist[n - j]);
	}
    }
    if ((g == dot_root(g)) && ncross(g) > 0)
	transpose(g, 0);
    free_queue(q);
}

