public static int mincross_(Agraph_s g, int startpass, int endpass, boolean doBalance) {
    int maxthispass=0, iter, trying, pass;
    int cur_cross, best_cross;
    if (startpass > 1) {
	cur_cross = best_cross = ncross(g);
	save_best(g);
    } else
	cur_cross = best_cross = Integer.MAX_VALUE;
    for (pass = startpass; pass <= endpass; pass++) {
	if (pass <= 1) {
	    maxthispass = ((4)<(MaxIter)?(4):(MaxIter));
	    if (EQ(g, dot_root(g)))
		build_ranks(g, pass);
	    if (pass == 0)
		flat_breakcycles(g);
	    flat_reorder(g);
	    if ((cur_cross = ncross(g)) <= best_cross) {
		save_best(g);
		best_cross = cur_cross;
	    }
	    trying = 0;
	} else {
UNSUPPORTED("30o2ot756l70eebp23kj0mjqz"); // 	    maxthispass = MaxIter;
UNSUPPORTED("8acu9b8x6xu27v64yg1i0vt29"); // 	    if (cur_cross > best_cross)
UNSUPPORTED("9lbd33fq96t3ud5clo0zaoyiz"); // 		restore_best(g);
UNSUPPORTED("msicxkq67wbwnfi5kgkiooca"); // 	    cur_cross = best_cross;
	}
	trying = 0;
	for (iter = 0; iter < maxthispass; iter++) {
	    /*if (Verbose)
		fprintf(stderr,
			"mincross: pass %d iter %d trying %d cur_cross %d best_cross %d\n",
			pass, iter, trying, cur_cross, best_cross);*/
	    if (trying++ >= MinQuit)
		break;
	    if (cur_cross == 0)
		break;
	    mincross_step(g, iter);
UNSUPPORTED("1xwc1drw5wolcyi5b0cx8nklk"); // 	    if ((cur_cross = ncross(g)) <= best_cross) {
UNSUPPORTED("9t8mm914fvve2pq3q0bddsl8i"); // 		save_best(g);
UNSUPPORTED("34nxkvkwxvrik63kmqw6jxjx2"); // 		if (cur_cross < Convergence * best_cross)
UNSUPPORTED("ncucatb0akj7n8b0z6ldwii4"); // 		    trying = 0;
UNSUPPORTED("b2o3vb7vgpg1vgkimkr9cz5ud"); // 		best_cross = cur_cross;
UNSUPPORTED("6t98dcecgbvbvtpycwiq2ynnj"); // 	    }
	}
 	if (cur_cross == 0)
 	    break;
    }
    if (cur_cross > best_cross)
 	restore_best(g);
    if (best_cross > 0) {
	transpose(g, 0);
	best_cross = ncross(g);
    }
    if (doBalance) {
	for (iter = 0; iter < maxthispass; iter++)
	    balance(g);
    }
    return best_cross;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int mincross(graph_t * g, int startpass, int endpass, int doBalance)
{
    int maxthispass, iter, trying, pass;
    int cur_cross, best_cross;
    if (startpass > 1) {
	cur_cross = best_cross = ncross(g);
	save_best(g);
    } else
	cur_cross = best_cross = ((int)(~(unsigned)0 >> 1));
    for (pass = startpass; pass <= endpass; pass++) {
	if (pass <= 1) {
	    maxthispass = ((4)<(MaxIter)?(4):(MaxIter));
	    if (g == dot_root(g))
		build_ranks(g, pass);
	    if (pass == 0)
		flat_breakcycles(g);
	    flat_reorder(g);
	    if ((cur_cross = ncross(g)) <= best_cross) {
		save_best(g);
		best_cross = cur_cross;
	    }
	    trying = 0;
	} else {
	    maxthispass = MaxIter;
	    if (cur_cross > best_cross)
		restore_best(g);
	    cur_cross = best_cross;
	}
	trying = 0;
	for (iter = 0; iter < maxthispass; iter++) {
	    if (Verbose)
		fprintf(stderr,
			"mincross: pass %d iter %d trying %d cur_cross %d best_cross %d\n",
			pass, iter, trying, cur_cross, best_cross);
	    if (trying++ >= MinQuit)
		break;
	    if (cur_cross == 0)
		break;
	    mincross_step(g, iter);
	    if ((cur_cross = ncross(g)) <= best_cross) {
		save_best(g);
		if (cur_cross < Convergence * best_cross)
		    trying = 0;
		best_cross = cur_cross;
	    }
	}
	if (cur_cross == 0)
	    break;
    }
    if (cur_cross > best_cross)
	restore_best(g);
    if (best_cross > 0) {
	transpose(g, 0);
	best_cross = ncross(g);
    }
    if (doBalance) {
	for (iter = 0; iter < maxthispass; iter++)
	    balance(g);
    }
    return best_cross;
}

