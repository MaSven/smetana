public static void make_leafslots(Agraph_s g) {
    int i, j, r;
    Agnode_s v;
    for (r = g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("minrank");
    r <= g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("maxrank"); r++) {
	j = 0;
	for (i = 0; i < g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("rank").getBracket(r).getInt("n"); i++) {
	    v = (Agnode_s) g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getArrayOfPtr("rank", r).getArrayOfPtr("v", i);
	    v.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("order", j);
	    if (v.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("ranktype") == 6)
UNSUPPORTED("5fdmb7h7jo8o06whgy99ymo4w"); // 		j = j + (((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->UF_size);
	    else
		j++;
	}
	if (j <= g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getPtr("rank").getBracket(r).getInt("n"))
	    continue;
UNSUPPORTED("bubhyi5f9yfwzcv61vf34zrpf"); // 	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v = ((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v? (node_t **)grealloc((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v,(j + 1)*sizeof(node_t *)):(node_t **)gmalloc((j + 1)*sizeof(node_t *)));
UNSUPPORTED("9eh8euqcl89s406ugz6i1kpfo"); // 	for (i = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].n - 1; i >= 0; i--) {
UNSUPPORTED("43pc9mqmwp5j2zi2y4xmkcrkz"); // 	    v = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v[i];
UNSUPPORTED("e8b0d1qdn6x6blp1vebkfkja5"); // 	    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v[(((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->order)] = v;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("duywrvvi3jtpejhylgrm071zt"); // 	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].n = j;
UNSUPPORTED("1ae5ekxvpjriqxqsv3angce9w"); // 	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v[j] = NULL;
    }
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static void make_leafslots(graph_t * g)
{
    int i, j, r;
    node_t *v;
    for (r = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->minrank); r <= (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->maxrank); r++) {
	j = 0;
	for (i = 0; i < (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].n; i++) {
	    v = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v[i];
	    (((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->order) = j;
	    if ((((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->ranktype) == 6)
		j = j + (((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->UF_size);
	    else
		j++;
	}
	if (j <= (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].n)
	    continue;
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v = ((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v? (node_t **)grealloc((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v,(j + 1)*sizeof(node_t *)):(node_t **)gmalloc((j + 1)*sizeof(node_t *)));
	for (i = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].n - 1; i >= 0; i--) {
	    v = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v[i];
	    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v[(((Agnodeinfo_t*)(((Agobj_t*)(v))->data))->order)] = v;
	}
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].n = j;
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->rank)[r].v[j] = NULL;
    }
}

