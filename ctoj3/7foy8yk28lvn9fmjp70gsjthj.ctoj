public static void class2(Agraph_s g) {
    int c;
    Agnode_s n, t, h;
    Agedge_s e, prev, opp;
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setPtr("nlist", null);
    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setInt("n_nodes", 0);		/* new */
    mark_clusters(g);
    for (c = 1; c <= g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("n_cluster"); c++)
UNSUPPORTED("6lecyj7j4b3sjzj52vr2dsaia"); // 	build_skeleton(g, (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->clust)[c]);
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n))
	for (e = agfstout(g, n); e!=null; e = agnxtout(g, e)) {
	    if (
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node").castTo(Agobj_s.class)
		.getPtr("data").castTo(Agnodeinfo_t.class).getInt("weight_class")
		<= 2)
(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node").castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).setInt("weight_class",
	(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node").castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("weight_class")+1);
	    if (
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node").castTo(Agobj_s.class)
		.getPtr("data").castTo(Agnodeinfo_t.class).getInt("weight_class")
		<= 2)
(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node").castTo(Agobj_s.class)
.getPtr("data").castTo(Agnodeinfo_t.class).setInt("weight_class",
	(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node").castTo(Agobj_s.class)
	.getPtr("data").castTo(Agnodeinfo_t.class).getInt("weight_class")+1);
	}
    for (n = agfstnode(g); n!=null; n = agnxtnode(g, n)) {
if ((n.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getPtr("clust") == null) && (EQ(n, UF_find(n)))) {
	    fast_node(g, n);
	    g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).setInt("n_nodes",
	      g.castTo(Agobj_s.class).getPtr("data").castTo(Agraphinfo_t.class).getInt("n_nodes")+1);
	}
	prev = null;
	for (e = agfstout(g, n); e!=null; e = agnxtout(g, e)) {
	    /* already processed */
	    if (e.castTo(Agobj_s.class).getPtr("data").castTo(Agedgeinfo_t.class).getPtr("to_virt")!=null) {
		prev = e;
		continue;
	    }
	    /* edges involving sub-clusters of g */
	    if (is_cluster_edge(e)) {
		/* following is new cluster multi-edge code */
UNSUPPORTED("8w6qkxgeu0igurklio5we2143"); // 		if (mergeable(prev, e)) {
UNSUPPORTED("7b4pkj3t5e9g5gn7uhewaj5tw"); // 		    if ((((Agedgeinfo_t*)(((Agobj_t*)(prev))->data))->to_virt)) {
UNSUPPORTED("4u976s5qw12krgxa5egtsa9xy"); // 			merge_chain(g, e, (((Agedgeinfo_t*)(((Agobj_t*)(prev))->data))->to_virt), 0);
UNSUPPORTED("2p3qy9gw37n2fide60v68aoci"); // 			other_edge(e);
UNSUPPORTED("2ngk65yw3nm4i4hfygmwyupgq"); // 		    } else if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank) == (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank)) {
UNSUPPORTED("9u3c038iipvts19df1rq3fmz"); // 			merge_oneway(e, prev);
UNSUPPORTED("2p3qy9gw37n2fide60v68aoci"); // 			other_edge(e);
UNSUPPORTED("dkxvw03k2gg9anv4dbze06axd"); // 		    }
UNSUPPORTED("2gzrlqx25li6z81zp51df3fm5"); // 		    /* else is an intra-cluster edge */
UNSUPPORTED("2yi9az7ibt7j9bwztjilyo0v2"); // 		    continue;
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("buhiyt61ougpl8ogqntvj9k3p"); // 		interclrep(g, e);
UNSUPPORTED("dpsnmca44s1cfw35axk4m0slg"); // 		prev = e;
UNSUPPORTED("6hyelvzskqfqa07xtgjtvg2is"); // 		continue;
	    }
	    /* merge multi-edges */
	    if (
		prev!=null && 
		EQ(
		e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3? e: e.plus(1).getPtr("node")
		,
		prev.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3? prev: prev.plus(1).getPtr("node")
		)
		&& 
		EQ(
		e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2? e: e.plus(-1).getPtr("node")
		,
		prev.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2? prev: prev.plus(-1).getPtr("node")
		
		)
		) {
UNSUPPORTED("ccc8oz30dgswr7er4figpv3y"); // 		if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank) == (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank)) {
UNSUPPORTED("9l1mbz4r9ycw99pdfpduwp3mc"); // 		    merge_oneway(e, prev);
UNSUPPORTED("787npos4z7hr1abcfi262r2ck"); // 		    other_edge(e);
UNSUPPORTED("2yi9az7ibt7j9bwztjilyo0v2"); // 		    continue;
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("25cveb9m5nba3wau6szqjk9aq"); // 		if (((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->label) == NULL) && ((((Agedgeinfo_t*)(((Agobj_t*)(prev))->data))->label) == NULL)
UNSUPPORTED("f56wjbhgu7egdogspzi9v38g"); // 		    && ports_eq(e, prev)) {
UNSUPPORTED("cjotvkxo6rs1m9102g0vkwexj"); // 		    if (Concentrate)
UNSUPPORTED("7s8hqs7hyb1bokn2cj9rk2vl"); // 			(((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->edge_type) = 6;
UNSUPPORTED("cphaexi33y32dnefwtu3jsom4"); // 		    else {
UNSUPPORTED("4npyhkh7txj38ve06u7vcdfra"); // 			merge_chain(g, e, (((Agedgeinfo_t*)(((Agobj_t*)(prev))->data))->to_virt), (!(0)));
UNSUPPORTED("2p3qy9gw37n2fide60v68aoci"); // 			other_edge(e);
UNSUPPORTED("dkxvw03k2gg9anv4dbze06axd"); // 		    }
UNSUPPORTED("2yi9az7ibt7j9bwztjilyo0v2"); // 		    continue;
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
		/* parallel edges with different labels fall through here */
	    }
	    /* self edges */
	    if (EQ(
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3? e: e.plus(1)).getPtr("node")
		,
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2? e: e.plus(-1)).getPtr("node")
		)) {
		other_edge(e);
		prev = e;
		continue;
	    }
	    t = UF_find((Agnode_s)(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3? e: e.plus(1)).getPtr("node"));
	    h = UF_find((Agnode_s)(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2? e: e.plus(-1)).getPtr("node"));
	    /* non-leader leaf nodes */
	    if (NEQ(
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3? e: e.plus(1)).getPtr("node")
		,
		t)
		||
		NEQ(
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2? e: e.plus(-1)).getPtr("node")
		,
		h)) {
		/* FIX need to merge stuff */
		continue;
	    }
	    /* flat edges */
	    if (
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node")
		.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
		==
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node")
		.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
		) {
		flat_edge(g, e);
		prev = e;
		continue;
	    }
	    /* forward edges */
			    if (
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node")
		.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
				>
		(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node")
		.castTo(Agobj_s.class).getPtr("data").castTo(Agnodeinfo_t.class).getInt("rank")
				) {
	    make_chain((Agraph_s)g,
		(Agnode_s)(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 3?e:e.plus(1)).getPtr("node")
						,
		(Agnode_s)(e.castTo(Agobj_s.class).getPtr("tag").getInt("objtype") == 2?e:e.plus(-1)).getPtr("node")
						, e);
		prev = e;
		continue;
	    }
	    /* backward edges */
	    else {
		/*other_edge(e); */
		/* avoid when opp==e in undirected graph */
UNSUPPORTED("auuxidg68hhyub7wdwngr76ip"); // 		if ((opp = (agedge(g,((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node),((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node),NULL,0))) && (((((((Agobj_t*)(opp))->tag).objtype) == 2? (opp): ((opp)-1))->node) != ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node))) {
UNSUPPORTED("1ufze3vbxiidikxz9epluke6n"); // 		    /* shadows a forward edge */
UNSUPPORTED("a6ysonb9jyo7tj22cc0ijcs0n"); // 		    if ((((Agedgeinfo_t*)(((Agobj_t*)(opp))->data))->to_virt) == NULL)
UNSUPPORTED("a9si0488s7jpsxr4gr5km4g3e"); // 			make_chain(g, ((((((Agobj_t*)(opp))->tag).objtype) == 3? (opp): ((opp)+1))->node), ((((((Agobj_t*)(opp))->tag).objtype) == 2? (opp): ((opp)-1))->node), opp);
UNSUPPORTED("1df0upbuk3dcucdaxs5xjztn3"); // 		    if (((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->label) == NULL) && ((((Agedgeinfo_t*)(((Agobj_t*)(opp))->data))->label) == NULL)
UNSUPPORTED("5vg66s5jfsw6ns6fcv5l1qamw"); // 			&& ports_eq(e, opp)) {
UNSUPPORTED("d58mxibtdqnkid4kp98426xb1"); // 			if (Concentrate) {
UNSUPPORTED("932waki04a785vzhwihivpdj2"); // 			    (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->edge_type) = 6;
UNSUPPORTED("396r7wqgqrfpckajblb3umv3w"); // 			    (((Agedgeinfo_t*)(((Agobj_t*)(opp))->data))->conc_opp_flag) = (!(0));
UNSUPPORTED("7axloqtc8ro9xth8mued2zm8"); // 			} else {	/* see above.  this is getting out of hand */
UNSUPPORTED("5bo04qrhrl4ril7rc9ew44ytq"); // 			    other_edge(e);
UNSUPPORTED("dg99s9szcpxetfx2c15o3vj6m"); // 			    merge_chain(g, e, (((Agedgeinfo_t*)(((Agobj_t*)(opp))->data))->to_virt), (!(0)));
UNSUPPORTED("3to5h0rvqxdeqs38mhv47mm3o"); // 			}
UNSUPPORTED("91ilj0e8yph90t7k4ijuq5rb0"); // 			continue;
UNSUPPORTED("dkxvw03k2gg9anv4dbze06axd"); // 		    }
UNSUPPORTED("6eq5kf0bj692bokt0bixy1ixh"); // 		}
UNSUPPORTED("4h6j6xilybm6oz4i5b6617pao"); // 		make_chain(g, ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node), ((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node), e);
UNSUPPORTED("dpsnmca44s1cfw35axk4m0slg"); // 		prev = e;
	    }
	}
    }
    /* since decompose() is not called on subgraphs */
    if (NEQ(g, dot_root(g))) {
UNSUPPORTED("a7b5xrit2qi1v9h0lci143efc"); // 	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list = ((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list? (node_t **)grealloc((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list,(1)*sizeof(node_t *)):(node_t **)gmalloc((1)*sizeof(node_t *)));
UNSUPPORTED("b5c3960nc0ji0w9viawdyahq2"); // 	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list[0] = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist);
    }
}


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void class2(graph_t * g)
{
    int c;
    node_t *n, *t, *h;
    edge_t *e, *prev, *opp;
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist) = NULL;
    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->n_nodes) = 0;		/* new */
    mark_clusters(g);
    for (c = 1; c <= (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->n_cluster); c++)
	build_skeleton(g, (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->clust)[c]);
    for (n = agfstnode(g); n; n = agnxtnode(g, n))
	for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
	    if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->weight_class) <= 2)
		(((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->weight_class)++;
	    if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->weight_class) <= 2)
		(((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->weight_class)++;
	}
    for (n = agfstnode(g); n; n = agnxtnode(g, n)) {
	if (((((Agnodeinfo_t*)(((Agobj_t*)(n))->data))->clust) == NULL) && (n == UF_find(n))) {
	    fast_node(g, n);
	    (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->n_nodes)++;
	}
	prev = NULL;
	for (e = agfstout(g, n); e; e = agnxtout(g, e)) {
	    /* already processed */
	    if ((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->to_virt)) {
		prev = e;
		continue;
	    }
	    /* edges involving sub-clusters of g */
	    if (is_cluster_edge(e)) {
		/* following is new cluster multi-edge code */
		if (mergeable(prev, e)) {
		    if ((((Agedgeinfo_t*)(((Agobj_t*)(prev))->data))->to_virt)) {
			merge_chain(g, e, (((Agedgeinfo_t*)(((Agobj_t*)(prev))->data))->to_virt), 0);
			other_edge(e);
		    } else if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank) == (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank)) {
			merge_oneway(e, prev);
			other_edge(e);
		    }
		    /* else is an intra-cluster edge */
		    continue;
		}
		interclrep(g, e);
		prev = e;
		continue;
	    }
	    /* merge multi-edges */
	    if (prev && (((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node) == ((((((Agobj_t*)(prev))->tag).objtype) == 3? (prev): ((prev)+1))->node)) && (((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node) == ((((((Agobj_t*)(prev))->tag).objtype) == 2? (prev): ((prev)-1))->node))) {
		if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank) == (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank)) {
		    merge_oneway(e, prev);
		    other_edge(e);
		    continue;
		}
		if (((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->label) == NULL) && ((((Agedgeinfo_t*)(((Agobj_t*)(prev))->data))->label) == NULL)
		    && ports_eq(e, prev)) {
		    if (Concentrate)
			(((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->edge_type) = 6;
		    else {
			merge_chain(g, e, (((Agedgeinfo_t*)(((Agobj_t*)(prev))->data))->to_virt), (!(0)));
			other_edge(e);
		    }
		    continue;
		}
		/* parallel edges with different labels fall through here */
	    }
	    /* self edges */
	    if (((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node) == ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node)) {
		other_edge(e);
		prev = e;
		continue;
	    }
	    t = UF_find(((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node));
	    h = UF_find(((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node));
	    /* non-leader leaf nodes */
	    if ((((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node) != t) || (((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node) != h)) {
		/* FIX need to merge stuff */
		continue;
	    }
	    /* flat edges */
	    if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank) == (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank)) {
		flat_edge(g, e);
		prev = e;
		continue;
	    }
	    /* forward edges */
	    if ((((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 2?(e):((e)-1))->node)))->data))->rank) > (((Agnodeinfo_t*)(((Agobj_t*)(((((((Agobj_t*)(e))->tag).objtype) == 3?(e):((e)+1))->node)))->data))->rank)) {
		make_chain(g, ((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node), ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node), e);
		prev = e;
		continue;
	    }
	    /* backward edges */
	    else {
		/*other_edge(e); */
		/* avoid when opp==e in undirected graph */
		if ((opp = (agedge(g,((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node),((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node),NULL,0))) && (((((((Agobj_t*)(opp))->tag).objtype) == 2? (opp): ((opp)-1))->node) != ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node))) {
		    /* shadows a forward edge */
		    if ((((Agedgeinfo_t*)(((Agobj_t*)(opp))->data))->to_virt) == NULL)
			make_chain(g, ((((((Agobj_t*)(opp))->tag).objtype) == 3? (opp): ((opp)+1))->node), ((((((Agobj_t*)(opp))->tag).objtype) == 2? (opp): ((opp)-1))->node), opp);
		    if (((((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->label) == NULL) && ((((Agedgeinfo_t*)(((Agobj_t*)(opp))->data))->label) == NULL)
			&& ports_eq(e, opp)) {
			if (Concentrate) {
			    (((Agedgeinfo_t*)(((Agobj_t*)(e))->data))->edge_type) = 6;
			    (((Agedgeinfo_t*)(((Agobj_t*)(opp))->data))->conc_opp_flag) = (!(0));
			} else {	/* see above.  this is getting out of hand */
			    other_edge(e);
			    merge_chain(g, e, (((Agedgeinfo_t*)(((Agobj_t*)(opp))->data))->to_virt), (!(0)));
			}
			continue;
		    }
		}
		make_chain(g, ((((((Agobj_t*)(e))->tag).objtype) == 2? (e): ((e)-1))->node), ((((((Agobj_t*)(e))->tag).objtype) == 3? (e): ((e)+1))->node), e);
		prev = e;
	    }
	}
    }
    /* since decompose() is not called on subgraphs */
    if (g != dot_root(g)) {
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list = ((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list? (node_t **)grealloc((((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list,(1)*sizeof(node_t *)):(node_t **)gmalloc((1)*sizeof(node_t *)));
	(((Agraphinfo_t*)(((Agobj_t*)(g))->data))->comp).list[0] = (((Agraphinfo_t*)(((Agobj_t*)(g))->data))->nlist);
    }
}

