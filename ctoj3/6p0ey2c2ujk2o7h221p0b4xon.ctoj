public static __struct__<pointf> Bezier(__array_of_struct__ V, int degree, double t, __ptr__ Left, __ptr__ Right) {
    int i, j;			/* Index variables      */
    final __array_of_struct__ Vtemp[] = new __array_of_struct__[] { __array_of_struct__.malloc(pointf.class, 5+1),
    __array_of_struct__.malloc(pointf.class, 5+1),
    __array_of_struct__.malloc(pointf.class, 5+1),
    __array_of_struct__.malloc(pointf.class, 5+1),
    __array_of_struct__.malloc(pointf.class, 5+1),
    __array_of_struct__.malloc(pointf.class, 5+1) };
    /* Copy control points  */
    for (j = 0; j <= degree; j++) {
	Vtemp[0].plus(j).setStruct(V.plus(j).getStruct());
    }
    /* Triangle computation */
    for (i = 1; i <= degree; i++) {
	for (j = 0; j <= degree - i; j++) {
	    Vtemp[i].plus(j).setDouble("x",
		(1.0 - t) * Vtemp[i - 1].plus(j).getDouble("x") + t * Vtemp[i - 1].plus(j + 1).getDouble("x"));
	    Vtemp[i].plus(j).setDouble("y",
		(1.0 - t) * Vtemp[i - 1].plus(j).getDouble("y") + t * Vtemp[i - 1].plus(j + 1).getDouble("y"));
	}
    }
    if (Left != null)
	for (j = 0; j <= degree; j++)
	    Left.plus(j).setStruct(Vtemp[j].plus(0).getStruct());
    if (Right != null)
	for (j = 0; j <= degree; j++)
	    Right.plus(j).setStruct(Vtemp[degree - j].plus(j).getStruct());
    return (Vtemp[degree].plus(0).getStruct());
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
pointf Bezier(pointf * V, int degree, double t, pointf * Left, pointf * Right)
{
    int i, j;			/* Index variables      */
    pointf Vtemp[5 + 1][5 + 1];
    /* Copy control points  */
    for (j = 0; j <= degree; j++) {
	Vtemp[0][j] = V[j];
    }
    /* Triangle computation */
    for (i = 1; i <= degree; i++) {
	for (j = 0; j <= degree - i; j++) {
	    Vtemp[i][j].x =
		(1.0 - t) * Vtemp[i - 1][j].x + t * Vtemp[i - 1][j + 1].x;
	    Vtemp[i][j].y =
		(1.0 - t) * Vtemp[i - 1][j].y + t * Vtemp[i - 1][j + 1].y;
	}
    }
    if (Left != (void *)0)
	for (j = 0; j <= degree; j++)
	    Left[j] = Vtemp[j][0];
    if (Right != (void *)0)
	for (j = 0; j <= degree; j++)
	    Right[j] = Vtemp[degree - j][j];
    return (Vtemp[degree][0]);
}

