public static int init_graph(Agraph_s g) {
    int i, feasible;
    Agnode_s n;
    Agedge_s e;
    G = g;
    N_nodes = N_edges = S_i = 0;
UNSUPPORTED("8g62mxpap4eeua2lkn9a1iosi"); //     for (n = GD_nlist(g); n; n = ND_next(n)) {
UNSUPPORTED("1btcv7arbo4kdjfc0iu4lseed"); // 	ND_mark(n) = 0;
UNSUPPORTED("9479wjxc0efysywuogf655att"); // 	N_nodes++;
UNSUPPORTED("52cmd93u6a9nrulpeska7smf5"); // 	for (i = 0; (e = ND_out(n).list[i]); i++)
UNSUPPORTED("a4s7jvj0hu2gb0ved19q70boo"); // 	    N_edges++;
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("11tu6nen0s929pckrv4bn5fec"); //     Tree_node.list = ALLOC(N_nodes, Tree_node.list, node_t *);
UNSUPPORTED("6jinb0tw9mvm2ls73enhsp2v2"); //     Tree_node.size = 0;
UNSUPPORTED("86b5dtng9fi3si9vc2h0247xq"); //     Tree_edge.list = ALLOC(N_nodes, Tree_edge.list, edge_t *);
UNSUPPORTED("2rjdtdz0nw8duvaagwhvl3h3l"); //     Tree_edge.size = 0;
UNSUPPORTED("buj741pfjhhjgky7m4ba13bkj"); //     feasible = NOT(0);
UNSUPPORTED("8g62mxpap4eeua2lkn9a1iosi"); //     for (n = GD_nlist(g); n; n = ND_next(n)) {
UNSUPPORTED("122o94oduvs1upcvt0gaccwdm"); // 	ND_priority(n) = 0;
UNSUPPORTED("9grilwcazcmvzzmumz0v6zryg"); // 	for (i = 0; (e = ND_in(n).list[i]); i++) {
UNSUPPORTED("70kfych1i9cct0n9y7g0v6rj3"); // 	    ND_priority(n)++;
UNSUPPORTED("6tbl74mp4pf6y2crmgoeqfgws"); // 	    ED_cutvalue(e) = 0;
UNSUPPORTED("69v0ucrpgona6ohp8ompx303w"); // 	    ED_tree_index(e) = -1;
UNSUPPORTED("9crxgqt9ovx4j123ssboqukny"); // 	    if (feasible
UNSUPPORTED("cxj7snuwo4d4hasfrcnqstofj"); // 		&& (ND_rank(aghead(e)) - ND_rank(agtail(e)) < ED_minlen(e)))
UNSUPPORTED("9vt1v9ciblsgsxkuijk7jiwbj"); // 		feasible = 0;
UNSUPPORTED("flupwh3kosf3fkhkxllllt1"); // 	}
UNSUPPORTED("b23ve3zmztuln7pnp5fopcto4"); // 	ND_tree_in(n).list = N_NEW(i + 1, edge_t *);
UNSUPPORTED("m5kztgeog8fpr1s5cq430y10"); // 	ND_tree_in(n).size = 0;
UNSUPPORTED("cy1oenvozr9piy9iuk8t75hsh"); // 	for (i = 0; (e = ND_out(n).list[i]); i++);
UNSUPPORTED("ds9kua3csgxs7czmqwkm13tr3"); // 	ND_tree_out(n).list = N_NEW(i + 1, edge_t *);
UNSUPPORTED("4ref9f9nzjcix7ws4rjlujxak"); // 	ND_tree_out(n).size = 0;
UNSUPPORTED("dvgyxsnyeqqnyzq696k3vskib"); //     }
UNSUPPORTED("4y8bejp6joj8888jh9k6dgbi0"); //     return feasible;
UNSUPPORTED("c24nfmv9i7o5eoqaymbibp7m7"); // }

throw new UnsupportedOperationException();
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static int init_graph(graph_t * g)
{
    int i, feasible;
    node_t *n;
    edge_t *e;
    G = g;
    N_nodes = N_edges = S_i = 0;
    for (n = GD_nlist(g); n; n = ND_next(n)) {
	ND_mark(n) = 0;
	N_nodes++;
	for (i = 0; (e = ND_out(n).list[i]); i++)
	    N_edges++;
    }
    Tree_node.list = ALLOC(N_nodes, Tree_node.list, node_t *);
    Tree_node.size = 0;
    Tree_edge.list = ALLOC(N_nodes, Tree_edge.list, edge_t *);
    Tree_edge.size = 0;
    feasible = NOT(0);
    for (n = GD_nlist(g); n; n = ND_next(n)) {
	ND_priority(n) = 0;
	for (i = 0; (e = ND_in(n).list[i]); i++) {
	    ND_priority(n)++;
	    ED_cutvalue(e) = 0;
	    ED_tree_index(e) = -1;
	    if (feasible
		&& (ND_rank(aghead(e)) - ND_rank(agtail(e)) < ED_minlen(e)))
		feasible = 0;
	}
	ND_tree_in(n).list = N_NEW(i + 1, edge_t *);
	ND_tree_in(n).size = 0;
	for (i = 0; (e = ND_out(n).list[i]); i++);
	ND_tree_out(n).list = N_NEW(i + 1, edge_t *);
	ND_tree_out(n).size = 0;
    }
    return feasible;
}

