@TranslatedBy("plantuml")
public static Agdatadict_t agmakedatadict(Agraph_t g) {
    Agraph_t par;
    Agdatadict_t parent_dd, dd;
    dd = (Agdatadict_t ) agbindrec(g, DataDictName, sizeof(Agdatadict_t.class),
				    (false)).castTo(Agdatadict_t.class);
    dd.dict.n = agdtopen(g, AgDataDictDisc, Dttree);
    dd.dict.e = agdtopen(g, AgDataDictDisc, Dttree);
    dd.dict.g = agdtopen(g, AgDataDictDisc, Dttree);
    if ((par = agparent(g))!=null) {
	parent_dd = agdatadict(par, (false));
	;
	dtview(dd.dict.n, parent_dd.dict.n);
	dtview(dd.dict.e, parent_dd.dict.e);
	dtview(dd.dict.g, parent_dd.dict.g);
    } else {
	if (ProtoGraph!=null && (g != ProtoGraph)) {
	    /* it's not ok to dtview here for several reasons. the proto
	       graph could change, and the sym indices don't match */
	    parent_dd = agdatadict(ProtoGraph, (false));
	    agcopydict(parent_dd.dict.n, dd.dict.n, g, 1);
	    agcopydict(parent_dd.dict.e, dd.dict.e, g, 2);
	    agcopydict(parent_dd.dict.g, dd.dict.g, g, 0);
	}
    }
    return dd;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static Agdatadict_t *agmakedatadict(Agraph_t * g)
{
    Agraph_t *par;
    Agdatadict_t *parent_dd, *dd;
    dd = (Agdatadict_t *) agbindrec(g, DataDictName, sizeof(Agdatadict_t),
				    (0));
    dd->dict.n = agdtopen(g, &AgDataDictDisc, Dttree);
    dd->dict.e = agdtopen(g, &AgDataDictDisc, Dttree);
    dd->dict.g = agdtopen(g, &AgDataDictDisc, Dttree);
    if ((par = agparent(g))) {
	parent_dd = agdatadict(par, (0));
	;
	dtview(dd->dict.n, parent_dd->dict.n);
	dtview(dd->dict.e, parent_dd->dict.e);
	dtview(dd->dict.g, parent_dd->dict.g);
    } else {
	if (ProtoGraph && (g != ProtoGraph)) {
	    /* it's not ok to dtview here for several reasons. the proto
	       graph could change, and the sym indices don't match */
	    parent_dd = agdatadict(ProtoGraph, (0));
	    agcopydict(parent_dd->dict.n, dd->dict.n, g, 1);
	    agcopydict(parent_dd->dict.e, dd->dict.e, g, 2);
	    agcopydict(parent_dd->dict.g, dd->dict.g, g, 0);
	}
    }
    return dd;
}

