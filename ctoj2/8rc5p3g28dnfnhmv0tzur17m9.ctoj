@TranslatedBy("plantuml") 
public static Agnode_t agnode(Agraph_t g, StarChar name, boolean cflag) {
    Agraph_t root;
    Agnode_t n;
    @Unsigned Int id[] = new Int[] {new StarLongGeneric()};
    root = agroot(g);
    /* probe for existing node */
    if (agmapnametoid(g, 1, name, ASREF(id), (false))) {
	if ((n = agfindnode_by_id(g, id[0]))!=null)
	    return n;
	/* might already exist globally, but need to insert locally */
	if (cflag && (g != root) && ((n = agfindnode_by_id(root, id[0]))!=null)) {
	    return agsubnode(g, n, (N(false)));
	}
    }
    if (cflag && agmapnametoid(g, 1, name, ASREF(id), (N(false)))) {	/* reserve id */
	n = newnode(g, id[0], agnextseq(g, 1));
	installnodetoroot(g, n);
	initnode(g, n);
	;
	agregister(g, 1, n); /* register in external namespace */
	return n;
    }
    return null;
}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Agnode_t *agnode(Agraph_t * g, char *name, int cflag)
{
    Agraph_t *root;
    Agnode_t *n;
    unsigned long id;
    root = agroot(g);
    /* probe for existing node */
    if (agmapnametoid(g, 1, name, &id, (0))) {
	if ((n = agfindnode_by_id(g, id)))
	    return n;
	/* might already exist globally, but need to insert locally */
	if (cflag && (g != root) && ((n = agfindnode_by_id(root, id)))) {
	    return agsubnode(g, n, (!(0)));
	}
    }
    if (cflag && agmapnametoid(g, 1, name, &id, (!(0)))) {	/* reserve id */
	n = newnode(g, id, agnextseq(g, 1));
	installnodetoroot(g, n);
	initnode(g, n);
	;
	agregister(g, 1, n); /* register in external namespace */
	return n;
    }
    return ((Agnode_t*)0);
}

