@TranslatedBy("plantuml") 
public static int dotneato_args_initialize(GVC_t gvc, int argc, StarStarChar argv) {
    char c;
    StarChar rest, layout;
    StarChar val;
    boolean v;
    int i, nfiles;
    final @Unsigned StarChar buf = Memory.mallocStarChar(128);
    final h.agxbuf xb = new h.agxbuf();
    int Kflag = 0;
    /* establish if we are running in a CGI environment */
    HTTPServerEnVar = null; //getenv("SERVER_NAME");
    /* establish Gvfilepath, if any */
    Gvfilepath = null; // getenv("GV_FILE_PATH");
    gvc.common.cmdname = dotneato_basename(argv.bracket(0));
    if (gvc.common.verbose) {
        System.err.println("%s - %s version %s (%s)\n");
	    //gvc->common.cmdname, gvc->common.info[0],
	    //gvc->common.info[1], gvc->common.info[2]);
    }
    /* configure for available plugins */
    /* needs to know if "dot -c" is set (gvc->common.config) */
    /* must happen before trying to select any plugins */
    if (gvc.common.config) {
        gvconfig(gvc, gvc.common.config);
	throw new UnsupportedOperationException("exit (0)");
    }
    /* feed the globals */
    Verbose = gvc.common.verbose;
    CmdName = gvc.common.cmdname;
    nfiles = 0;
    for (i = 1; i < argc; i++)
	if (argv.bracket(i)!=null && argv.bracket(i).bracket(0) != '-')
	    nfiles++;
    gvc.input_filenames = (StarStarChar) zmalloc(new size_t(StarChar.class, nfiles + 1));
    nfiles = 0;
    agxbinit(xb, 128, buf);
    for (i = 1; i < argc; i++) {
throw new UnsupportedOperationException();
    }
    /* if no -Txxx, then set default format */
    if (N(gvc.jobs) || N(gvc.jobs.output_langname)) {
	v = gvjobs_output_langname(gvc, JUtils.asStarChar("dot"));
	if (N(v)) {
//	assert(v);  /* "dot" should always be available as an output format */
		System.err.println(
			"Unable to find even the default \"-Tdot\" renderer.  Has the config\nfile been generated by running \"dot -c\" with installer's priviledges?\n");
			return(2);
	}
    }
    /* set persistent attributes here (if not already set from command line options) */
    if (N(agattr(null, 1, JUtils.asStarChar("label"), null)))
	agattr(null, 1, JUtils.asStarChar("label"), JUtils.asStarChar("\\N"));
    return 0;
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
int dotneato_args_initialize(GVC_t * gvc, int argc, char **argv)
{
    char c, *rest, *layout;
    const char *val;
    int i, v, nfiles;
    unsigned char buf[128];
    agxbuf xb;
    int Kflag = 0;
    /* establish if we are running in a CGI environment */
    HTTPServerEnVar = getenv("SERVER_NAME");
    /* establish Gvfilepath, if any */
    Gvfilepath = getenv("GV_FILE_PATH");
    gvc->common.cmdname = dotneato_basename(argv[0]);
    if (gvc->common.verbose) {
        fprintf(stderr, "%s - %s version %s (%s)\n",
	    gvc->common.cmdname, gvc->common.info[0],
	    gvc->common.info[1], gvc->common.info[2]);
    }
    /* configure for available plugins */
    /* needs to know if "dot -c" is set (gvc->common.config) */
    /* must happen before trying to select any plugins */
    if (gvc->common.config) {
        gvconfig(gvc, gvc->common.config);
	exit (0);
    }
    /* feed the globals */
    Verbose = gvc->common.verbose;
    CmdName = gvc->common.cmdname;
    nfiles = 0;
    for (i = 1; i < argc; i++)
	if (argv[i] && argv[i][0] != '-')
	    nfiles++;
    gvc->input_filenames = (char **)zmalloc((nfiles + 1)*sizeof(char *));
    nfiles = 0;
    agxbinit(&xb, 128, buf);
    for (i = 1; i < argc; i++) {
	if (argv[i] && argv[i][0] == '-') {
	    rest = &(argv[i][2]);
	    switch (c = argv[i][1]) {
	    case 'G':
		if (*rest)
		    global_def(&xb, rest, 0, agattr);
		else {
		    fprintf(stderr, "Missing argument for -G flag\n");
		    return (dotneato_usage(1));
		}
		break;
	    case 'N':
		if (*rest)
		    global_def(&xb, rest, 1,agattr);
		else {
		    fprintf(stderr, "Missing argument for -N flag\n");
		    return (dotneato_usage(1));
		}
		break;
	    case 'E':
		if (*rest)
		    global_def(&xb, rest, 2,agattr);
		else {
		    fprintf(stderr, "Missing argument for -E flag\n");
		    return (dotneato_usage(1));
		}
		break;
	    case 'T':
		val = getFlagOpt(argc, argv, &i);
		if (!val) {
		    fprintf(stderr, "Missing argument for -T flag\n");
		    return (dotneato_usage(1));
		}
		v = gvjobs_output_langname(gvc, val);
		if (!v) {
		    fprintf(stderr, "Format: \"%s\" not recognized. Use one of:%s\n",
			val, gvplugin_list(gvc, API_device, val));
		    if (GvExitOnUsage) exit(1);
		    return(2);
		}
		break;
	    case 'K':
		val = getFlagOpt(argc, argv, &i);
		if (!val) {
                    fprintf(stderr, "Missing argument for -K flag\n");
                    return (dotneato_usage(1));
                }
                v = gvlayout_select(gvc, val);
                if (v == 999) {
	            fprintf(stderr, "There is no layout engine support for \"%s\"\n", val);
                    if ((*(val)==*("dot")&&!strcmp(val,"dot"))) {
                        fprintf(stderr, "Perhaps \"dot -c\" needs to be run (with installer's privileges) to register the plugins?\n");
                    }
		    else {
                        fprintf(stderr, "Use one of:%s\n",
				gvplugin_list(gvc, API_layout, val));
		    }
		    if (GvExitOnUsage) exit(1);
		    return(2);
                }
		Kflag = 1;
		break;
	    case 'P':
		P_graph = gvplugin_graph(gvc);
		break;
	    case 'V':
		fprintf(stderr, "%s - %s version %s (%s)\n",
			gvc->common.cmdname, gvc->common.info[0], 
			gvc->common.info[1], gvc->common.info[2]);
		if (GvExitOnUsage) exit(0);
		return (1);
		break;
	    case 'l':
		val = getFlagOpt(argc, argv, &i);
		if (!val) {
		    fprintf(stderr, "Missing argument for -l flag\n");
		    return (dotneato_usage(1));
		}
		use_library(gvc, val);
		break;
	    case 'o':
		val = getFlagOpt(argc, argv, &i);
		if (! gvc->common.auto_outfile_names)
		    gvjobs_output_filename(gvc, val);
		break;
	    case 'q':
		if (*rest) {
		    v = atoi(rest);
		    if (v <= 0) {
			fprintf(stderr,
				"Invalid parameter \"%s\" for -q flag - ignored\n",
				rest);
		    } else if (v == 1)
			agseterr(AGERR);
		    else
			agseterr(AGMAX);
		} else
		    agseterr(AGERR);
		break;
	    case 's':
		if (*rest) {
		    PSinputscale = atof(rest);
		    if (PSinputscale < 0) {
			fprintf(stderr,
				"Invalid parameter \"%s\" for -s flag\n",
				rest);
			return (dotneato_usage(1));
		    }
		    else if (PSinputscale == 0)
			PSinputscale = 72;
		} else
		    PSinputscale = 72;
		break;
	    case 'x':
		Reduce = (!(0));
		break;
	    case 'y':
		Y_invert = (!(0));
		break;
	    case '?':
		return (dotneato_usage(0));
		break;
	    default:
		agerr(AGERR, "%s: option -%c unrecognized\n\n", gvc->common.cmdname,
			c);
		return (dotneato_usage(1));
	    }
	} else if (argv[i])
	    gvc->input_filenames[nfiles++] = argv[i];
    }
    agxbfree (&xb);
    /* if no -K, use cmd name to set layout type */
    if (!Kflag) {
	layout = gvc->common.cmdname;
	if ((*(layout)==*("dot_static")&&!strcmp(layout,"dot_static"))
	    || (*(layout)==*("dot_builtins")&&!strcmp(layout,"dot_builtins"))
	    || (*(layout)==*("lt-dot")&&!strcmp(layout,"lt-dot"))
	    || (*(layout)==*("lt-dot_builtins")&&!strcmp(layout,"lt-dot_builtins"))
	    || (*(layout)==*("")&&!strcmp(layout,""))   /* when run as a process from Gvedit on Windows */
	)
            layout = "dot";
	i = gvlayout_select(gvc, layout);
	if (i == 999) {
	    fprintf(stderr, "There is no layout engine support for \"%s\"\n", layout);
            if ((*(layout)==*("dot")&&!strcmp(layout,"dot")))
		fprintf(stderr, "Perhaps \"dot -c\" needs to be run (with installer's privileges) to register the plugins?\n");
	    else 
		fprintf(stderr, "Use one of:%s\n", gvplugin_list(gvc, API_layout, ""));
	    if (GvExitOnUsage) exit(1);
	    return(2);
	}
    }
    /* if no -Txxx, then set default format */
    if (!gvc->jobs || !gvc->jobs->output_langname) {
	v = gvjobs_output_langname(gvc, "dot");
	if (!v) {
//	assert(v);  /* "dot" should always be available as an output format */
		fprintf(stderr,
			"Unable to find even the default \"-Tdot\" renderer.  Has the config\nfile been generated by running \"dot -c\" with installer's priviledges?\n");
			return(2);
	}
    }
    /* set persistent attributes here (if not already set from command line options) */
    if (!agattr(NULL, 1, "label", 0))
	agattr(NULL, 1, "label", "\\N");
    return 0;
}

