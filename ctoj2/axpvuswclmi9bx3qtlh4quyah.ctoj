@TranslatedBy("plantuml")
@HasGoto public static Dtdisc_t dtdisc(Dict_t dt, Dtdisc_t disc, int type) {
	Dtsearch_f	searchf;
	Dtlink_t	r, t;
	StarChar	k;
	Dtdisc_t	old;
	if(N(old = dt.disc) )	/* initialization call from dtopen() */
	{	dt.disc = disc;
		if(N(dt.memoryf = disc.memoryf) )
			dt.memoryf = new Dtmemory_f() {
				public StarVoid function(Dict_t arg1, StarVoid arg2, size_t arg3, Dtdisc_t arg4) {
					return dtmemory(arg1, arg2, arg3, arg4);
				}};
		return disc;
	}
	throw new UnsupportedOperationException();
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Dtdisc_t* dtdisc(Dt_t* dt, Dtdisc_t* disc, int type)
{
	register Dtsearch_f	searchf;
	register Dtlink_t	*r, *t;
	register char*	k;
	register Dtdisc_t*	old;
	if(!(old = dt->disc) )	/* initialization call from dtopen() */
	{	dt->disc = disc;
		if(!(dt->memoryf = disc->memoryf) )
			dt->memoryf = dtmemory;
		return disc;
	}
	if(!disc)	/* only want to know current discipline */
		return old;
	searchf = dt->meth->searchf;
	((dt->data->type&010000) ? dtrestore(dt,((Dtlink_t*)0)) : 0);
	if(old->eventf && (*old->eventf)(dt,3,(void*)disc,old) < 0)
		return ((Dtdisc_t*)0);
	dt->disc = disc;
	if(!(dt->memoryf = disc->memoryf) )
		dt->memoryf = dtmemory;
	if(dt->data->type&(0000040|0000100|0000020))
		goto done;
	else if(dt->data->type&0000002)
	{	if(type&0000002)
			goto done;
		else	goto dt_renew;
	}
	else if(dt->data->type&(0000001|0000002))
	{	if((type&0000002) && (type&0000001))
			goto done;
		else	goto dt_renew;
	}
	else /*if(dt->data->type&(DT_OSET|DT_OBAG))*/
	{	if(type&0000001)
			goto done;
	dt_renew:
		r = dtflatten(dt);
		dt->data->type &= ~010000;
		dt->data->here = ((Dtlink_t*)0);
		dt->data->size = 0;
		if(dt->data->type&(0000001|0000002))
		{	register Dtlink_t	**s, **ends;
			ends = (s = dt->data->hh._htab) + dt->data->ntab;
			while(s < ends)
				*s++ = ((Dtlink_t*)0);
		}
		/* reinsert them */
		while(r)
		{	t = r->right;
			if(!(type&0000002))	/* new hash value */
			{	k = (char*)(disc->link < 0 ? ((Dthold_t*)(r))->obj : (void*)((char*)(r) - disc->link) );
				k = (void*)(disc->size < 0 ? *((char**)((char*)((void*)k)+disc->key)) : ((char*)((void*)k)+disc->key));
				r->hl._hash = (disc->hashf ? (*disc->hashf)(dt,k,disc) : dtstrhash(0,k,disc->size) );
			}
			(void)(*searchf)(dt,(void*)r,0000040);
			r = t;
		}
	}
done:
	return old;
}

