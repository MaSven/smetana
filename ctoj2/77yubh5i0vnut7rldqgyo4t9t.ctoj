@TranslatedBy("plantuml")
@NeedReview
public static Agrec_t agmakeattrs(Agraph_t context, StarVoid obj) {
    int sz;
    Agattr_t rec;
    Agsym_t sym;
    Dict_t datadict;
    rec = (Agattr_t) agbindrec(obj, AgDataRecName, sizeof(Agattr_t.class), (false)).castTo(Agattr_t.class);
    datadict = agdictof(context, (((Agobj_t)obj.castTo(Agobj_t.class)).tag.objtype));
    ;
    if (rec.dict == null) {
	rec.dict = agdictof(agroot(context), ((Agobj_t)obj.castTo(Agobj_t.class)).tag.objtype);
	/* don't malloc(0) */
	sz = topdictsize((Agobj_t)obj.castTo(Agobj_t.class));
	if (sz < 4)
	    sz = 4;
	rec.str = (StarStarChar) agalloc(agraphof(obj), size_t.fromInt(sz * 4)).castTo(StarStarChar.class);
	/* doesn't call agxset() so no obj-modified callbacks occur */
	for (sym = (Agsym_t) datadict.searchf.function(datadict,null,0000200); sym!=null;
	     sym = (Agsym_t) datadict.searchf.function(datadict,sym,0000010))
	    rec.str.setBracket(sym.id, agstrdup(agraphof(obj), sym.defval));
    } else {
	;
    }
    return (Agrec_t) rec.castTo(Agrec_t.class);
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
static Agrec_t *agmakeattrs(Agraph_t * context, void *obj)
{
    int sz;
    Agattr_t *rec;
    Agsym_t *sym;
    Dict_t *datadict;
    rec = agbindrec(obj, AgDataRecName, sizeof(Agattr_t), (0));
    datadict = agdictof(context, ((((Agobj_t*)(obj))->tag).objtype));
    ;
    if (rec->dict == ((Dict_t *)0)) {
	rec->dict = agdictof(agroot(context), ((((Agobj_t*)(obj))->tag).objtype));
	/* don't malloc(0) */
	sz = topdictsize(obj);
	if (sz < 4)
	    sz = 4;
	rec->str = agalloc(agraphof(obj), sz * sizeof(char *));
	/* doesn't call agxset() so no obj-modified callbacks occur */
	for (sym = (Agsym_t *) (*(((Dt_t*)(datadict))->searchf))((datadict),(void*)(0),0000200); sym;
	     sym = (Agsym_t *) (*(((Dt_t*)(datadict))->searchf))((datadict),(void*)(sym),0000010))
	    rec->str[sym->id] = agstrdup(agraphof(obj), sym->defval);
    } else {
	;
    }
    return (Agrec_t *) rec;
}

