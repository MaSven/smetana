@TranslatedBy("plantuml")
@NeedReview
@HasQuestion("Tag/key to be validated")
public static Agedge_t agedge(Agraph_t  g, Agnode_t t, Agnode_t h, StarChar name, boolean cflag) {
    Agedge_t e;
    @Unsigned Int id[] = new Int[] {new StarLongGeneric()};
    boolean have_id;
    have_id = agmapnametoid(g, 2, name, ASREF(id), (false));
    if (have_id || ((name == null) && ((N(cflag)) || agisstrict(g)))) {
	/* probe for pre-existing edge */
	final Agtag_t key = new Agtag_t();
	key.copyFrom(Tag);
	if (have_id) {
	    key.id = id[0];
	    key.objtype = 2;
	} else {
	    key.id = null; key.objtype = 0;
	}
	/* might already exist locally */
	e = agfindedge_by_key(g, t, h, key);
	if ((e == null) && agisundirected(g))
	    e = agfindedge_by_key(g, h, t, key);
	if (e!=null)
	    return e;
	if (cflag) {
	    e = agfindedge_by_key(agroot(g), t, h, key);
	    if ((e == null) && agisundirected(g))
		e = agfindedge_by_key(agroot(g), h, t, key);
	    if (e!=null) {
		subedge(g,e);
		return e;
	    }
	}
    }
    if (cflag && ok_to_make_edge(g, t, h)
	&& agmapnametoid(g, 2, name, ASREF(id), (N(0)))) { /* reserve id */
	e = newedge(g, t, h, id[0]);
	agregister(g, 2, e); /* register new object in external namespace */
    }
    else
	e = null;
    return e;
}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Agedge_t *agedge(Agraph_t * g, Agnode_t * t, Agnode_t * h, char *name,
		 int cflag)
{
    Agedge_t *e;
    unsigned long id;
    int have_id;
    have_id = agmapnametoid(g, 2, name, &id, (0));
    if (have_id || ((name == ((char*)0)) && ((!(cflag)) || agisstrict(g)))) {
	/* probe for pre-existing edge */
	Agtag_t key;
	key = Tag;
	if (have_id) {
	    key.id = id;
	    key.objtype = 2;
	} else {
	    key.id = key.objtype = 0;
	}
	/* might already exist locally */
	e = agfindedge_by_key(g, t, h, key);
	if ((e == ((Agedge_t*)0)) && agisundirected(g))
	    e = agfindedge_by_key(g, h, t, key);
	if (e)
	    return e;
	if (cflag) {
	    e = agfindedge_by_key(agroot(g), t, h, key);
	    if ((e == ((Agedge_t*)0)) && agisundirected(g))
		e = agfindedge_by_key(agroot(g), h, t, key);
	    if (e) {
		subedge(g,e);
		return e;
	    }
	}
    }
    if (cflag && ok_to_make_edge(g, t, h)
	&& agmapnametoid(g, 2, name, &id, (!(0)))) { /* reserve id */
	e = newedge(g, t, h, id);
	agregister(g, 2, e); /* register new object in external namespace */
    }
    else
	e = ((Agedge_t*)0);
    return e;
}

